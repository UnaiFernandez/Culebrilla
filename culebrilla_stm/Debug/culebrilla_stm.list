
culebrilla_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  0800d0b8  0800d0b8  0001d0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d820  0800d820  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d820  0800d820  0001d820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d828  0800d828  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d828  0800d828  0001d828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d82c  0800d82c  0001d82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b3c  200001e4  0800da14  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d20  0800da14  00024d20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016062  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f6  00000000  00000000  00036276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00039770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  0003a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c8e  00000000  00000000  0003ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014322  00000000  00000000  00055696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009da5c  00000000  00000000  000699b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fac  00000000  00000000  00107464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d0a0 	.word	0x0800d0a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800d0a0 	.word	0x0800d0a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <leds_on>:
#include "main.h"
#include "../Inc/culebrilla.h"

int board[GRID][GRID];

void leds_on(int x, int y) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	board[y][x] = 1;
 8001012:	4907      	ldr	r1, [pc, #28]	; (8001030 <leds_on+0x28>)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	00da      	lsls	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	2201      	movs	r2, #1
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000200 	.word	0x20000200

08001034 <leds_off>:
void leds_off(int x, int y) {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
	board[y][x] = 0;
 800103e:	4907      	ldr	r1, [pc, #28]	; (800105c <leds_off+0x28>)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	00da      	lsls	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	2200      	movs	r2, #0
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000200 	.word	0x20000200

08001060 <row_on>:

void row_on(int i, int on) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	switch (i) {
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b07      	cmp	r3, #7
 800106e:	d856      	bhi.n	800111e <row_on+0xbe>
 8001070:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <row_on+0x18>)
 8001072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	08001099 	.word	0x08001099
 800107c:	080010a9 	.word	0x080010a9
 8001080:	080010bb 	.word	0x080010bb
 8001084:	080010cd 	.word	0x080010cd
 8001088:	080010dd 	.word	0x080010dd
 800108c:	080010ef 	.word	0x080010ef
 8001090:	080010ff 	.word	0x080010ff
 8001094:	0800110f 	.word	0x0800110f
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, on);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	2104      	movs	r1, #4
 80010a0:	4821      	ldr	r0, [pc, #132]	; (8001128 <row_on+0xc8>)
 80010a2:	f002 fb59 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80010a6:	e03a      	b.n	800111e <row_on+0xbe>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, on);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b2:	481d      	ldr	r0, [pc, #116]	; (8001128 <row_on+0xc8>)
 80010b4:	f002 fb50 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80010b8:	e031      	b.n	800111e <row_on+0xbe>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, on);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	461a      	mov	r2, r3
 80010c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c4:	4818      	ldr	r0, [pc, #96]	; (8001128 <row_on+0xc8>)
 80010c6:	f002 fb47 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80010ca:	e028      	b.n	800111e <row_on+0xbe>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, on);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	2102      	movs	r1, #2
 80010d4:	4814      	ldr	r0, [pc, #80]	; (8001128 <row_on+0xc8>)
 80010d6:	f002 fb3f 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80010da:	e020      	b.n	800111e <row_on+0xbe>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, on);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e6:	4810      	ldr	r0, [pc, #64]	; (8001128 <row_on+0xc8>)
 80010e8:	f002 fb36 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80010ec:	e017      	b.n	800111e <row_on+0xbe>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, on);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <row_on+0xcc>)
 80010f8:	f002 fb2e 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80010fc:	e00f      	b.n	800111e <row_on+0xbe>
	case 6:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, on);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	2140      	movs	r1, #64	; 0x40
 8001106:	480a      	ldr	r0, [pc, #40]	; (8001130 <row_on+0xd0>)
 8001108:	f002 fb26 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 800110c:	e007      	b.n	800111e <row_on+0xbe>
	case 7:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, on);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	461a      	mov	r2, r3
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <row_on+0xd0>)
 8001118:	f002 fb1e 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 800111c:	bf00      	nop
	}
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800
 8001130:	40020000 	.word	0x40020000

08001134 <col_on>:
/*Cristobal*/
void col_on(int i, int on) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	// COLUMNAS
	switch (i) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b07      	cmp	r3, #7
 8001142:	d855      	bhi.n	80011f0 <col_on+0xbc>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <col_on+0x18>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	0800116d 	.word	0x0800116d
 8001150:	0800117f 	.word	0x0800117f
 8001154:	08001191 	.word	0x08001191
 8001158:	080011a1 	.word	0x080011a1
 800115c:	080011b1 	.word	0x080011b1
 8001160:	080011c1 	.word	0x080011c1
 8001164:	080011d1 	.word	0x080011d1
 8001168:	080011e1 	.word	0x080011e1
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, on);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001176:	4820      	ldr	r0, [pc, #128]	; (80011f8 <col_on+0xc4>)
 8001178:	f002 faee 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 800117c:	e038      	b.n	80011f0 <col_on+0xbc>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, on);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	481b      	ldr	r0, [pc, #108]	; (80011f8 <col_on+0xc4>)
 800118a:	f002 fae5 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 800118e:	e02f      	b.n	80011f0 <col_on+0xbc>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, on);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	4817      	ldr	r0, [pc, #92]	; (80011f8 <col_on+0xc4>)
 800119a:	f002 fadd 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 800119e:	e027      	b.n	80011f0 <col_on+0xbc>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	2120      	movs	r1, #32
 80011a8:	4813      	ldr	r0, [pc, #76]	; (80011f8 <col_on+0xc4>)
 80011aa:	f002 fad5 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80011ae:	e01f      	b.n	80011f0 <col_on+0xbc>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, on);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	2102      	movs	r1, #2
 80011b8:	4810      	ldr	r0, [pc, #64]	; (80011fc <col_on+0xc8>)
 80011ba:	f002 facd 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80011be:	e017      	b.n	80011f0 <col_on+0xbc>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, on);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <col_on+0xc4>)
 80011ca:	f002 fac5 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80011ce:	e00f      	b.n	80011f0 <col_on+0xbc>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, on);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	2101      	movs	r1, #1
 80011d8:	4808      	ldr	r0, [pc, #32]	; (80011fc <col_on+0xc8>)
 80011da:	f002 fabd 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80011de:	e007      	b.n	80011f0 <col_on+0xbc>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, on);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	2101      	movs	r1, #1
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <col_on+0xc4>)
 80011ea:	f002 fab5 	bl	8003758 <HAL_GPIO_WritePin>
		break;
 80011ee:	bf00      	nop
	}
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800

08001200 <select_digit>:

void select_digit(int arr[4]) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, arr[0]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	4810      	ldr	r0, [pc, #64]	; (8001258 <select_digit+0x58>)
 8001216:	f002 fa9f 	bl	8003758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, arr[1]);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3304      	adds	r3, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	2104      	movs	r1, #4
 8001226:	480d      	ldr	r0, [pc, #52]	; (800125c <select_digit+0x5c>)
 8001228:	f002 fa96 	bl	8003758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, arr[2]);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3308      	adds	r3, #8
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	2108      	movs	r1, #8
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <select_digit+0x60>)
 800123a:	f002 fa8d 	bl	8003758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, arr[3]);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	330c      	adds	r3, #12
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	2102      	movs	r1, #2
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <select_digit+0x64>)
 800124c:	f002 fa84 	bl	8003758 <HAL_GPIO_WritePin>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40020400 	.word	0x40020400
 8001264:	40021c00 	.word	0x40021c00

08001268 <print_n>:

//PRINT NUMBERS

void print_n(int arr[7]) // writing 0
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, arr[0]);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127c:	4820      	ldr	r0, [pc, #128]	; (8001300 <print_n+0x98>)
 800127e:	f002 fa6b 	bl	8003758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, arr[1]);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001290:	481b      	ldr	r0, [pc, #108]	; (8001300 <print_n+0x98>)
 8001292:	f002 fa61 	bl	8003758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, arr[2]);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3308      	adds	r3, #8
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	4817      	ldr	r0, [pc, #92]	; (8001300 <print_n+0x98>)
 80012a4:	f002 fa58 	bl	8003758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, arr[3]);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	330c      	adds	r3, #12
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	2120      	movs	r1, #32
 80012b4:	4812      	ldr	r0, [pc, #72]	; (8001300 <print_n+0x98>)
 80012b6:	f002 fa4f 	bl	8003758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, arr[4]);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3310      	adds	r3, #16
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c8:	480e      	ldr	r0, [pc, #56]	; (8001304 <print_n+0x9c>)
 80012ca:	f002 fa45 	bl	8003758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, arr[5]);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3314      	adds	r3, #20
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <print_n+0x9c>)
 80012de:	f002 fa3b 	bl	8003758 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, arr[6]);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3318      	adds	r3, #24
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <print_n+0xa0>)
 80012f2:	f002 fa31 	bl	8003758 <HAL_GPIO_WritePin>
	// digitalWrite(DOT, LOW);
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400

0800130c <print_score>:
		n /= 10;
	}
	return dig;
}

void print_score(int state, int score) {
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b0ea      	sub	sp, #424	; 0x1a8
 8001310:	af00      	add	r7, sp, #0
 8001312:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001316:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800131a:	6018      	str	r0, [r3, #0]
 800131c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001320:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001324:	6019      	str	r1, [r3, #0]
	int i, n;
	int dig[4];
	switch (state) {
 8001326:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800132a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d011      	beq.n	8001358 <print_score+0x4c>
 8001334:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001338:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f2c0 81fb 	blt.w	800173a <print_score+0x42e>
 8001344:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001348:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3b01      	subs	r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	f200 81f2 	bhi.w	800173a <print_score+0x42e>
 8001356:	e01a      	b.n	800138e <print_score+0x82>
	case START:
		select_digit(D_ALL);
 8001358:	4bd0      	ldr	r3, [pc, #832]	; (800169c <print_score+0x390>)
 800135a:	f507 74c0 	add.w	r4, r7, #384	; 0x180
 800135e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001364:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff49 	bl	8001200 <select_digit>
		print_n(GUION);
 800136e:	4bcc      	ldr	r3, [pc, #816]	; (80016a0 <print_score+0x394>)
 8001370:	f507 74b2 	add.w	r4, r7, #356	; 0x164
 8001374:	461d      	mov	r5, r3
 8001376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800137e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001382:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff6e 	bl	8001268 <print_n>
		break;
 800138c:	e1d5      	b.n	800173a <print_score+0x42e>
	case PLAY:
	case PAUSA:
		n = score;
 800138e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001392:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		for (i = 3; i >= 0; i--) {
 800139c:	2303      	movs	r3, #3
 800139e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013a2:	e023      	b.n	80013ec <print_score+0xe0>
			dig[i] = n % 10;
 80013a4:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80013a8:	4bbe      	ldr	r3, [pc, #760]	; (80016a4 <print_score+0x398>)
 80013aa:	fb83 2301 	smull	r2, r3, r3, r1
 80013ae:	109a      	asrs	r2, r3, #2
 80013b0:	17cb      	asrs	r3, r1, #31
 80013b2:	1ad2      	subs	r2, r2, r3
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	1aca      	subs	r2, r1, r3
 80013be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80013c8:	443b      	add	r3, r7
 80013ca:	f843 2c18 	str.w	r2, [r3, #-24]
			n /= 10;
 80013ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80013d2:	4ab4      	ldr	r2, [pc, #720]	; (80016a4 <print_score+0x398>)
 80013d4:	fb82 1203 	smull	r1, r2, r2, r3
 80013d8:	1092      	asrs	r2, r2, #2
 80013da:	17db      	asrs	r3, r3, #31
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		for (i = 3; i >= 0; i--) {
 80013e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dad7      	bge.n	80013a4 <print_score+0x98>
		}
		//dig = get_digits(score);
		for (i = 0; i < 4; i++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013fa:	e198      	b.n	800172e <print_score+0x422>
			select_digit(DIGIT(i));
 80013fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10e      	bne.n	8001422 <print_score+0x116>
 8001404:	2301      	movs	r3, #1
 8001406:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800141c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001420:	e033      	b.n	800148a <print_score+0x17e>
 8001422:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001426:	2b01      	cmp	r3, #1
 8001428:	d10e      	bne.n	8001448 <print_score+0x13c>
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001430:	2301      	movs	r3, #1
 8001432:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001442:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001446:	e020      	b.n	800148a <print_score+0x17e>
 8001448:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800144c:	2b02      	cmp	r3, #2
 800144e:	d10e      	bne.n	800146e <print_score+0x162>
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800145c:	2301      	movs	r3, #1
 800145e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001468:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800146c:	e00d      	b.n	800148a <print_score+0x17e>
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001480:	2301      	movs	r3, #1
 8001482:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001486:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff feb8 	bl	8001200 <select_digit>
			print_n(NUMBER(dig[i]));
 8001490:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800149a:	443b      	add	r3, r7
 800149c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d117      	bne.n	80014d4 <print_score+0x1c8>
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014c8:	2301      	movs	r3, #1
 80014ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014d2:	e121      	b.n	8001718 <print_score+0x40c>
 80014d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80014de:	443b      	add	r3, r7
 80014e0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d10c      	bne.n	8001502 <print_score+0x1f6>
 80014e8:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <print_score+0x39c>)
 80014ea:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80014ee:	461d      	mov	r5, r3
 80014f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001500:	e10a      	b.n	8001718 <print_score+0x40c>
 8001502:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800150c:	443b      	add	r3, r7
 800150e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d10c      	bne.n	8001530 <print_score+0x224>
 8001516:	4b65      	ldr	r3, [pc, #404]	; (80016ac <print_score+0x3a0>)
 8001518:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 800151c:	461d      	mov	r5, r3
 800151e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800152a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800152e:	e0f3      	b.n	8001718 <print_score+0x40c>
 8001530:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800153a:	443b      	add	r3, r7
 800153c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d10c      	bne.n	800155e <print_score+0x252>
 8001544:	4b5a      	ldr	r3, [pc, #360]	; (80016b0 <print_score+0x3a4>)
 8001546:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800154a:	461d      	mov	r5, r3
 800154c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001550:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001558:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800155c:	e0dc      	b.n	8001718 <print_score+0x40c>
 800155e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001568:	443b      	add	r3, r7
 800156a:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800156e:	2b04      	cmp	r3, #4
 8001570:	d10f      	bne.n	8001592 <print_score+0x286>
 8001572:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001576:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800157a:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <print_score+0x3a8>)
 800157c:	461c      	mov	r4, r3
 800157e:	4615      	mov	r5, r2
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800158c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001590:	e0c2      	b.n	8001718 <print_score+0x40c>
 8001592:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800159c:	443b      	add	r3, r7
 800159e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d10f      	bne.n	80015c6 <print_score+0x2ba>
 80015a6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80015aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015ae:	4a42      	ldr	r2, [pc, #264]	; (80016b8 <print_score+0x3ac>)
 80015b0:	461c      	mov	r4, r3
 80015b2:	4615      	mov	r5, r2
 80015b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015c4:	e0a8      	b.n	8001718 <print_score+0x40c>
 80015c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015d0:	443b      	add	r3, r7
 80015d2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d12c      	bne.n	8001634 <print_score+0x328>
 80015da:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80015de:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80015ea:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015ee:	2201      	movs	r2, #1
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80015f6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001602:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800160e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800161a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001626:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
 800162e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001632:	e071      	b.n	8001718 <print_score+0x40c>
 8001634:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800163e:	443b      	add	r3, r7
 8001640:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001644:	2b07      	cmp	r3, #7
 8001646:	d10f      	bne.n	8001668 <print_score+0x35c>
 8001648:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800164c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001650:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <print_score+0x3b0>)
 8001652:	461c      	mov	r4, r3
 8001654:	4615      	mov	r5, r2
 8001656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800165e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001662:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001666:	e057      	b.n	8001718 <print_score+0x40c>
 8001668:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001672:	443b      	add	r3, r7
 8001674:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001678:	2b08      	cmp	r3, #8
 800167a:	d121      	bne.n	80016c0 <print_score+0x3b4>
 800167c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001680:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001684:	461a      	mov	r2, r3
 8001686:	2300      	movs	r3, #0
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	6053      	str	r3, [r2, #4]
 800168c:	6093      	str	r3, [r2, #8]
 800168e:	60d3      	str	r3, [r2, #12]
 8001690:	6113      	str	r3, [r2, #16]
 8001692:	6153      	str	r3, [r2, #20]
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169a:	e03d      	b.n	8001718 <print_score+0x40c>
 800169c:	0800d0b8 	.word	0x0800d0b8
 80016a0:	0800d0c8 	.word	0x0800d0c8
 80016a4:	66666667 	.word	0x66666667
 80016a8:	0800d0e4 	.word	0x0800d0e4
 80016ac:	0800d100 	.word	0x0800d100
 80016b0:	0800d11c 	.word	0x0800d11c
 80016b4:	0800d138 	.word	0x0800d138
 80016b8:	0800d154 	.word	0x0800d154
 80016bc:	0800d170 	.word	0x0800d170
 80016c0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80016f8:	2201      	movs	r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001700:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800170c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fda5 	bl	8001268 <print_n>
			HAL_Delay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f001 f90c 	bl	800293c <HAL_Delay>
		for (i = 0; i < 4; i++) {
 8001724:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001728:	3301      	adds	r3, #1
 800172a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800172e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001732:	2b03      	cmp	r3, #3
 8001734:	f77f ae62 	ble.w	80013fc <print_score+0xf0>
		}
		//free(dig);
		break;
 8001738:	bf00      	nop
	}
}
 800173a:	bf00      	nop
 800173c:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8001740:	46bd      	mov	sp, r7
 8001742:	bdb0      	pop	{r4, r5, r7, pc}

08001744 <change_direction>:

void change_direction(int *dir, int new_dir) { //OK
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	switch (new_dir) {
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d82b      	bhi.n	80017ac <change_direction+0x68>
 8001754:	a201      	add	r2, pc, #4	; (adr r2, 800175c <change_direction+0x18>)
 8001756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175a:	bf00      	nop
 800175c:	0800179d 	.word	0x0800179d
 8001760:	0800177d 	.word	0x0800177d
 8001764:	0800176d 	.word	0x0800176d
 8001768:	0800178d 	.word	0x0800178d
	case U:
		if (*dir != D)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d01d      	beq.n	80017b0 <change_direction+0x6c>
			*dir = U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
		break;
 800177a:	e019      	b.n	80017b0 <change_direction+0x6c>
	case L:
		if (*dir != R)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d017      	beq.n	80017b4 <change_direction+0x70>
			*dir = L;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]
		break;
 800178a:	e013      	b.n	80017b4 <change_direction+0x70>
	case D:
		if (*dir != U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d011      	beq.n	80017b8 <change_direction+0x74>
			*dir = D;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2203      	movs	r2, #3
 8001798:	601a      	str	r2, [r3, #0]
		break;
 800179a:	e00d      	b.n	80017b8 <change_direction+0x74>
	case R:
		if (*dir != L)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d00b      	beq.n	80017bc <change_direction+0x78>
			*dir = R;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
		break;
 80017aa:	e007      	b.n	80017bc <change_direction+0x78>
	default:
		break;
 80017ac:	bf00      	nop
 80017ae:	e006      	b.n	80017be <change_direction+0x7a>
		break;
 80017b0:	bf00      	nop
 80017b2:	e004      	b.n	80017be <change_direction+0x7a>
		break;
 80017b4:	bf00      	nop
 80017b6:	e002      	b.n	80017be <change_direction+0x7a>
		break;
 80017b8:	bf00      	nop
 80017ba:	e000      	b.n	80017be <change_direction+0x7a>
		break;
 80017bc:	bf00      	nop
	}
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <startup_board>:

void startup_board() { //OK
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	int i, j;
	for (i = 0; i < GRID; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	e00f      	b.n	80017f8 <startup_board+0x2c>
		for (j = 0; j < GRID; j++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	e006      	b.n	80017ec <startup_board+0x20>
			leds_off(i, j);
 80017de:	6839      	ldr	r1, [r7, #0]
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fc27 	bl	8001034 <leds_off>
		for (j = 0; j < GRID; j++) {
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	ddf5      	ble.n	80017de <startup_board+0x12>
	for (i = 0; i < GRID; i++) {
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3301      	adds	r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	ddec      	ble.n	80017d8 <startup_board+0xc>
		}
	}

}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <print_board>:

void print_board() { //ok
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
	int i, j;
	for (i = 0; i < GRID; i++) {
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e02a      	b.n	800186a <print_board+0x62>
		row_on(i, 1);
 8001814:	2101      	movs	r1, #1
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff fc22 	bl	8001060 <row_on>
		//for (j=GRID-1; j>=0; j--) {
		for (j = 0; j < GRID; j++) {
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	e016      	b.n	8001850 <print_board+0x48>
			int b = board[i][j];
 8001822:	4916      	ldr	r1, [pc, #88]	; (800187c <print_board+0x74>)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	00da      	lsls	r2, r3, #3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4413      	add	r3, r2
 800182c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001830:	607b      	str	r3, [r7, #4]
			if (b)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <print_board+0x3a>
				col_on(j, 0);  //Encender
 8001838:	2100      	movs	r1, #0
 800183a:	68b8      	ldr	r0, [r7, #8]
 800183c:	f7ff fc7a 	bl	8001134 <col_on>
 8001840:	e003      	b.n	800184a <print_board+0x42>
			else
				col_on(j, 1);  //Apagar
 8001842:	2101      	movs	r1, #1
 8001844:	68b8      	ldr	r0, [r7, #8]
 8001846:	f7ff fc75 	bl	8001134 <col_on>
		for (j = 0; j < GRID; j++) {
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3301      	adds	r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b07      	cmp	r3, #7
 8001854:	dde5      	ble.n	8001822 <print_board+0x1a>
		}
		HAL_Delay(5);
 8001856:	2005      	movs	r0, #5
 8001858:	f001 f870 	bl	800293c <HAL_Delay>
		row_on(i, 0);
 800185c:	2100      	movs	r1, #0
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff fbfe 	bl	8001060 <row_on>
	for (i = 0; i < GRID; i++) {
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3301      	adds	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b07      	cmp	r3, #7
 800186e:	ddd1      	ble.n	8001814 <print_board+0xc>
	}
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000200 	.word	0x20000200

08001880 <update_board>:

void update_board(snake_t *snake, food_t *food) {  ///OK
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
	int i;
	coord_t s_pos;

	for (i = 0; i < snake->length; i++) {
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e012      	b.n	80018b6 <update_board+0x36>
		s_pos = snake->body[i];
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f107 020c 	add.w	r2, r7, #12
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018a0:	e882 0003 	stmia.w	r2, {r0, r1}
		leds_on(s_pos.x, s_pos.y);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fbac 	bl	8001008 <leds_on>
	for (i = 0; i < snake->length; i++) {
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbe6      	blt.n	8001890 <update_board+0x10>
	}

	leds_on(food->pos.x, food->pos.y);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f7ff fb9b 	bl	8001008 <leds_on>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <rand_in_range>:

int rand_in_range(int min, int max) {  //OK
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
	return (rand() % (max - min + 1)) + min;
 80018e4:	f007 fe9a 	bl	800961c <rand>
 80018e8:	4602      	mov	r2, r0
 80018ea:	6839      	ldr	r1, [r7, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	1acb      	subs	r3, r1, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	fb92 f1f3 	sdiv	r1, r2, r3
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	1ad2      	subs	r2, r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4413      	add	r3, r2
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <spawn_snake>:

snake_t spawn_snake() {  //OK
 8001908:	b580      	push	{r7, lr}
 800190a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800190e:	af00      	add	r7, sp, #0
 8001910:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001914:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001918:	6018      	str	r0, [r3, #0]
	snake_t snake;
	coord_t head;
	head.x = rand_in_range(0, GRID - 1);
 800191a:	2107      	movs	r1, #7
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff ffdc 	bl	80018da <rand_in_range>
 8001922:	4602      	mov	r2, r0
 8001924:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001928:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800192c:	601a      	str	r2, [r3, #0]
	head.y = rand_in_range(0, GRID - 1);
 800192e:	2107      	movs	r1, #7
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff ffd2 	bl	80018da <rand_in_range>
 8001936:	4602      	mov	r2, r0
 8001938:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800193c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001940:	605a      	str	r2, [r3, #4]

	snake.body[0] = head;
 8001942:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001946:	f5a3 7102 	sub.w	r1, r3, #520	; 0x208
 800194a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800194e:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8001952:	460b      	mov	r3, r1
 8001954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001958:	e883 0003 	stmia.w	r3, {r0, r1}
	snake.length = 1;
 800195c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001960:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001964:	2201      	movs	r2, #1
 8001966:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	snake.die = 0;
 800196a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800196e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001972:	2200      	movs	r2, #0
 8001974:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
///Aqui crea el cuerpo de la serpiente y inicializa la variable de culebrilla muerta a 0
	return snake;
 8001978:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800197c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001986:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001992:	461a      	mov	r2, r3
 8001994:	f006 fea4 	bl	80086e0 <memcpy>
}
 8001998:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800199c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <move_snake>:

void move_snake(snake_t *snake, int dir) {  //OK
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	int i;
	coord_t head_next = snake->body[0];
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019c0:	e883 0003 	stmia.w	r3, {r0, r1}

	switch (dir) {
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d834      	bhi.n	8001a34 <move_snake+0x88>
 80019ca:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <move_snake+0x24>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	080019f7 	.word	0x080019f7
 80019d8:	08001a21 	.word	0x08001a21
 80019dc:	08001a0b 	.word	0x08001a0b
	case R:
		//if (head_next.x == GRID-1)
		//head_next.x = 0;
		//else
		head_next.x = (head_next.x + 1) % GRID;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3301      	adds	r3, #1
 80019e4:	425a      	negs	r2, r3
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	f002 0207 	and.w	r2, r2, #7
 80019ee:	bf58      	it	pl
 80019f0:	4253      	negpl	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
		break;
 80019f4:	e01e      	b.n	8001a34 <move_snake+0x88>
	case L:
		if (head_next.x == 0)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <move_snake+0x56>
			head_next.x = GRID - 1;
 80019fc:	2307      	movs	r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]
		else
			head_next.x--;
		break;
 8001a00:	e018      	b.n	8001a34 <move_snake+0x88>
			head_next.x--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
		break;
 8001a08:	e014      	b.n	8001a34 <move_snake+0x88>
	case D:
		head_next.y = (head_next.y + 1) % GRID;
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	425a      	negs	r2, r3
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	f002 0207 	and.w	r2, r2, #7
 8001a18:	bf58      	it	pl
 8001a1a:	4253      	negpl	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
		break;
 8001a1e:	e009      	b.n	8001a34 <move_snake+0x88>
	case U:
		if (head_next.y == 0)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <move_snake+0x80>
			head_next.y = GRID - 1;
 8001a26:	2307      	movs	r3, #7
 8001a28:	613b      	str	r3, [r7, #16]
		else
			head_next.y--;
		break;
 8001a2a:	e002      	b.n	8001a32 <move_snake+0x86>
			head_next.y--;
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	613b      	str	r3, [r7, #16]
		break;
 8001a32:	bf00      	nop
	}

	for (i = snake->length - 1; i > 0; i--) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e00f      	b.n	8001a60 <move_snake+0xb4>
		snake->body[i] = snake->body[i - 1];
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4403      	add	r3, r0
 8001a4e:	00d2      	lsls	r2, r2, #3
 8001a50:	440a      	add	r2, r1
 8001a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a56:	e883 0003 	stmia.w	r3, {r0, r1}
	for (i = snake->length - 1; i > 0; i--) {
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	dcec      	bgt.n	8001a40 <move_snake+0x94>
	}

	// check if is is dead
	if (is_in_snake(&head_next, snake)) {
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f813 	bl	8001a98 <is_in_snake>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <move_snake+0xd4>
		snake->die = 1;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	}
	snake->body[0] = head_next;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a8c:	e882 0003 	stmia.w	r2, {r0, r1}

}
 8001a90:	bf00      	nop
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <is_in_snake>:

int is_in_snake(coord_t *c, snake_t *snake) {			//OK
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
	int i;
	for (i = 0; i < snake->length; i++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e015      	b.n	8001ad4 <is_in_snake+0x3c>
		if (snake->body[i].x == c->x && snake->body[i].y == c->y) {
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d10a      	bne.n	8001ace <is_in_snake+0x36>
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d101      	bne.n	8001ace <is_in_snake+0x36>
			return 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e009      	b.n	8001ae2 <is_in_snake+0x4a>
	for (i = 0; i < snake->length; i++) {
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dbe3      	blt.n	8001aa8 <is_in_snake+0x10>
		}
	}
	return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <eat>:

void eat(snake_t *snake, food_t *food) {			///mas menos entendido
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
	if (snake->body[0].x == food->pos.x && snake->body[0].y == food->pos.y) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d11b      	bne.n	8001b3c <eat+0x4e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d115      	bne.n	8001b3c <eat+0x4e>
		food->eaten = 1;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	609a      	str	r2, [r3, #8]
		snake->body[snake->length] = snake->body[0];
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	460a      	mov	r2, r1
 8001b26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b2a:	e883 0003 	stmia.w	r3, {r0, r1}
		snake->length++;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <spawn_food>:

void spawn_food(food_t *food, snake_t *snake) {			//OK
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	while (is_in_snake(&(food->pos), snake)) {
 8001b52:	e00d      	b.n	8001b70 <spawn_food+0x28>
		food->pos.x = rand_in_range(0, GRID - 1);
 8001b54:	2107      	movs	r1, #7
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff febf 	bl	80018da <rand_in_range>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	601a      	str	r2, [r3, #0]
		food->pos.y = rand_in_range(0, GRID - 1);
 8001b62:	2107      	movs	r1, #7
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff feb8 	bl	80018da <rand_in_range>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	605a      	str	r2, [r3, #4]
	while (is_in_snake(&(food->pos), snake)) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff8f 	bl	8001a98 <is_in_snake>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1e9      	bne.n	8001b54 <spawn_food+0xc>
	}

	food->eaten = 0;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b94:	f000 fe60 	bl	8002858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b98:	f000 f876 	bl	8001c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b9c:	f000 f95c 	bl	8001e58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ba0:	f000 f930 	bl	8001e04 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001ba4:	f000 f8ce 	bl	8001d44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ba8:	f003 fa38 	bl	800501c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of dir */
  dirHandle = osMutexNew(&dir_attributes);
 8001bac:	4820      	ldr	r0, [pc, #128]	; (8001c30 <main+0xa0>)
 8001bae:	f003 fb2c 	bl	800520a <osMutexNew>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a1f      	ldr	r2, [pc, #124]	; (8001c34 <main+0xa4>)
 8001bb6:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of cola_juego */
  cola_juegoHandle = osMessageQueueNew (1, sizeof(valores_t), &cola_juego_attributes);
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <main+0xa8>)
 8001bba:	2114      	movs	r1, #20
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f003 fc32 	bl	8005426 <osMessageQueueNew>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <main+0xac>)
 8001bc6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of pulsador */
  pulsadorHandle = osThreadNew(start_pulsador, NULL, &pulsador_attributes);
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <main+0xb0>)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	481d      	ldr	r0, [pc, #116]	; (8001c44 <main+0xb4>)
 8001bce:	f003 fa6f 	bl	80050b0 <osThreadNew>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <main+0xb8>)
 8001bd6:	6013      	str	r3, [r2, #0]

  /* creation of juego */
  juegoHandle = osThreadNew(start_juego, NULL, &juego_attributes);
 8001bd8:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <main+0xbc>)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	481c      	ldr	r0, [pc, #112]	; (8001c50 <main+0xc0>)
 8001bde:	f003 fa67 	bl	80050b0 <osThreadNew>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <main+0xc4>)
 8001be6:	6013      	str	r3, [r2, #0]

  /* creation of uart */
  uartHandle = osThreadNew(start_uart, NULL, &uart_attributes);
 8001be8:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <main+0xc8>)
 8001bea:	2100      	movs	r1, #0
 8001bec:	481b      	ldr	r0, [pc, #108]	; (8001c5c <main+0xcc>)
 8001bee:	f003 fa5f 	bl	80050b0 <osThreadNew>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <main+0xd0>)
 8001bf6:	6013      	str	r3, [r2, #0]

  /* creation of uart_rec */
  uart_recHandle = osThreadNew(start_uart_rec, NULL, &uart_rec_attributes);
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <main+0xd4>)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	481a      	ldr	r0, [pc, #104]	; (8001c68 <main+0xd8>)
 8001bfe:	f003 fa57 	bl	80050b0 <osThreadNew>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <main+0xdc>)
 8001c06:	6013      	str	r3, [r2, #0]

  /* creation of display */
  displayHandle = osThreadNew(start_display, NULL, &display_attributes);
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <main+0xe0>)
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4819      	ldr	r0, [pc, #100]	; (8001c74 <main+0xe4>)
 8001c0e:	f003 fa4f 	bl	80050b0 <osThreadNew>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <main+0xe8>)
 8001c16:	6013      	str	r3, [r2, #0]

  /* creation of board */
  boardHandle = osThreadNew(start_board, NULL, &board_attributes);
 8001c18:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <main+0xec>)
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4818      	ldr	r0, [pc, #96]	; (8001c80 <main+0xf0>)
 8001c1e:	f003 fa47 	bl	80050b0 <osThreadNew>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <main+0xf4>)
 8001c26:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c28:	f003 fa1c 	bl	8005064 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001c2c:	e7fe      	b.n	8001c2c <main+0x9c>
 8001c2e:	bf00      	nop
 8001c30:	0800d2f8 	.word	0x0800d2f8
 8001c34:	200003a8 	.word	0x200003a8
 8001c38:	0800d2e0 	.word	0x0800d2e0
 8001c3c:	200003a4 	.word	0x200003a4
 8001c40:	0800d208 	.word	0x0800d208
 8001c44:	08002151 	.word	0x08002151
 8001c48:	2000038c 	.word	0x2000038c
 8001c4c:	0800d22c 	.word	0x0800d22c
 8001c50:	080021a1 	.word	0x080021a1
 8001c54:	20000390 	.word	0x20000390
 8001c58:	0800d250 	.word	0x0800d250
 8001c5c:	0800234d 	.word	0x0800234d
 8001c60:	20000394 	.word	0x20000394
 8001c64:	0800d274 	.word	0x0800d274
 8001c68:	080023cd 	.word	0x080023cd
 8001c6c:	20000398 	.word	0x20000398
 8001c70:	0800d298 	.word	0x0800d298
 8001c74:	080023f1 	.word	0x080023f1
 8001c78:	2000039c 	.word	0x2000039c
 8001c7c:	0800d2bc 	.word	0x0800d2bc
 8001c80:	08002435 	.word	0x08002435
 8001c84:	200003a0 	.word	0x200003a0

08001c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b094      	sub	sp, #80	; 0x50
 8001c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	2230      	movs	r2, #48	; 0x30
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f006 fd30 	bl	80086fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <SystemClock_Config+0xb4>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <SystemClock_Config+0xb4>)
 8001cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cba:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <SystemClock_Config+0xb4>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <SystemClock_Config+0xb8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <SystemClock_Config+0xb8>)
 8001cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <SystemClock_Config+0xb8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cec:	2310      	movs	r3, #16
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 fd47 	bl	800378c <HAL_RCC_OscConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001d04:	f000 fba0 	bl	8002448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d08:	230f      	movs	r3, #15
 8001d0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 ffaa 	bl	8003c7c <HAL_RCC_ClockConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001d2e:	f000 fb8b 	bl	8002448 <Error_Handler>
  }
}
 8001d32:	bf00      	nop
 8001d34:	3750      	adds	r7, #80	; 0x50
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40007000 	.word	0x40007000

08001d44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d58:	4a28      	ldr	r2, [pc, #160]	; (8001dfc <MX_ADC1_Init+0xb8>)
 8001d5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d5c:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d68:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d84:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <MX_ADC1_Init+0xbc>)
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d90:	2202      	movs	r2, #2
 8001d92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001da2:	4815      	ldr	r0, [pc, #84]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001da4:	f000 fdee 	bl	8002984 <HAL_ADC_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001dae:	f000 fb4b 	bl	8002448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001db2:	230c      	movs	r3, #12
 8001db4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001dba:	2307      	movs	r3, #7
 8001dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001dc4:	f000 ff50 	bl	8002c68 <HAL_ADC_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001dce:	f000 fb3b 	bl	8002448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001dd2:	230d      	movs	r3, #13
 8001dd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dda:	463b      	mov	r3, r7
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <MX_ADC1_Init+0xb4>)
 8001de0:	f000 ff42 	bl	8002c68 <HAL_ADC_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001dea:	f000 fb2d 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000300 	.word	0x20000300
 8001dfc:	40012000 	.word	0x40012000
 8001e00:	0f000001 	.word	0x0f000001

08001e04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <MX_USART2_UART_Init+0x50>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e3c:	f002 f8fe 	bl	800403c <HAL_UART_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e46:	f000 faff 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000348 	.word	0x20000348
 8001e54:	40004400 	.word	0x40004400

08001e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b63      	ldr	r3, [pc, #396]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a62      	ldr	r2, [pc, #392]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b60      	ldr	r3, [pc, #384]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b5c      	ldr	r3, [pc, #368]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a5b      	ldr	r2, [pc, #364]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b59      	ldr	r3, [pc, #356]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b55      	ldr	r3, [pc, #340]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a54      	ldr	r2, [pc, #336]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b52      	ldr	r3, [pc, #328]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4b4e      	ldr	r3, [pc, #312]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a4d      	ldr	r2, [pc, #308]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a46      	ldr	r2, [pc, #280]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b44      	ldr	r3, [pc, #272]	; (8002000 <MX_GPIO_Init+0x1a8>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001efa:	2200      	movs	r2, #0
 8001efc:	f24d 31e3 	movw	r1, #54243	; 0xd3e3
 8001f00:	4840      	ldr	r0, [pc, #256]	; (8002004 <MX_GPIO_Init+0x1ac>)
 8001f02:	f001 fc29 	bl	8003758 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2102      	movs	r1, #2
 8001f0a:	483f      	ldr	r0, [pc, #252]	; (8002008 <MX_GPIO_Init+0x1b0>)
 8001f0c:	f001 fc24 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 51cf 	mov.w	r1, #6624	; 0x19e0
 8001f16:	483d      	ldr	r0, [pc, #244]	; (800200c <MX_GPIO_Init+0x1b4>)
 8001f18:	f001 fc1e 	bl	8003758 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f24f 31ef 	movw	r1, #62447	; 0xf3ef
 8001f22:	483b      	ldr	r0, [pc, #236]	; (8002010 <MX_GPIO_Init+0x1b8>)
 8001f24:	f001 fc18 	bl	8003758 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2104      	movs	r1, #4
 8001f2c:	4839      	ldr	r0, [pc, #228]	; (8002014 <MX_GPIO_Init+0x1bc>)
 8001f2e:	f001 fc13 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	482f      	ldr	r0, [pc, #188]	; (8002004 <MX_GPIO_Init+0x1ac>)
 8001f48:	f001 fa6a 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC5 PC6 PC7 PC8
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001f4c:	f24d 33e3 	movw	r3, #54243	; 0xd3e3
 8001f50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4827      	ldr	r0, [pc, #156]	; (8002004 <MX_GPIO_Init+0x1ac>)
 8001f66:	f001 fa5b 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4821      	ldr	r0, [pc, #132]	; (8002008 <MX_GPIO_Init+0x1b0>)
 8001f82:	f001 fa4d 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001f86:	f44f 53cf 	mov.w	r3, #6624	; 0x19e0
 8001f8a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	481b      	ldr	r0, [pc, #108]	; (800200c <MX_GPIO_Init+0x1b4>)
 8001fa0:	f001 fa3e 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB3
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001fa4:	f24f 33ef 	movw	r3, #62447	; 0xf3ef
 8001fa8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4814      	ldr	r0, [pc, #80]	; (8002010 <MX_GPIO_Init+0x1b8>)
 8001fbe:	f001 fa2f 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480e      	ldr	r0, [pc, #56]	; (8002014 <MX_GPIO_Init+0x1bc>)
 8001fda:	f001 fa21 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fde:	2310      	movs	r3, #16
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <MX_GPIO_Init+0x1b8>)
 8001ff2:	f001 fa15 	bl	8003420 <HAL_GPIO_Init>

}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40020800 	.word	0x40020800
 8002008:	40021c00 	.word	0x40021c00
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020c00 	.word	0x40020c00

08002018 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, buff, sizeof(buff));
 8002020:	2202      	movs	r2, #2
 8002022:	493f      	ldr	r1, [pc, #252]	; (8002120 <HAL_UART_RxCpltCallback+0x108>)
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f002 f89b 	bl	8004160 <HAL_UART_Receive_IT>
	if (mode == TECLAS) {
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_UART_RxCpltCallback+0x10c>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d170      	bne.n	8002114 <HAL_UART_RxCpltCallback+0xfc>
		switch (buff[0]) {
 8002032:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_UART_RxCpltCallback+0x108>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	3b64      	subs	r3, #100	; 0x64
 8002038:	2b11      	cmp	r3, #17
 800203a:	d86c      	bhi.n	8002116 <HAL_UART_RxCpltCallback+0xfe>
 800203c:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <HAL_UART_RxCpltCallback+0x2c>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	080020af 	.word	0x080020af
 8002048:	08002117 	.word	0x08002117
 800204c:	08002117 	.word	0x08002117
 8002050:	08002117 	.word	0x08002117
 8002054:	08002117 	.word	0x08002117
 8002058:	08002117 	.word	0x08002117
 800205c:	08002117 	.word	0x08002117
 8002060:	08002117 	.word	0x08002117
 8002064:	080020d1 	.word	0x080020d1
 8002068:	08002117 	.word	0x08002117
 800206c:	08002117 	.word	0x08002117
 8002070:	08002117 	.word	0x08002117
 8002074:	08002117 	.word	0x08002117
 8002078:	08002117 	.word	0x08002117
 800207c:	0800208d 	.word	0x0800208d
 8002080:	08002117 	.word	0x08002117
 8002084:	08002117 	.word	0x08002117
 8002088:	080020f3 	.word	0x080020f3
		case 'r':
			osMutexAcquire(dirHandle, 10000);
 800208c:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_UART_RxCpltCallback+0x110>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f242 7110 	movw	r1, #10000	; 0x2710
 8002094:	4618      	mov	r0, r3
 8002096:	f003 f93e 	bl	8005316 <osMutexAcquire>
			change_direction(&dir, R);
 800209a:	2100      	movs	r1, #0
 800209c:	4823      	ldr	r0, [pc, #140]	; (800212c <HAL_UART_RxCpltCallback+0x114>)
 800209e:	f7ff fb51 	bl	8001744 <change_direction>
			osMutexRelease(dirHandle);
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_UART_RxCpltCallback+0x110>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 f980 	bl	80053ac <osMutexRelease>

			break;
 80020ac:	e033      	b.n	8002116 <HAL_UART_RxCpltCallback+0xfe>
		case 'd':
			osMutexAcquire(dirHandle, 10000);
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HAL_UART_RxCpltCallback+0x110>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f242 7110 	movw	r1, #10000	; 0x2710
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 f92d 	bl	8005316 <osMutexAcquire>
			change_direction(&dir, D);
 80020bc:	2103      	movs	r1, #3
 80020be:	481b      	ldr	r0, [pc, #108]	; (800212c <HAL_UART_RxCpltCallback+0x114>)
 80020c0:	f7ff fb40 	bl	8001744 <change_direction>
			osMutexRelease(dirHandle);
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_UART_RxCpltCallback+0x110>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 f96f 	bl	80053ac <osMutexRelease>
			break;
 80020ce:	e022      	b.n	8002116 <HAL_UART_RxCpltCallback+0xfe>
		case 'l':
			osMutexAcquire(dirHandle, 10000);
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_UART_RxCpltCallback+0x110>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f242 7110 	movw	r1, #10000	; 0x2710
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 f91c 	bl	8005316 <osMutexAcquire>
			change_direction(&dir, L);
 80020de:	2101      	movs	r1, #1
 80020e0:	4812      	ldr	r0, [pc, #72]	; (800212c <HAL_UART_RxCpltCallback+0x114>)
 80020e2:	f7ff fb2f 	bl	8001744 <change_direction>
			osMutexRelease(dirHandle);
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_UART_RxCpltCallback+0x110>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 f95e 	bl	80053ac <osMutexRelease>
			break;
 80020f0:	e011      	b.n	8002116 <HAL_UART_RxCpltCallback+0xfe>
		case 'u':
			osMutexAcquire(dirHandle, 10000);
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_UART_RxCpltCallback+0x110>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 f90b 	bl	8005316 <osMutexAcquire>
			change_direction(&dir, U);
 8002100:	2102      	movs	r1, #2
 8002102:	480a      	ldr	r0, [pc, #40]	; (800212c <HAL_UART_RxCpltCallback+0x114>)
 8002104:	f7ff fb1e 	bl	8001744 <change_direction>
			osMutexRelease(dirHandle);
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_UART_RxCpltCallback+0x110>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f003 f94d 	bl	80053ac <osMutexRelease>
			break;
 8002112:	e000      	b.n	8002116 <HAL_UART_RxCpltCallback+0xfe>
		}
	}
 8002114:	bf00      	nop
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200003b0 	.word	0x200003b0
 8002124:	200003ad 	.word	0x200003ad
 8002128:	200003a8 	.word	0x200003a8
 800212c:	200003b4 	.word	0x200003b4

08002130 <leer_pulsador>:

uint8_t leer_pulsador(int pul) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

		return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8002138:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <leer_pulsador+0x1c>)
 800213e:	f001 faf3 	bl	8003728 <HAL_GPIO_ReadPin>
 8002142:	4603      	mov	r3, r0

}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40020800 	.word	0x40020800

08002150 <start_pulsador>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_pulsador */
void start_pulsador(void *argument)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		if (leer_pulsador(0) == 0) {
 8002158:	2000      	movs	r0, #0
 800215a:	f7ff ffe9 	bl	8002130 <leer_pulsador>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d116      	bne.n	8002192 <start_pulsador+0x42>
			switch (state) {
 8002164:	4b0d      	ldr	r3, [pc, #52]	; (800219c <start_pulsador+0x4c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d00e      	beq.n	800218a <start_pulsador+0x3a>
 800216c:	2b02      	cmp	r3, #2
 800216e:	dc11      	bgt.n	8002194 <start_pulsador+0x44>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <start_pulsador+0x2a>
 8002174:	2b01      	cmp	r3, #1
 8002176:	d004      	beq.n	8002182 <start_pulsador+0x32>
 8002178:	e00c      	b.n	8002194 <start_pulsador+0x44>
			case START:
				state = PLAY;
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <start_pulsador+0x4c>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
				break;
 8002180:	e008      	b.n	8002194 <start_pulsador+0x44>
			case PLAY:
				state = PAUSA;
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <start_pulsador+0x4c>)
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
				break;
 8002188:	e004      	b.n	8002194 <start_pulsador+0x44>
			case PAUSA:
				state = PLAY;
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <start_pulsador+0x4c>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
				break;
 8002190:	e000      	b.n	8002194 <start_pulsador+0x44>
			}
		}
 8002192:	bf00      	nop

		osDelay(10);
 8002194:	200a      	movs	r0, #10
 8002196:	f003 f81d 	bl	80051d4 <osDelay>
		if (leer_pulsador(0) == 0) {
 800219a:	e7dd      	b.n	8002158 <start_pulsador+0x8>
 800219c:	200003ac 	.word	0x200003ac

080021a0 <start_juego>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_juego */
void start_juego(void *argument)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80021ac:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80021b0:	6018      	str	r0, [r3, #0]
	food_t food;

	for (;;) {

		// para empezar en una direccion
		osMutexAcquire(dirHandle, 10000);
 80021b2:	4b62      	ldr	r3, [pc, #392]	; (800233c <start_juego+0x19c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f242 7110 	movw	r1, #10000	; 0x2710
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 f8ab 	bl	8005316 <osMutexAcquire>
		dir = R;
 80021c0:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <start_juego+0x1a0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
		osMutexRelease(dirHandle);
 80021c6:	4b5d      	ldr	r3, [pc, #372]	; (800233c <start_juego+0x19c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 f8ee 	bl	80053ac <osMutexRelease>

		srand(0);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f007 f9f5 	bl	80095c0 <srand>

		startup_board();						//Pone la matriz apagada
 80021d6:	f7ff faf9 	bl	80017cc <startup_board>
		snake = spawn_snake();			//aparece el cuerpo de la serpiente
 80021da:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80021de:	f5a3 7409 	sub.w	r4, r3, #548	; 0x224
 80021e2:	463b      	mov	r3, r7
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fb8f 	bl	8001908 <spawn_snake>
 80021ea:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80021ee:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80021f2:	4620      	mov	r0, r4
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80021fa:	461a      	mov	r2, r3
 80021fc:	f006 fa70 	bl	80086e0 <memcpy>

		food.pos = snake.body[0]; // para evitar un bug de spawn_food
 8002200:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002204:	f5a3 710c 	sub.w	r1, r3, #560	; 0x230
 8002208:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800220c:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002210:	460b      	mov	r3, r1
 8002212:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002216:	e883 0003 	stmia.w	r3, {r0, r1}

		spawn_food(&food, &snake); //Aparecer comida en la matriz aleatoriamente
 800221a:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 800221e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fc8f 	bl	8001b48 <spawn_food>

		while (state != PLAY) {
 800222a:	e002      	b.n	8002232 <start_juego+0x92>
			osDelay(10);
 800222c:	200a      	movs	r0, #10
 800222e:	f002 ffd1 	bl	80051d4 <osDelay>
		while (state != PLAY) {
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <start_juego+0x1a4>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d1f8      	bne.n	800222c <start_juego+0x8c>
		}

		while (snake.die == 0) { //Hasta que la serpiente muera estaremos en el while
 800223a:	e070      	b.n	800231e <start_juego+0x17e>

			//TODO: pensar mas elegante
			s_pos = snake.body[snake.length - 1]; //Se coje la posicion inicial de la serpiente
 800223c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002240:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8002244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002248:	3b01      	subs	r3, #1
 800224a:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800224e:	f5a2 7109 	sub.w	r1, r2, #548	; 0x224
 8002252:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800225e:	e882 0003 	stmia.w	r2, {r0, r1}
			leds_off(s_pos.x, s_pos.y); //Se apaga la posicion de la posicion en la que estaba el cuerpo de la serpiente
 8002262:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8002266:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fee1 	bl	8001034 <leds_off>
			move_snake(&snake, dir); // Se mueve el cuerpo eliminado anteriormente a la siguiente posicion en la direccion establecida
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <start_juego+0x1a0>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fb95 	bl	80019ac <move_snake>

			eat(&snake, &food); //Mas o menos entendido, sirve para vigilar si ha comido la fruta
 8002282:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8002286:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fc2e 	bl	8001aee <eat>

			if (food.eaten == 1) {
 8002292:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002296:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d107      	bne.n	80022b0 <start_juego+0x110>
				spawn_food(&food, &snake);
 80022a0:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 80022a4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fc4c 	bl	8001b48 <spawn_food>
			}

			update_board(&snake, &food); //Para mostrar el cuerpo y comida dela serpiente en la matiz
 80022b0:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80022b4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fae0 	bl	8001880 <update_board>
			//sleep(1);
			datos_juego.eje[0] = snake.body[0].x;
 80022c0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80022c4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
			datos_juego.eje[1] = snake.body[0].y;
 80022ce:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80022d2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
			datos_juego.joy[0] = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
			datos_juego.joy[1] = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
			datos_juego.puntos = snake.length;
 80022e8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80022ec:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80022f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022f4:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
			osMessageQueuePut(cola_juegoHandle, &datos_juego, 0U, 0U);
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <start_juego+0x1a8>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 8002300:	2300      	movs	r3, #0
 8002302:	2200      	movs	r2, #0
 8002304:	f003 f902 	bl	800550c <osMessageQueuePut>

			while (state == PAUSA) {
 8002308:	e002      	b.n	8002310 <start_juego+0x170>
				osDelay(10);
 800230a:	200a      	movs	r0, #10
 800230c:	f002 ff62 	bl	80051d4 <osDelay>
			while (state == PAUSA) {
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <start_juego+0x1a4>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d0f8      	beq.n	800230a <start_juego+0x16a>
			}

			osDelay(SPEED);
 8002318:	2096      	movs	r0, #150	; 0x96
 800231a:	f002 ff5b 	bl	80051d4 <osDelay>
		while (snake.die == 0) { //Hasta que la serpiente muera estaremos en el while
 800231e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002322:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8002326:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800232a:	2b00      	cmp	r3, #0
 800232c:	d086      	beq.n	800223c <start_juego+0x9c>
		}
		state = PAUSA;
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <start_juego+0x1a4>)
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8002334:	2064      	movs	r0, #100	; 0x64
 8002336:	f002 ff4d 	bl	80051d4 <osDelay>
		osMutexAcquire(dirHandle, 10000);
 800233a:	e73a      	b.n	80021b2 <start_juego+0x12>
 800233c:	200003a8 	.word	0x200003a8
 8002340:	200003b4 	.word	0x200003b4
 8002344:	200003ac 	.word	0x200003ac
 8002348:	200003a4 	.word	0x200003a4

0800234c <start_uart>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_uart */
void start_uart(void *argument)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b092      	sub	sp, #72	; 0x48
 8002350:	af02      	add	r7, sp, #8
 8002352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_uart */
	/* Infinite loop */
	valores_t datos;
	osStatus_t status;
	uint8_t msg[] = "400,8,5,1";
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <start_uart+0x6c>)
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	ca07      	ldmia	r2, {r0, r1, r2}
 800235c:	c303      	stmia	r3!, {r0, r1}
 800235e:	801a      	strh	r2, [r3, #0]
	uint32_t x, y, puntos;
	int m;
	for (;;) {
		status = osMessageQueueGet(cola_juegoHandle, &datos, 0U, 0U);
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <start_uart+0x70>)
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	f107 0118 	add.w	r1, r7, #24
 8002368:	2300      	movs	r3, #0
 800236a:	2200      	movs	r2, #0
 800236c:	f003 f92e 	bl	80055cc <osMessageQueueGet>
 8002370:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status == osOK) {
 8002372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d108      	bne.n	800238a <start_uart+0x3e>
			x = datos.eje[0];
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	63fb      	str	r3, [r7, #60]	; 0x3c
			y = datos.eje[1];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
			puntos = datos.puntos;
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
			m = mode;
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <start_uart+0x74>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
		}
			sprintf(msg, "%lu,%lu,%lu,%d", puntos - 1, x,
 800238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	f107 000c 	add.w	r0, r7, #12
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239c:	4909      	ldr	r1, [pc, #36]	; (80023c4 <start_uart+0x78>)
 800239e:	f007 f991 	bl	80096c4 <siprintf>
					y, m);
			HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	220a      	movs	r2, #10
 80023a8:	4619      	mov	r1, r3
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <start_uart+0x7c>)
 80023ac:	f001 fe93 	bl	80040d6 <HAL_UART_Transmit_IT>
		osDelay(20);
 80023b0:	2014      	movs	r0, #20
 80023b2:	f002 ff0f 	bl	80051d4 <osDelay>
		status = osMessageQueueGet(cola_juegoHandle, &datos, 0U, 0U);
 80023b6:	e7d3      	b.n	8002360 <start_uart+0x14>
 80023b8:	0800d1e4 	.word	0x0800d1e4
 80023bc:	200003a4 	.word	0x200003a4
 80023c0:	200003ad 	.word	0x200003ad
 80023c4:	0800d1d4 	.word	0x0800d1d4
 80023c8:	20000348 	.word	0x20000348

080023cc <start_uart_rec>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_uart_rec */
void start_uart_rec(void *argument)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_uart_rec */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_IT(&huart2, buff, sizeof(buff));
 80023d4:	2202      	movs	r2, #2
 80023d6:	4904      	ldr	r1, [pc, #16]	; (80023e8 <start_uart_rec+0x1c>)
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <start_uart_rec+0x20>)
 80023da:	f001 fec1 	bl	8004160 <HAL_UART_Receive_IT>
		osDelay(1);
 80023de:	2001      	movs	r0, #1
 80023e0:	f002 fef8 	bl	80051d4 <osDelay>
		HAL_UART_Receive_IT(&huart2, buff, sizeof(buff));
 80023e4:	e7f6      	b.n	80023d4 <start_uart_rec+0x8>
 80023e6:	bf00      	nop
 80023e8:	200003b0 	.word	0x200003b0
 80023ec:	20000348 	.word	0x20000348

080023f0 <start_display>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_start_display */
void start_display(void *argument)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	int score;
	osStatus_t status;
	valores_t datos;
	for (;;) {
		status = osMessageQueueGet(cola_juegoHandle, &datos, 0U, 0U);
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <start_display+0x3c>)
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	f107 010c 	add.w	r1, r7, #12
 8002400:	2300      	movs	r3, #0
 8002402:	2200      	movs	r2, #0
 8002404:	f003 f8e2 	bl	80055cc <osMessageQueueGet>
 8002408:	6238      	str	r0, [r7, #32]
		if (status == osOK)
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <start_display+0x26>
			score = datos.puntos - 1;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	3b01      	subs	r3, #1
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
		print_score(state, score);
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <start_display+0x40>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe ff75 	bl	800130c <print_score>
		osDelay(1);
 8002422:	2001      	movs	r0, #1
 8002424:	f002 fed6 	bl	80051d4 <osDelay>
		status = osMessageQueueGet(cola_juegoHandle, &datos, 0U, 0U);
 8002428:	e7e6      	b.n	80023f8 <start_display+0x8>
 800242a:	bf00      	nop
 800242c:	200003a4 	.word	0x200003a4
 8002430:	200003ac 	.word	0x200003ac

08002434 <start_board>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_board */
void start_board(void *argument)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_board */
  /* Infinite loop */
  for(;;)
  {
		print_board();
 800243c:	f7ff f9e4 	bl	8001808 <print_board>
    osDelay(1);
 8002440:	2001      	movs	r0, #1
 8002442:	f002 fec7 	bl	80051d4 <osDelay>
		print_board();
 8002446:	e7f9      	b.n	800243c <start_board+0x8>

08002448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800244c:	b672      	cpsid	i
}
 800244e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002450:	e7fe      	b.n	8002450 <Error_Handler+0x8>
	...

08002454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_MspInit+0x54>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_MspInit+0x54>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_MspInit+0x54>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_MspInit+0x54>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_MspInit+0x54>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_MspInit+0x54>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	210f      	movs	r1, #15
 8002496:	f06f 0001 	mvn.w	r0, #1
 800249a:	f000 fef8 	bl	800328e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	; 0x28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <HAL_ADC_MspInit+0x8c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d12f      	bne.n	800252e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_ADC_MspInit+0x90>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a19      	ldr	r2, [pc, #100]	; (800253c <HAL_ADC_MspInit+0x90>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_ADC_MspInit+0x90>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <HAL_ADC_MspInit+0x90>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <HAL_ADC_MspInit+0x90>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_ADC_MspInit+0x90>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002506:	230c      	movs	r3, #12
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250a:	2303      	movs	r3, #3
 800250c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	4809      	ldr	r0, [pc, #36]	; (8002540 <HAL_ADC_MspInit+0x94>)
 800251a:	f000 ff81 	bl	8003420 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2105      	movs	r1, #5
 8002522:	2012      	movs	r0, #18
 8002524:	f000 feb3 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002528:	2012      	movs	r0, #18
 800252a:	f000 fecc 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40012000 	.word	0x40012000
 800253c:	40023800 	.word	0x40023800
 8002540:	40020800 	.word	0x40020800

08002544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <HAL_UART_MspInit+0x94>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d133      	bne.n	80025ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_UART_MspInit+0x98>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_UART_MspInit+0x98>)
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_UART_MspInit+0x98>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_UART_MspInit+0x98>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a14      	ldr	r2, [pc, #80]	; (80025dc <HAL_UART_MspInit+0x98>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_UART_MspInit+0x98>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800259e:	230c      	movs	r3, #12
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ae:	2307      	movs	r3, #7
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	4809      	ldr	r0, [pc, #36]	; (80025e0 <HAL_UART_MspInit+0x9c>)
 80025ba:	f000 ff31 	bl	8003420 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2105      	movs	r1, #5
 80025c2:	2026      	movs	r0, #38	; 0x26
 80025c4:	f000 fe63 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025c8:	2026      	movs	r0, #38	; 0x26
 80025ca:	f000 fe7c 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025ce:	bf00      	nop
 80025d0:	3728      	adds	r7, #40	; 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40004400 	.word	0x40004400
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40020000 	.word	0x40020000

080025e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <NMI_Handler+0x4>

080025ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <MemManage_Handler+0x4>

080025f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <BusFault_Handler+0x4>

080025fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <UsageFault_Handler+0x4>

08002602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002614:	f000 f972 	bl	80028fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002618:	f004 fecc 	bl	80073b4 <xTaskGetSchedulerState>
 800261c:	4603      	mov	r3, r0
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002622:	f005 fdb1 	bl	8008188 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <ADC_IRQHandler+0x10>)
 8002632:	f000 f9ea 	bl	8002a0a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000300 	.word	0x20000300

08002640 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <USART2_IRQHandler+0x10>)
 8002646:	f001 fdbb 	bl	80041c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000348 	.word	0x20000348

08002654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
	return 1;
 8002658:	2301      	movs	r3, #1
}
 800265a:	4618      	mov	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_kill>:

int _kill(int pid, int sig)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800266e:	f006 f805 	bl	800867c <__errno>
 8002672:	4603      	mov	r3, r0
 8002674:	2216      	movs	r2, #22
 8002676:	601a      	str	r2, [r3, #0]
	return -1;
 8002678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_exit>:

void _exit (int status)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800268c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ffe7 	bl	8002664 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002696:	e7fe      	b.n	8002696 <_exit+0x12>

08002698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	e00a      	b.n	80026c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026aa:	f3af 8000 	nop.w
 80026ae:	4601      	mov	r1, r0
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	60ba      	str	r2, [r7, #8]
 80026b6:	b2ca      	uxtb	r2, r1
 80026b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3301      	adds	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	dbf0      	blt.n	80026aa <_read+0x12>
	}

return len;
 80026c8:	687b      	ldr	r3, [r7, #4]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	e009      	b.n	80026f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	60ba      	str	r2, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3301      	adds	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	dbf1      	blt.n	80026e4 <_write+0x12>
	}
	return len;
 8002700:	687b      	ldr	r3, [r7, #4]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <_close>:

int _close(int file)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
	return -1;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002732:	605a      	str	r2, [r3, #4]
	return 0;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_isatty>:

int _isatty(int file)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
	return 1;
 800274a:	2301      	movs	r3, #1
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
	return 0;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <_sbrk+0x5c>)
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <_sbrk+0x60>)
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <_sbrk+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <_sbrk+0x64>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <_sbrk+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d207      	bcs.n	80027b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a4:	f005 ff6a 	bl	800867c <__errno>
 80027a8:	4603      	mov	r3, r0
 80027aa:	220c      	movs	r2, #12
 80027ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027b2:	e009      	b.n	80027c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <_sbrk+0x64>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <_sbrk+0x64>)
 80027c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20020000 	.word	0x20020000
 80027d4:	00000400 	.word	0x00000400
 80027d8:	200003b8 	.word	0x200003b8
 80027dc:	20004d20 	.word	0x20004d20

080027e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <SystemInit+0x20>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <SystemInit+0x20>)
 80027ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800283c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002808:	480d      	ldr	r0, [pc, #52]	; (8002840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800280a:	490e      	ldr	r1, [pc, #56]	; (8002844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800280c:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002810:	e002      	b.n	8002818 <LoopCopyDataInit>

08002812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002816:	3304      	adds	r3, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800281c:	d3f9      	bcc.n	8002812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281e:	4a0b      	ldr	r2, [pc, #44]	; (800284c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002820:	4c0b      	ldr	r4, [pc, #44]	; (8002850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002824:	e001      	b.n	800282a <LoopFillZerobss>

08002826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002828:	3204      	adds	r2, #4

0800282a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800282c:	d3fb      	bcc.n	8002826 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800282e:	f7ff ffd7 	bl	80027e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002832:	f005 ff29 	bl	8008688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002836:	f7ff f9ab 	bl	8001b90 <main>
  bx  lr    
 800283a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800283c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002844:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002848:	0800d830 	.word	0x0800d830
  ldr r2, =_sbss
 800284c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002850:	20004d20 	.word	0x20004d20

08002854 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <DMA1_Stream0_IRQHandler>
	...

08002858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <HAL_Init+0x40>)
 8002862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_Init+0x40>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_Init+0x40>)
 800286e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_Init+0x40>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_Init+0x40>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002880:	2003      	movs	r0, #3
 8002882:	f000 fcf9 	bl	8003278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002886:	200f      	movs	r0, #15
 8002888:	f000 f808 	bl	800289c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288c:	f7ff fde2 	bl	8002454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x54>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_InitTick+0x58>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fd11 	bl	80032e2 <HAL_SYSTICK_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00e      	b.n	80028e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d80a      	bhi.n	80028e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d8:	f000 fcd9 	bl	800328e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028dc:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <HAL_InitTick+0x5c>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000008 	.word	0x20000008
 80028f8:	20000004 	.word	0x20000004

080028fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x20>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_IncTick+0x24>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4413      	add	r3, r2
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_IncTick+0x24>)
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000008 	.word	0x20000008
 8002920:	200003bc 	.word	0x200003bc

08002924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return uwTick;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_GetTick+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	200003bc 	.word	0x200003bc

0800293c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff ffee 	bl	8002924 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002954:	d005      	beq.n	8002962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_Delay+0x44>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002962:	bf00      	nop
 8002964:	f7ff ffde 	bl	8002924 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d8f7      	bhi.n	8002964 <HAL_Delay+0x28>
  {
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000008 	.word	0x20000008

08002984 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e033      	b.n	8002a02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fd82 	bl	80024ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029ca:	f023 0302 	bic.w	r3, r3, #2
 80029ce:	f043 0202 	orr.w	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa78 	bl	8002ecc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
 80029f2:	e001      	b.n	80029f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d049      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0xca>
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d046      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d105      	bne.n	8002a5e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d12b      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d127      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d119      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0220 	bic.w	r2, r2, #32
 8002a9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f8b0 	bl	8002c2a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0212 	mvn.w	r2, #18
 8002ad2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d057      	beq.n	8002b9a <HAL_ADC_IRQHandler+0x190>
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d054      	beq.n	8002b9a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d139      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d12b      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d124      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11d      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d119      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b64:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa9a 	bl	80030c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 020c 	mvn.w	r2, #12
 8002b98:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d017      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x1d6>
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d014      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10d      	bne.n	8002be0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f834 	bl	8002c3e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f06f 0201 	mvn.w	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bee:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d015      	beq.n	8002c22 <HAL_ADC_IRQHandler+0x218>
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d012      	beq.n	8002c22 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f043 0202 	orr.w	r2, r3, #2
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0220 	mvn.w	r2, #32
 8002c10:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f81d 	bl	8002c52 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0220 	mvn.w	r2, #32
 8002c20:	601a      	str	r2, [r3, #0]
  }
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x1c>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e113      	b.n	8002eac <HAL_ADC_ConfigChannel+0x244>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b09      	cmp	r3, #9
 8002c92:	d925      	bls.n	8002ce0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68d9      	ldr	r1, [r3, #12]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b1e      	subs	r3, #30
 8002caa:	2207      	movs	r2, #7
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68d9      	ldr	r1, [r3, #12]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	4603      	mov	r3, r0
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4403      	add	r3, r0
 8002cd2:	3b1e      	subs	r3, #30
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	e022      	b.n	8002d26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6919      	ldr	r1, [r3, #16]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	400a      	ands	r2, r1
 8002d02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6919      	ldr	r1, [r3, #16]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4618      	mov	r0, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4403      	add	r3, r0
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d824      	bhi.n	8002d78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b05      	subs	r3, #5
 8002d40:	221f      	movs	r2, #31
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	3b05      	subs	r3, #5
 8002d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	635a      	str	r2, [r3, #52]	; 0x34
 8002d76:	e04c      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d824      	bhi.n	8002dca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	3b23      	subs	r3, #35	; 0x23
 8002d92:	221f      	movs	r2, #31
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	400a      	ands	r2, r1
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	3b23      	subs	r3, #35	; 0x23
 8002dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc8:	e023      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b41      	subs	r3, #65	; 0x41
 8002ddc:	221f      	movs	r2, #31
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	400a      	ands	r2, r1
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4618      	mov	r0, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	3b41      	subs	r3, #65	; 0x41
 8002e06:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e12:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_ADC_ConfigChannel+0x250>)
 8002e14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_ADC_ConfigChannel+0x254>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10f      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x1d8>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b12      	cmp	r3, #18
 8002e26:	d10b      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <HAL_ADC_ConfigChannel+0x254>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12b      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x23a>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <HAL_ADC_ConfigChannel+0x258>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <HAL_ADC_ConfigChannel+0x1f4>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b11      	cmp	r3, #17
 8002e5a:	d122      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a11      	ldr	r2, [pc, #68]	; (8002ec0 <HAL_ADC_ConfigChannel+0x258>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d111      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_ADC_ConfigChannel+0x25c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a11      	ldr	r2, [pc, #68]	; (8002ec8 <HAL_ADC_ConfigChannel+0x260>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	0c9a      	lsrs	r2, r3, #18
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e94:	e002      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f9      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40012300 	.word	0x40012300
 8002ebc:	40012000 	.word	0x40012000
 8002ec0:	10000012 	.word	0x10000012
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	431bde83 	.word	0x431bde83

08002ecc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed4:	4b79      	ldr	r3, [pc, #484]	; (80030bc <ADC_Init+0x1f0>)
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	021a      	lsls	r2, r3, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <ADC_Init+0x1f4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d022      	beq.n	8002faa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6899      	ldr	r1, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e00f      	b.n	8002fca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0202 	bic.w	r2, r2, #2
 8002fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7e1b      	ldrb	r3, [r3, #24]
 8002fe4:	005a      	lsls	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003006:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	3b01      	subs	r3, #1
 8003024:	035a      	lsls	r2, r3, #13
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e007      	b.n	8003040 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	3b01      	subs	r3, #1
 800305c:	051a      	lsls	r2, r3, #20
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003082:	025a      	lsls	r2, r3, #9
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	029a      	lsls	r2, r3, #10
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40012300 	.word	0x40012300
 80030c0:	0f000001 	.word	0x0f000001

080030c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f4:	4013      	ands	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310a:	4a04      	ldr	r2, [pc, #16]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	60d3      	str	r3, [r2, #12]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <__NVIC_GetPriorityGrouping+0x18>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f003 0307 	and.w	r3, r3, #7
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	2b00      	cmp	r3, #0
 800314c:	db0b      	blt.n	8003166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	4907      	ldr	r1, [pc, #28]	; (8003174 <__NVIC_EnableIRQ+0x38>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2001      	movs	r0, #1
 800315e:	fa00 f202 	lsl.w	r2, r0, r2
 8003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000e100 	.word	0xe000e100

08003178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	2b00      	cmp	r3, #0
 800318a:	db0a      	blt.n	80031a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	490c      	ldr	r1, [pc, #48]	; (80031c4 <__NVIC_SetPriority+0x4c>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	0112      	lsls	r2, r2, #4
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	440b      	add	r3, r1
 800319c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a0:	e00a      	b.n	80031b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <__NVIC_SetPriority+0x50>)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	3b04      	subs	r3, #4
 80031b0:	0112      	lsls	r2, r2, #4
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	440b      	add	r3, r1
 80031b6:	761a      	strb	r2, [r3, #24]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000e100 	.word	0xe000e100
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f1c3 0307 	rsb	r3, r3, #7
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	bf28      	it	cs
 80031ea:	2304      	movcs	r3, #4
 80031ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3304      	adds	r3, #4
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d902      	bls.n	80031fc <NVIC_EncodePriority+0x30>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3b03      	subs	r3, #3
 80031fa:	e000      	b.n	80031fe <NVIC_EncodePriority+0x32>
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	401a      	ands	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	43d9      	mvns	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	4313      	orrs	r3, r2
         );
}
 8003226:	4618      	mov	r0, r3
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003244:	d301      	bcc.n	800324a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003246:	2301      	movs	r3, #1
 8003248:	e00f      	b.n	800326a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <SysTick_Config+0x40>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003252:	210f      	movs	r1, #15
 8003254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003258:	f7ff ff8e 	bl	8003178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <SysTick_Config+0x40>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <SysTick_Config+0x40>)
 8003264:	2207      	movs	r2, #7
 8003266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	e000e010 	.word	0xe000e010

08003278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ff29 	bl	80030d8 <__NVIC_SetPriorityGrouping>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800328e:	b580      	push	{r7, lr}
 8003290:	b086      	sub	sp, #24
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a0:	f7ff ff3e 	bl	8003120 <__NVIC_GetPriorityGrouping>
 80032a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	6978      	ldr	r0, [r7, #20]
 80032ac:	f7ff ff8e 	bl	80031cc <NVIC_EncodePriority>
 80032b0:	4602      	mov	r2, r0
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff5d 	bl	8003178 <__NVIC_SetPriority>
}
 80032be:	bf00      	nop
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff31 	bl	800313c <__NVIC_EnableIRQ>
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ffa2 	bl	8003234 <SysTick_Config>
 80032f0:	4603      	mov	r3, r0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff fb0c 	bl	8002924 <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d008      	beq.n	800332c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e052      	b.n	80033d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0216 	bic.w	r2, r2, #22
 800333a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800334a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d103      	bne.n	800335c <HAL_DMA_Abort+0x62>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0208 	bic.w	r2, r2, #8
 800336a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800337c:	e013      	b.n	80033a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800337e:	f7ff fad1 	bl	8002924 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b05      	cmp	r3, #5
 800338a:	d90c      	bls.n	80033a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e015      	b.n	80033d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e4      	bne.n	800337e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	223f      	movs	r2, #63	; 0x3f
 80033ba:	409a      	lsls	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d004      	beq.n	80033f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e00c      	b.n	8003412 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2205      	movs	r2, #5
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	e159      	b.n	80036f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	f040 8148 	bne.w	80036ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d005      	beq.n	8003472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346e:	2b02      	cmp	r3, #2
 8003470:	d130      	bne.n	80034d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a8:	2201      	movs	r2, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0201 	and.w	r2, r3, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d017      	beq.n	8003510 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d123      	bne.n	8003564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	08da      	lsrs	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3208      	adds	r2, #8
 8003524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	220f      	movs	r2, #15
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	08da      	lsrs	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3208      	adds	r2, #8
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2203      	movs	r2, #3
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0203 	and.w	r2, r3, #3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a2 	beq.w	80036ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b57      	ldr	r3, [pc, #348]	; (8003708 <HAL_GPIO_Init+0x2e8>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4a56      	ldr	r2, [pc, #344]	; (8003708 <HAL_GPIO_Init+0x2e8>)
 80035b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b4:	6453      	str	r3, [r2, #68]	; 0x44
 80035b6:	4b54      	ldr	r3, [pc, #336]	; (8003708 <HAL_GPIO_Init+0x2e8>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035c2:	4a52      	ldr	r2, [pc, #328]	; (800370c <HAL_GPIO_Init+0x2ec>)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	3302      	adds	r3, #2
 80035ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	220f      	movs	r2, #15
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a49      	ldr	r2, [pc, #292]	; (8003710 <HAL_GPIO_Init+0x2f0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d019      	beq.n	8003622 <HAL_GPIO_Init+0x202>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a48      	ldr	r2, [pc, #288]	; (8003714 <HAL_GPIO_Init+0x2f4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_GPIO_Init+0x1fe>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a47      	ldr	r2, [pc, #284]	; (8003718 <HAL_GPIO_Init+0x2f8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00d      	beq.n	800361a <HAL_GPIO_Init+0x1fa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a46      	ldr	r2, [pc, #280]	; (800371c <HAL_GPIO_Init+0x2fc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <HAL_GPIO_Init+0x1f6>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a45      	ldr	r2, [pc, #276]	; (8003720 <HAL_GPIO_Init+0x300>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_GPIO_Init+0x1f2>
 800360e:	2304      	movs	r3, #4
 8003610:	e008      	b.n	8003624 <HAL_GPIO_Init+0x204>
 8003612:	2307      	movs	r3, #7
 8003614:	e006      	b.n	8003624 <HAL_GPIO_Init+0x204>
 8003616:	2303      	movs	r3, #3
 8003618:	e004      	b.n	8003624 <HAL_GPIO_Init+0x204>
 800361a:	2302      	movs	r3, #2
 800361c:	e002      	b.n	8003624 <HAL_GPIO_Init+0x204>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x204>
 8003622:	2300      	movs	r3, #0
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	f002 0203 	and.w	r2, r2, #3
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	4093      	lsls	r3, r2
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003634:	4935      	ldr	r1, [pc, #212]	; (800370c <HAL_GPIO_Init+0x2ec>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	3302      	adds	r3, #2
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003642:	4b38      	ldr	r3, [pc, #224]	; (8003724 <HAL_GPIO_Init+0x304>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003666:	4a2f      	ldr	r2, [pc, #188]	; (8003724 <HAL_GPIO_Init+0x304>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800366c:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <HAL_GPIO_Init+0x304>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003690:	4a24      	ldr	r2, [pc, #144]	; (8003724 <HAL_GPIO_Init+0x304>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003696:	4b23      	ldr	r3, [pc, #140]	; (8003724 <HAL_GPIO_Init+0x304>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ba:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <HAL_GPIO_Init+0x304>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <HAL_GPIO_Init+0x304>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e4:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <HAL_GPIO_Init+0x304>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	f67f aea2 	bls.w	800343c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40013800 	.word	0x40013800
 8003710:	40020000 	.word	0x40020000
 8003714:	40020400 	.word	0x40020400
 8003718:	40020800 	.word	0x40020800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40021000 	.word	0x40021000
 8003724:	40013c00 	.word	0x40013c00

08003728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
 8003744:	e001      	b.n	800374a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800374a:	7bfb      	ldrb	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
 8003764:	4613      	mov	r3, r2
 8003766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003768:	787b      	ldrb	r3, [r7, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003774:	e003      	b.n	800377e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	041a      	lsls	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	619a      	str	r2, [r3, #24]
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e267      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d075      	beq.n	8003896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037aa:	4b88      	ldr	r3, [pc, #544]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d00c      	beq.n	80037d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b6:	4b85      	ldr	r3, [pc, #532]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d112      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c2:	4b82      	ldr	r3, [pc, #520]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	4b7e      	ldr	r3, [pc, #504]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d05b      	beq.n	8003894 <HAL_RCC_OscConfig+0x108>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d157      	bne.n	8003894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e242      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f0:	d106      	bne.n	8003800 <HAL_RCC_OscConfig+0x74>
 80037f2:	4b76      	ldr	r3, [pc, #472]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a75      	ldr	r2, [pc, #468]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e01d      	b.n	800383c <HAL_RCC_OscConfig+0xb0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x98>
 800380a:	4b70      	ldr	r3, [pc, #448]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6f      	ldr	r2, [pc, #444]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b6d      	ldr	r3, [pc, #436]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6c      	ldr	r2, [pc, #432]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0xb0>
 8003824:	4b69      	ldr	r3, [pc, #420]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a68      	ldr	r2, [pc, #416]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 800382a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b66      	ldr	r3, [pc, #408]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a65      	ldr	r2, [pc, #404]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7ff f86e 	bl	8002924 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800384c:	f7ff f86a 	bl	8002924 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e207      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	4b5b      	ldr	r3, [pc, #364]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0xc0>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7ff f85a 	bl	8002924 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003874:	f7ff f856 	bl	8002924 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e1f3      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	4b51      	ldr	r3, [pc, #324]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0xe8>
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d063      	beq.n	800396a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038a2:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ae:	4b47      	ldr	r3, [pc, #284]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d11c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ba:	4b44      	ldr	r3, [pc, #272]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d116      	bne.n	80038f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	4b41      	ldr	r3, [pc, #260]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x152>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e1c7      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038de:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4937      	ldr	r1, [pc, #220]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	e03a      	b.n	800396a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038fc:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <HAL_RCC_OscConfig+0x244>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7ff f80f 	bl	8002924 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390a:	f7ff f80b 	bl	8002924 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1a8      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391c:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4925      	ldr	r1, [pc, #148]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
 800393c:	e015      	b.n	800396a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <HAL_RCC_OscConfig+0x244>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe ffee 	bl	8002924 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394c:	f7fe ffea 	bl	8002924 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e187      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d036      	beq.n	80039e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d016      	beq.n	80039ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <HAL_RCC_OscConfig+0x248>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fe ffce 	bl	8002924 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398c:	f7fe ffca 	bl	8002924 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e167      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80039a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x200>
 80039aa:	e01b      	b.n	80039e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_OscConfig+0x248>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b2:	f7fe ffb7 	bl	8002924 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b8:	e00e      	b.n	80039d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ba:	f7fe ffb3 	bl	8002924 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d907      	bls.n	80039d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e150      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	42470000 	.word	0x42470000
 80039d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	4b88      	ldr	r3, [pc, #544]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 80039da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ea      	bne.n	80039ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8097 	beq.w	8003b20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f6:	4b81      	ldr	r3, [pc, #516]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	4b7d      	ldr	r3, [pc, #500]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a7c      	ldr	r2, [pc, #496]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b7a      	ldr	r3, [pc, #488]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	4b77      	ldr	r3, [pc, #476]	; (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d118      	bne.n	8003a60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2e:	4b74      	ldr	r3, [pc, #464]	; (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a73      	ldr	r2, [pc, #460]	; (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3a:	f7fe ff73 	bl	8002924 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fe ff6f 	bl	8002924 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e10c      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	4b6a      	ldr	r3, [pc, #424]	; (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2ea>
 8003a68:	4b64      	ldr	r3, [pc, #400]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	4a63      	ldr	r2, [pc, #396]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6713      	str	r3, [r2, #112]	; 0x70
 8003a74:	e01c      	b.n	8003ab0 <HAL_RCC_OscConfig+0x324>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x30c>
 8003a7e:	4b5f      	ldr	r3, [pc, #380]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a5e      	ldr	r2, [pc, #376]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	4b5c      	ldr	r3, [pc, #368]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a5b      	ldr	r2, [pc, #364]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x324>
 8003a98:	4b58      	ldr	r3, [pc, #352]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a57      	ldr	r2, [pc, #348]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa4:	4b55      	ldr	r3, [pc, #340]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	4a54      	ldr	r2, [pc, #336]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003aaa:	f023 0304 	bic.w	r3, r3, #4
 8003aae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d015      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fe ff34 	bl	8002924 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fe ff30 	bl	8002924 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0cb      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad6:	4b49      	ldr	r3, [pc, #292]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ee      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x334>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fe ff1e 	bl	8002924 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aec:	f7fe ff1a 	bl	8002924 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0b5      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b02:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1ee      	bne.n	8003aec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	4a38      	ldr	r2, [pc, #224]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a1 	beq.w	8003c6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b2a:	4b34      	ldr	r3, [pc, #208]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d05c      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d141      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe feee 	bl	8002924 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fe feea 	bl	8002924 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e087      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	3b01      	subs	r3, #1
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	491b      	ldr	r1, [pc, #108]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9a:	f7fe fec3 	bl	8002924 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba2:	f7fe febf 	bl	8002924 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e05c      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x416>
 8003bc0:	e054      	b.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fe feac 	bl	8002924 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fe fea8 	bl	8002924 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e045      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x444>
 8003bee:	e03d      	b.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e038      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <HAL_RCC_OscConfig+0x4ec>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d028      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d121      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d11a      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d111      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	3b01      	subs	r3, #1
 8003c52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0cc      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c90:	4b68      	ldr	r3, [pc, #416]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d90c      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b65      	ldr	r3, [pc, #404]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b8      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd0:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce8:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf4:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	494d      	ldr	r1, [pc, #308]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d044      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d119      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3a:	4b3f      	ldr	r3, [pc, #252]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e06f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e067      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5a:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 0203 	bic.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4934      	ldr	r1, [pc, #208]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d6c:	f7fe fdda 	bl	8002924 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d74:	f7fe fdd6 	bl	8002924 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e04f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 020c 	and.w	r2, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1eb      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d20c      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e032      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4916      	ldr	r1, [pc, #88]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e02:	f000 f821 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	490a      	ldr	r1, [pc, #40]	; (8003e3c <HAL_RCC_ClockConfig+0x1c0>)
 8003e14:	5ccb      	ldrb	r3, [r1, r3]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fd3a 	bl	800289c <HAL_InitTick>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023c00 	.word	0x40023c00
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	0800d308 	.word	0x0800d308
 8003e40:	20000000 	.word	0x20000000
 8003e44:	20000004 	.word	0x20000004

08003e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e4c:	b090      	sub	sp, #64	; 0x40
 8003e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
 8003e54:	2300      	movs	r3, #0
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e58:	2300      	movs	r3, #0
 8003e5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e60:	4b59      	ldr	r3, [pc, #356]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d00d      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x40>
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	f200 80a1 	bhi.w	8003fb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x34>
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d003      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e7a:	e09b      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x184>)
 8003e7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e80:	e09b      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e82:	4b53      	ldr	r3, [pc, #332]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e86:	e098      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e88:	4b4f      	ldr	r3, [pc, #316]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e92:	4b4d      	ldr	r3, [pc, #308]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d028      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9e:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	623b      	str	r3, [r7, #32]
 8003ea8:	627a      	str	r2, [r7, #36]	; 0x24
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4b47      	ldr	r3, [pc, #284]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eb4:	fb03 f201 	mul.w	r2, r3, r1
 8003eb8:	2300      	movs	r3, #0
 8003eba:	fb00 f303 	mul.w	r3, r0, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	4a43      	ldr	r2, [pc, #268]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ec2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ec8:	460a      	mov	r2, r1
 8003eca:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ece:	4413      	add	r3, r2
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	61fa      	str	r2, [r7, #28]
 8003eda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ede:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ee2:	f7fc fed9 	bl	8000c98 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4613      	mov	r3, r2
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eee:	e053      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef0:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	099b      	lsrs	r3, r3, #6
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	617a      	str	r2, [r7, #20]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f02:	f04f 0b00 	mov.w	fp, #0
 8003f06:	4652      	mov	r2, sl
 8003f08:	465b      	mov	r3, fp
 8003f0a:	f04f 0000 	mov.w	r0, #0
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	0159      	lsls	r1, r3, #5
 8003f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f18:	0150      	lsls	r0, r2, #5
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	ebb2 080a 	subs.w	r8, r2, sl
 8003f22:	eb63 090b 	sbc.w	r9, r3, fp
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f3a:	ebb2 0408 	subs.w	r4, r2, r8
 8003f3e:	eb63 0509 	sbc.w	r5, r3, r9
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	00eb      	lsls	r3, r5, #3
 8003f4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f50:	00e2      	lsls	r2, r4, #3
 8003f52:	4614      	mov	r4, r2
 8003f54:	461d      	mov	r5, r3
 8003f56:	eb14 030a 	adds.w	r3, r4, sl
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	eb45 030b 	adc.w	r3, r5, fp
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f6e:	4629      	mov	r1, r5
 8003f70:	028b      	lsls	r3, r1, #10
 8003f72:	4621      	mov	r1, r4
 8003f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f78:	4621      	mov	r1, r4
 8003f7a:	028a      	lsls	r2, r1, #10
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	2200      	movs	r2, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	60fa      	str	r2, [r7, #12]
 8003f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f8c:	f7fc fe84 	bl	8000c98 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4613      	mov	r3, r2
 8003f96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fb2:	e002      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x184>)
 8003fb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3740      	adds	r7, #64	; 0x40
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	017d7840 	.word	0x017d7840

08003fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000000 	.word	0x20000000

08003fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ff0:	f7ff fff0 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	0a9b      	lsrs	r3, r3, #10
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4903      	ldr	r1, [pc, #12]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40023800 	.word	0x40023800
 8004010:	0800d318 	.word	0x0800d318

08004014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004018:	f7ff ffdc 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 800401c:	4602      	mov	r2, r0
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	0b5b      	lsrs	r3, r3, #13
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4903      	ldr	r1, [pc, #12]	; (8004038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800402a:	5ccb      	ldrb	r3, [r1, r3]
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40023800 	.word	0x40023800
 8004038:	0800d318 	.word	0x0800d318

0800403c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e03f      	b.n	80040ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fe fa6e 	bl	8002544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2224      	movs	r2, #36	; 0x24
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fd23 	bl	8004acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	4613      	mov	r3, r2
 80040e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d130      	bne.n	8004152 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_UART_Transmit_IT+0x26>
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e029      	b.n	8004154 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_UART_Transmit_IT+0x38>
 800410a:	2302      	movs	r3, #2
 800410c:	e022      	b.n	8004154 <HAL_UART_Transmit_IT+0x7e>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	88fa      	ldrh	r2, [r7, #6]
 8004126:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2221      	movs	r2, #33	; 0x21
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800414c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	d11d      	bne.n	80041b6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_UART_Receive_IT+0x26>
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e016      	b.n	80041b8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_UART_Receive_IT+0x38>
 8004194:	2302      	movs	r3, #2
 8004196:	e00f      	b.n	80041b8 <HAL_UART_Receive_IT+0x58>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fab5 	bl	800471c <UART_Start_Receive_IT>
 80041b2:	4603      	mov	r3, r0
 80041b4:	e000      	b.n	80041b8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041b6:	2302      	movs	r3, #2
  }
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b0ba      	sub	sp, #232	; 0xe8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10f      	bne.n	8004226 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_UART_IRQHandler+0x66>
 8004212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fb99 	bl	8004956 <UART_Receive_IT>
      return;
 8004224:	e256      	b.n	80046d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80de 	beq.w	80043ec <HAL_UART_IRQHandler+0x22c>
 8004230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800423c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004240:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80d1 	beq.w	80043ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_UART_IRQHandler+0xae>
 8004256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f043 0201 	orr.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_UART_IRQHandler+0xd2>
 800427a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f043 0202 	orr.w	r2, r3, #2
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <HAL_UART_IRQHandler+0xf6>
 800429e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f043 0204 	orr.w	r2, r3, #4
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d011      	beq.n	80042e6 <HAL_UART_IRQHandler+0x126>
 80042c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0208 	orr.w	r2, r3, #8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 81ed 	beq.w	80046ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_UART_IRQHandler+0x14e>
 80042fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fb24 	bl	8004956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <HAL_UART_IRQHandler+0x17a>
 8004332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d04f      	beq.n	80043da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fa2c 	bl	8004798 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d141      	bne.n	80043d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3314      	adds	r3, #20
 8004354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3314      	adds	r3, #20
 8004376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800437a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800437e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1d9      	bne.n	800434e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d013      	beq.n	80043ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	4a7d      	ldr	r2, [pc, #500]	; (800459c <HAL_UART_IRQHandler+0x3dc>)
 80043a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff f813 	bl	80033da <HAL_DMA_Abort_IT>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043c4:	4610      	mov	r0, r2
 80043c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	e00e      	b.n	80043e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f990 	bl	80046f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	e00a      	b.n	80043e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f98c 	bl	80046f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d8:	e006      	b.n	80043e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f988 	bl	80046f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043e6:	e170      	b.n	80046ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	bf00      	nop
    return;
 80043ea:	e16e      	b.n	80046ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	f040 814a 	bne.w	800468a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8143 	beq.w	800468a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 813c 	beq.w	800468a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	f040 80b4 	bne.w	80045a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8140 	beq.w	80046ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004456:	429a      	cmp	r2, r3
 8004458:	f080 8139 	bcs.w	80046ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004462:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446e:	f000 8088 	beq.w	8004582 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800448c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800449e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1d9      	bne.n	8004472 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3314      	adds	r3, #20
 80044c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e1      	bne.n	80044be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800450a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3314      	adds	r3, #20
 800451a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800451e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800452c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e3      	bne.n	80044fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004552:	f023 0310 	bic.w	r3, r3, #16
 8004556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004564:	65ba      	str	r2, [r7, #88]	; 0x58
 8004566:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800456a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e3      	bne.n	8004540 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe febc 	bl	80032fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800458a:	b29b      	uxth	r3, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	b29b      	uxth	r3, r3
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8b6 	bl	8004704 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004598:	e099      	b.n	80046ce <HAL_UART_IRQHandler+0x50e>
 800459a:	bf00      	nop
 800459c:	0800485f 	.word	0x0800485f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 808b 	beq.w	80046d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80045bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8086 	beq.w	80046d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045ea:	647a      	str	r2, [r7, #68]	; 0x44
 80045ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e3      	bne.n	80045c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3314      	adds	r3, #20
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	623b      	str	r3, [r7, #32]
   return(result);
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004622:	633a      	str	r2, [r7, #48]	; 0x30
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e3      	bne.n	80045fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	60fb      	str	r3, [r7, #12]
   return(result);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0310 	bic.w	r3, r3, #16
 800465a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004668:	61fa      	str	r2, [r7, #28]
 800466a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	617b      	str	r3, [r7, #20]
   return(result);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e3      	bne.n	8004644 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800467c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f83e 	bl	8004704 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004688:	e023      	b.n	80046d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_UART_IRQHandler+0x4ea>
 8004696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8ef 	bl	8004886 <UART_Transmit_IT>
    return;
 80046a8:	e014      	b.n	80046d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00e      	beq.n	80046d4 <HAL_UART_IRQHandler+0x514>
 80046b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f92f 	bl	8004926 <UART_EndTransmit_IT>
    return;
 80046c8:	e004      	b.n	80046d4 <HAL_UART_IRQHandler+0x514>
    return;
 80046ca:	bf00      	nop
 80046cc:	e002      	b.n	80046d4 <HAL_UART_IRQHandler+0x514>
      return;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <HAL_UART_IRQHandler+0x514>
      return;
 80046d2:	bf00      	nop
  }
}
 80046d4:	37e8      	adds	r7, #232	; 0xe8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop

080046dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	88fa      	ldrh	r2, [r7, #6]
 800473a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2222      	movs	r2, #34	; 0x22
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004768:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0220 	orr.w	r2, r2, #32
 8004788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b095      	sub	sp, #84	; 0x54
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047c0:	643a      	str	r2, [r7, #64]	; 0x40
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e5      	bne.n	80047a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3314      	adds	r3, #20
 80047f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e5      	bne.n	80047d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	2b01      	cmp	r3, #1
 800480e:	d119      	bne.n	8004844 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	330c      	adds	r3, #12
 8004816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f023 0310 	bic.w	r3, r3, #16
 8004826:	647b      	str	r3, [r7, #68]	; 0x44
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004830:	61ba      	str	r2, [r7, #24]
 8004832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	6979      	ldr	r1, [r7, #20]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	613b      	str	r3, [r7, #16]
   return(result);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e5      	bne.n	8004810 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004852:	bf00      	nop
 8004854:	3754      	adds	r7, #84	; 0x54
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff ff39 	bl	80046f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b21      	cmp	r3, #33	; 0x21
 8004898:	d13e      	bne.n	8004918 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a2:	d114      	bne.n	80048ce <UART_Transmit_IT+0x48>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d110      	bne.n	80048ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	1c9a      	adds	r2, r3, #2
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	621a      	str	r2, [r3, #32]
 80048cc:	e008      	b.n	80048e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	1c59      	adds	r1, r3, #1
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6211      	str	r1, [r2, #32]
 80048d8:	781a      	ldrb	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4619      	mov	r1, r3
 80048ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10f      	bne.n	8004914 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004902:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004912:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff fec8 	bl	80046dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b08c      	sub	sp, #48	; 0x30
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b22      	cmp	r3, #34	; 0x22
 8004968:	f040 80ab 	bne.w	8004ac2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004974:	d117      	bne.n	80049a6 <UART_Receive_IT+0x50>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d113      	bne.n	80049a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004994:	b29a      	uxth	r2, r3
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	1c9a      	adds	r2, r3, #2
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
 80049a4:	e026      	b.n	80049f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b8:	d007      	beq.n	80049ca <UART_Receive_IT+0x74>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <UART_Receive_IT+0x82>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	e008      	b.n	80049ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4619      	mov	r1, r3
 8004a02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d15a      	bne.n	8004abe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0220 	bic.w	r2, r2, #32
 8004a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d135      	bne.n	8004ab4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	330c      	adds	r3, #12
 8004a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f023 0310 	bic.w	r3, r3, #16
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6e:	623a      	str	r2, [r7, #32]
 8004a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	69f9      	ldr	r1, [r7, #28]
 8004a74:	6a3a      	ldr	r2, [r7, #32]
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e5      	bne.n	8004a4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d10a      	bne.n	8004aa6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff fe29 	bl	8004704 <HAL_UARTEx_RxEventCallback>
 8004ab2:	e002      	b.n	8004aba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7fd faaf 	bl	8002018 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e002      	b.n	8004ac4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e000      	b.n	8004ac4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
  }
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3730      	adds	r7, #48	; 0x30
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b0c0      	sub	sp, #256	; 0x100
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	68d9      	ldr	r1, [r3, #12]
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	ea40 0301 	orr.w	r3, r0, r1
 8004af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b24:	f021 010c 	bic.w	r1, r1, #12
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b32:	430b      	orrs	r3, r1
 8004b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b46:	6999      	ldr	r1, [r3, #24]
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	ea40 0301 	orr.w	r3, r0, r1
 8004b52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b8f      	ldr	r3, [pc, #572]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d005      	beq.n	8004b6c <UART_SetConfig+0xa0>
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b8d      	ldr	r3, [pc, #564]	; (8004d9c <UART_SetConfig+0x2d0>)
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d104      	bne.n	8004b76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b6c:	f7ff fa52 	bl	8004014 <HAL_RCC_GetPCLK2Freq>
 8004b70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b74:	e003      	b.n	8004b7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b76:	f7ff fa39 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 8004b7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b88:	f040 810c 	bne.w	8004da4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	462b      	mov	r3, r5
 8004ba2:	1891      	adds	r1, r2, r2
 8004ba4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ba6:	415b      	adcs	r3, r3
 8004ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004baa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bae:	4621      	mov	r1, r4
 8004bb0:	eb12 0801 	adds.w	r8, r2, r1
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	eb43 0901 	adc.w	r9, r3, r1
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bce:	4690      	mov	r8, r2
 8004bd0:	4699      	mov	r9, r3
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	eb18 0303 	adds.w	r3, r8, r3
 8004bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bdc:	462b      	mov	r3, r5
 8004bde:	eb49 0303 	adc.w	r3, r9, r3
 8004be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	18db      	adds	r3, r3, r3
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004c00:	4613      	mov	r3, r2
 8004c02:	eb42 0303 	adc.w	r3, r2, r3
 8004c06:	657b      	str	r3, [r7, #84]	; 0x54
 8004c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c10:	f7fc f842 	bl	8000c98 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4b61      	ldr	r3, [pc, #388]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	011c      	lsls	r4, r3, #4
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	1891      	adds	r1, r2, r2
 8004c3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c44:	4641      	mov	r1, r8
 8004c46:	eb12 0a01 	adds.w	sl, r2, r1
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c64:	4692      	mov	sl, r2
 8004c66:	469b      	mov	fp, r3
 8004c68:	4643      	mov	r3, r8
 8004c6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c72:	464b      	mov	r3, r9
 8004c74:	eb4b 0303 	adc.w	r3, fp, r3
 8004c78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c90:	460b      	mov	r3, r1
 8004c92:	18db      	adds	r3, r3, r3
 8004c94:	643b      	str	r3, [r7, #64]	; 0x40
 8004c96:	4613      	mov	r3, r2
 8004c98:	eb42 0303 	adc.w	r3, r2, r3
 8004c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ca6:	f7fb fff7 	bl	8000c98 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	2264      	movs	r2, #100	; 0x64
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	1acb      	subs	r3, r1, r3
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cc6:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cd4:	441c      	add	r4, r3
 8004cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ce4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	1891      	adds	r1, r2, r2
 8004cee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cf0:	415b      	adcs	r3, r3
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	1851      	adds	r1, r2, r1
 8004cfc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cfe:	4649      	mov	r1, r9
 8004d00:	414b      	adcs	r3, r1
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d10:	4659      	mov	r1, fp
 8004d12:	00cb      	lsls	r3, r1, #3
 8004d14:	4651      	mov	r1, sl
 8004d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	00ca      	lsls	r2, r1, #3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	4642      	mov	r2, r8
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	460a      	mov	r2, r1
 8004d30:	eb42 0303 	adc.w	r3, r2, r3
 8004d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	18db      	adds	r3, r3, r3
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d52:	4613      	mov	r3, r2
 8004d54:	eb42 0303 	adc.w	r3, r2, r3
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d62:	f7fb ff99 	bl	8000c98 <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	2164      	movs	r1, #100	; 0x64
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	3332      	adds	r3, #50	; 0x32
 8004d7e:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	f003 0207 	and.w	r2, r3, #7
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4422      	add	r2, r4
 8004d92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d94:	e105      	b.n	8004fa2 <UART_SetConfig+0x4d6>
 8004d96:	bf00      	nop
 8004d98:	40011000 	.word	0x40011000
 8004d9c:	40011400 	.word	0x40011400
 8004da0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004db2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004db6:	4642      	mov	r2, r8
 8004db8:	464b      	mov	r3, r9
 8004dba:	1891      	adds	r1, r2, r2
 8004dbc:	6239      	str	r1, [r7, #32]
 8004dbe:	415b      	adcs	r3, r3
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dc6:	4641      	mov	r1, r8
 8004dc8:	1854      	adds	r4, r2, r1
 8004dca:	4649      	mov	r1, r9
 8004dcc:	eb43 0501 	adc.w	r5, r3, r1
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	00eb      	lsls	r3, r5, #3
 8004dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dde:	00e2      	lsls	r2, r4, #3
 8004de0:	4614      	mov	r4, r2
 8004de2:	461d      	mov	r5, r3
 8004de4:	4643      	mov	r3, r8
 8004de6:	18e3      	adds	r3, r4, r3
 8004de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dec:	464b      	mov	r3, r9
 8004dee:	eb45 0303 	adc.w	r3, r5, r3
 8004df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e12:	4629      	mov	r1, r5
 8004e14:	008b      	lsls	r3, r1, #2
 8004e16:	4621      	mov	r1, r4
 8004e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	008a      	lsls	r2, r1, #2
 8004e20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e24:	f7fb ff38 	bl	8000c98 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4b60      	ldr	r3, [pc, #384]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	011c      	lsls	r4, r3, #4
 8004e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e48:	4642      	mov	r2, r8
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	1891      	adds	r1, r2, r2
 8004e4e:	61b9      	str	r1, [r7, #24]
 8004e50:	415b      	adcs	r3, r3
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e58:	4641      	mov	r1, r8
 8004e5a:	1851      	adds	r1, r2, r1
 8004e5c:	6139      	str	r1, [r7, #16]
 8004e5e:	4649      	mov	r1, r9
 8004e60:	414b      	adcs	r3, r1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e70:	4659      	mov	r1, fp
 8004e72:	00cb      	lsls	r3, r1, #3
 8004e74:	4651      	mov	r1, sl
 8004e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7a:	4651      	mov	r1, sl
 8004e7c:	00ca      	lsls	r2, r1, #3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	4642      	mov	r2, r8
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	460a      	mov	r2, r1
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ea2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	008b      	lsls	r3, r1, #2
 8004eb4:	4641      	mov	r1, r8
 8004eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eba:	4641      	mov	r1, r8
 8004ebc:	008a      	lsls	r2, r1, #2
 8004ebe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ec2:	f7fb fee9 	bl	8000c98 <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	2164      	movs	r1, #100	; 0x64
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	3332      	adds	r3, #50	; 0x32
 8004ede:	4a34      	ldr	r2, [pc, #208]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eea:	441c      	add	r4, r3
 8004eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ef4:	677a      	str	r2, [r7, #116]	; 0x74
 8004ef6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004efa:	4642      	mov	r2, r8
 8004efc:	464b      	mov	r3, r9
 8004efe:	1891      	adds	r1, r2, r2
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	415b      	adcs	r3, r3
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	1851      	adds	r1, r2, r1
 8004f0e:	6039      	str	r1, [r7, #0]
 8004f10:	4649      	mov	r1, r9
 8004f12:	414b      	adcs	r3, r1
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f22:	4659      	mov	r1, fp
 8004f24:	00cb      	lsls	r3, r1, #3
 8004f26:	4651      	mov	r1, sl
 8004f28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2c:	4651      	mov	r1, sl
 8004f2e:	00ca      	lsls	r2, r1, #3
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	4603      	mov	r3, r0
 8004f36:	4642      	mov	r2, r8
 8004f38:	189b      	adds	r3, r3, r2
 8004f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	460a      	mov	r2, r1
 8004f40:	eb42 0303 	adc.w	r3, r2, r3
 8004f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f50:	667a      	str	r2, [r7, #100]	; 0x64
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f5e:	4649      	mov	r1, r9
 8004f60:	008b      	lsls	r3, r1, #2
 8004f62:	4641      	mov	r1, r8
 8004f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f68:	4641      	mov	r1, r8
 8004f6a:	008a      	lsls	r2, r1, #2
 8004f6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f70:	f7fb fe92 	bl	8000c98 <__aeabi_uldivmod>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	2164      	movs	r1, #100	; 0x64
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	3332      	adds	r3, #50	; 0x32
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	f003 020f 	and.w	r2, r3, #15
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4422      	add	r2, r4
 8004fa0:	609a      	str	r2, [r3, #8]
}
 8004fa2:	bf00      	nop
 8004fa4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fae:	bf00      	nop
 8004fb0:	51eb851f 	.word	0x51eb851f

08004fb4 <__NVIC_SetPriority>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	6039      	str	r1, [r7, #0]
 8004fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	db0a      	blt.n	8004fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	490c      	ldr	r1, [pc, #48]	; (8005000 <__NVIC_SetPriority+0x4c>)
 8004fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd2:	0112      	lsls	r2, r2, #4
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004fdc:	e00a      	b.n	8004ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4908      	ldr	r1, [pc, #32]	; (8005004 <__NVIC_SetPriority+0x50>)
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	3b04      	subs	r3, #4
 8004fec:	0112      	lsls	r2, r2, #4
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	761a      	strb	r2, [r3, #24]
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000e100 	.word	0xe000e100
 8005004:	e000ed00 	.word	0xe000ed00

08005008 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800500c:	2100      	movs	r1, #0
 800500e:	f06f 0004 	mvn.w	r0, #4
 8005012:	f7ff ffcf 	bl	8004fb4 <__NVIC_SetPriority>
#endif
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005022:	f3ef 8305 	mrs	r3, IPSR
 8005026:	603b      	str	r3, [r7, #0]
  return(result);
 8005028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800502e:	f06f 0305 	mvn.w	r3, #5
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	e00c      	b.n	8005050 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <osKernelInitialize+0x44>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d105      	bne.n	800504a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800503e:	4b08      	ldr	r3, [pc, #32]	; (8005060 <osKernelInitialize+0x44>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005044:	2300      	movs	r3, #0
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	e002      	b.n	8005050 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800504e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005050:	687b      	ldr	r3, [r7, #4]
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	200003c0 	.word	0x200003c0

08005064 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800506a:	f3ef 8305 	mrs	r3, IPSR
 800506e:	603b      	str	r3, [r7, #0]
  return(result);
 8005070:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005076:	f06f 0305 	mvn.w	r3, #5
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	e010      	b.n	80050a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <osKernelStart+0x48>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d109      	bne.n	800509a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005086:	f7ff ffbf 	bl	8005008 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800508a:	4b08      	ldr	r3, [pc, #32]	; (80050ac <osKernelStart+0x48>)
 800508c:	2202      	movs	r2, #2
 800508e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005090:	f001 fd38 	bl	8006b04 <vTaskStartScheduler>
      stat = osOK;
 8005094:	2300      	movs	r3, #0
 8005096:	607b      	str	r3, [r7, #4]
 8005098:	e002      	b.n	80050a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800509e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050a0:	687b      	ldr	r3, [r7, #4]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	200003c0 	.word	0x200003c0

080050b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08e      	sub	sp, #56	; 0x38
 80050b4:	af04      	add	r7, sp, #16
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c0:	f3ef 8305 	mrs	r3, IPSR
 80050c4:	617b      	str	r3, [r7, #20]
  return(result);
 80050c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d17e      	bne.n	80051ca <osThreadNew+0x11a>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d07b      	beq.n	80051ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80050d6:	2318      	movs	r3, #24
 80050d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80050de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d045      	beq.n	8005176 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <osThreadNew+0x48>
        name = attr->name;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <osThreadNew+0x6e>
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b38      	cmp	r3, #56	; 0x38
 8005110:	d805      	bhi.n	800511e <osThreadNew+0x6e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <osThreadNew+0x72>
        return (NULL);
 800511e:	2300      	movs	r3, #0
 8005120:	e054      	b.n	80051cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00e      	beq.n	8005158 <osThreadNew+0xa8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2b5b      	cmp	r3, #91	; 0x5b
 8005140:	d90a      	bls.n	8005158 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005146:	2b00      	cmp	r3, #0
 8005148:	d006      	beq.n	8005158 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <osThreadNew+0xa8>
        mem = 1;
 8005152:	2301      	movs	r3, #1
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	e010      	b.n	800517a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10c      	bne.n	800517a <osThreadNew+0xca>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d108      	bne.n	800517a <osThreadNew+0xca>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <osThreadNew+0xca>
          mem = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e001      	b.n	800517a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005176:	2300      	movs	r3, #0
 8005178:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d110      	bne.n	80051a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005188:	9202      	str	r2, [sp, #8]
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	6a3a      	ldr	r2, [r7, #32]
 8005194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f001 fade 	bl	8006758 <xTaskCreateStatic>
 800519c:	4603      	mov	r3, r0
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e013      	b.n	80051ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d110      	bne.n	80051ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	f107 0310 	add.w	r3, r7, #16
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f001 fb29 	bl	8006812 <xTaskCreate>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d001      	beq.n	80051ca <osThreadNew+0x11a>
            hTask = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051ca:	693b      	ldr	r3, [r7, #16]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3728      	adds	r7, #40	; 0x28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051dc:	f3ef 8305 	mrs	r3, IPSR
 80051e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80051e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <osDelay+0x1c>
    stat = osErrorISR;
 80051e8:	f06f 0305 	mvn.w	r3, #5
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e007      	b.n	8005200 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <osDelay+0x2c>
      vTaskDelay(ticks);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f001 fc4e 	bl	8006a9c <vTaskDelay>
    }
  }

  return (stat);
 8005200:	68fb      	ldr	r3, [r7, #12]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800520a:	b580      	push	{r7, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005216:	f3ef 8305 	mrs	r3, IPSR
 800521a:	60bb      	str	r3, [r7, #8]
  return(result);
 800521c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800521e:	2b00      	cmp	r3, #0
 8005220:	d174      	bne.n	800530c <osMutexNew+0x102>
    if (attr != NULL) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	e001      	b.n	8005234 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <osMutexNew+0x3a>
      rmtx = 1U;
 800523e:	2301      	movs	r3, #1
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e001      	b.n	8005248 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d15c      	bne.n	800530c <osMutexNew+0x102>
      mem = -1;
 8005252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005256:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d015      	beq.n	800528a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d006      	beq.n	8005274 <osMutexNew+0x6a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	2b4f      	cmp	r3, #79	; 0x4f
 800526c:	d902      	bls.n	8005274 <osMutexNew+0x6a>
          mem = 1;
 800526e:	2301      	movs	r3, #1
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e00c      	b.n	800528e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d108      	bne.n	800528e <osMutexNew+0x84>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <osMutexNew+0x84>
            mem = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	e001      	b.n	800528e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d112      	bne.n	80052ba <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	4619      	mov	r1, r3
 80052a0:	2004      	movs	r0, #4
 80052a2:	f000 fc48 	bl	8005b36 <xQueueCreateMutexStatic>
 80052a6:	61f8      	str	r0, [r7, #28]
 80052a8:	e016      	b.n	80052d8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	4619      	mov	r1, r3
 80052b0:	2001      	movs	r0, #1
 80052b2:	f000 fc40 	bl	8005b36 <xQueueCreateMutexStatic>
 80052b6:	61f8      	str	r0, [r7, #28]
 80052b8:	e00e      	b.n	80052d8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80052c6:	2004      	movs	r0, #4
 80052c8:	f000 fc1d 	bl	8005b06 <xQueueCreateMutex>
 80052cc:	61f8      	str	r0, [r7, #28]
 80052ce:	e003      	b.n	80052d8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80052d0:	2001      	movs	r0, #1
 80052d2:	f000 fc18 	bl	8005b06 <xQueueCreateMutex>
 80052d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00c      	beq.n	80052f8 <osMutexNew+0xee>
        if (attr != NULL) {
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <osMutexNew+0xe2>
          name = attr->name;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	e001      	b.n	80052f0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80052f0:	68f9      	ldr	r1, [r7, #12]
 80052f2:	69f8      	ldr	r0, [r7, #28]
 80052f4:	f001 f9d2 	bl	800669c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d006      	beq.n	800530c <osMutexNew+0x102>
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800530c:	69fb      	ldr	r3, [r7, #28]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005316:	b580      	push	{r7, lr}
 8005318:	b086      	sub	sp, #24
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005334:	f3ef 8305 	mrs	r3, IPSR
 8005338:	60bb      	str	r3, [r7, #8]
  return(result);
 800533a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005340:	f06f 0305 	mvn.w	r3, #5
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e02c      	b.n	80053a2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800534e:	f06f 0303 	mvn.w	r3, #3
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e025      	b.n	80053a2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d011      	beq.n	8005380 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	6938      	ldr	r0, [r7, #16]
 8005360:	f000 fc38 	bl	8005bd4 <xQueueTakeMutexRecursive>
 8005364:	4603      	mov	r3, r0
 8005366:	2b01      	cmp	r3, #1
 8005368:	d01b      	beq.n	80053a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005370:	f06f 0301 	mvn.w	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e014      	b.n	80053a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005378:	f06f 0302 	mvn.w	r3, #2
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e010      	b.n	80053a2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	6938      	ldr	r0, [r7, #16]
 8005384:	f000 fed6 	bl	8006134 <xQueueSemaphoreTake>
 8005388:	4603      	mov	r3, r0
 800538a:	2b01      	cmp	r3, #1
 800538c:	d009      	beq.n	80053a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005394:	f06f 0301 	mvn.w	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e002      	b.n	80053a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800539c:	f06f 0302 	mvn.w	r3, #2
 80053a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80053a2:	697b      	ldr	r3, [r7, #20]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f023 0301 	bic.w	r3, r3, #1
 80053ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c8:	f3ef 8305 	mrs	r3, IPSR
 80053cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80053ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <osMutexRelease+0x30>
    stat = osErrorISR;
 80053d4:	f06f 0305 	mvn.w	r3, #5
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e01f      	b.n	800541c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80053e2:	f06f 0303 	mvn.w	r3, #3
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e018      	b.n	800541c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80053f0:	6938      	ldr	r0, [r7, #16]
 80053f2:	f000 fbbb 	bl	8005b6c <xQueueGiveMutexRecursive>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d00f      	beq.n	800541c <osMutexRelease+0x70>
        stat = osErrorResource;
 80053fc:	f06f 0302 	mvn.w	r3, #2
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e00b      	b.n	800541c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005404:	2300      	movs	r3, #0
 8005406:	2200      	movs	r2, #0
 8005408:	2100      	movs	r1, #0
 800540a:	6938      	ldr	r0, [r7, #16]
 800540c:	f000 fc18 	bl	8005c40 <xQueueGenericSend>
 8005410:	4603      	mov	r3, r0
 8005412:	2b01      	cmp	r3, #1
 8005414:	d002      	beq.n	800541c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005416:	f06f 0302 	mvn.w	r3, #2
 800541a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800541c:	697b      	ldr	r3, [r7, #20]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005426:	b580      	push	{r7, lr}
 8005428:	b08a      	sub	sp, #40	; 0x28
 800542a:	af02      	add	r7, sp, #8
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005436:	f3ef 8305 	mrs	r3, IPSR
 800543a:	613b      	str	r3, [r7, #16]
  return(result);
 800543c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800543e:	2b00      	cmp	r3, #0
 8005440:	d15f      	bne.n	8005502 <osMessageQueueNew+0xdc>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d05c      	beq.n	8005502 <osMessageQueueNew+0xdc>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d059      	beq.n	8005502 <osMessageQueueNew+0xdc>
    mem = -1;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005452:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d029      	beq.n	80054ae <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d012      	beq.n	8005488 <osMessageQueueNew+0x62>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b4f      	cmp	r3, #79	; 0x4f
 8005468:	d90e      	bls.n	8005488 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <osMessageQueueNew+0x62>
        mem = 1;
 8005482:	2301      	movs	r3, #1
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e014      	b.n	80054b2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d110      	bne.n	80054b2 <osMessageQueueNew+0x8c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10c      	bne.n	80054b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800549c:	2b00      	cmp	r3, #0
 800549e:	d108      	bne.n	80054b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <osMessageQueueNew+0x8c>
          mem = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	e001      	b.n	80054b2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d10b      	bne.n	80054d0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2100      	movs	r1, #0
 80054c2:	9100      	str	r1, [sp, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fa2e 	bl	8005928 <xQueueGenericCreateStatic>
 80054cc:	61f8      	str	r0, [r7, #28]
 80054ce:	e008      	b.n	80054e2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d105      	bne.n	80054e2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80054d6:	2200      	movs	r2, #0
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fa9c 	bl	8005a18 <xQueueGenericCreate>
 80054e0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00c      	beq.n	8005502 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e001      	b.n	80054fa <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80054fa:	6979      	ldr	r1, [r7, #20]
 80054fc:	69f8      	ldr	r0, [r7, #28]
 80054fe:	f001 f8cd 	bl	800669c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005502:	69fb      	ldr	r3, [r7, #28]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005520:	2300      	movs	r3, #0
 8005522:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005524:	f3ef 8305 	mrs	r3, IPSR
 8005528:	617b      	str	r3, [r7, #20]
  return(result);
 800552a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800552c:	2b00      	cmp	r3, #0
 800552e:	d028      	beq.n	8005582 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <osMessageQueuePut+0x36>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <osMessageQueuePut+0x36>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005542:	f06f 0303 	mvn.w	r3, #3
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	e038      	b.n	80055bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800554e:	f107 0210 	add.w	r2, r7, #16
 8005552:	2300      	movs	r3, #0
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	69b8      	ldr	r0, [r7, #24]
 8005558:	f000 fc70 	bl	8005e3c <xQueueGenericSendFromISR>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d003      	beq.n	800556a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005562:	f06f 0302 	mvn.w	r3, #2
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	e028      	b.n	80055bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d025      	beq.n	80055bc <osMessageQueuePut+0xb0>
 8005570:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <osMessageQueuePut+0xbc>)
 8005572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	e01c      	b.n	80055bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <osMessageQueuePut+0x82>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800558e:	f06f 0303 	mvn.w	r3, #3
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	e012      	b.n	80055bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005596:	2300      	movs	r3, #0
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	69b8      	ldr	r0, [r7, #24]
 800559e:	f000 fb4f 	bl	8005c40 <xQueueGenericSend>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d009      	beq.n	80055bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80055ae:	f06f 0301 	mvn.w	r3, #1
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	e002      	b.n	80055bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80055b6:	f06f 0302 	mvn.w	r3, #2
 80055ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80055bc:	69fb      	ldr	r3, [r7, #28]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3720      	adds	r7, #32
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e2:	f3ef 8305 	mrs	r3, IPSR
 80055e6:	617b      	str	r3, [r7, #20]
  return(result);
 80055e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d028      	beq.n	8005640 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <osMessageQueueGet+0x34>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <osMessageQueueGet+0x34>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005600:	f06f 0303 	mvn.w	r3, #3
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e037      	b.n	8005678 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800560c:	f107 0310 	add.w	r3, r7, #16
 8005610:	461a      	mov	r2, r3
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	69b8      	ldr	r0, [r7, #24]
 8005616:	f000 fe99 	bl	800634c <xQueueReceiveFromISR>
 800561a:	4603      	mov	r3, r0
 800561c:	2b01      	cmp	r3, #1
 800561e:	d003      	beq.n	8005628 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005620:	f06f 0302 	mvn.w	r3, #2
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	e027      	b.n	8005678 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d024      	beq.n	8005678 <osMessageQueueGet+0xac>
 800562e:	4b15      	ldr	r3, [pc, #84]	; (8005684 <osMessageQueueGet+0xb8>)
 8005630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	e01b      	b.n	8005678 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <osMessageQueueGet+0x80>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d103      	bne.n	8005654 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800564c:	f06f 0303 	mvn.w	r3, #3
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	e011      	b.n	8005678 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	68b9      	ldr	r1, [r7, #8]
 8005658:	69b8      	ldr	r0, [r7, #24]
 800565a:	f000 fc8b 	bl	8005f74 <xQueueReceive>
 800565e:	4603      	mov	r3, r0
 8005660:	2b01      	cmp	r3, #1
 8005662:	d009      	beq.n	8005678 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800566a:	f06f 0301 	mvn.w	r3, #1
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	e002      	b.n	8005678 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005672:	f06f 0302 	mvn.w	r3, #2
 8005676:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005678:	69fb      	ldr	r3, [r7, #28]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	e000ed04 	.word	0xe000ed04

08005688 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4a07      	ldr	r2, [pc, #28]	; (80056b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005698:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4a06      	ldr	r2, [pc, #24]	; (80056b8 <vApplicationGetIdleTaskMemory+0x30>)
 800569e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2280      	movs	r2, #128	; 0x80
 80056a4:	601a      	str	r2, [r3, #0]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	200003c4 	.word	0x200003c4
 80056b8:	20000420 	.word	0x20000420

080056bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4a07      	ldr	r2, [pc, #28]	; (80056e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80056cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4a06      	ldr	r2, [pc, #24]	; (80056ec <vApplicationGetTimerTaskMemory+0x30>)
 80056d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056da:	601a      	str	r2, [r3, #0]
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	20000620 	.word	0x20000620
 80056ec:	2000067c 	.word	0x2000067c

080056f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f103 0208 	add.w	r2, r3, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f103 0208 	add.w	r2, r3, #8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f103 0208 	add.w	r2, r3, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a8:	d103      	bne.n	80057b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	e00c      	b.n	80057cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3308      	adds	r3, #8
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e002      	b.n	80057c0 <vListInsert+0x2e>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d2f6      	bcs.n	80057ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	601a      	str	r2, [r3, #0]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6892      	ldr	r2, [r2, #8]
 800581a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6852      	ldr	r2, [r2, #4]
 8005824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d103      	bne.n	8005838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	1e5a      	subs	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005882:	f002 fbef 	bl	8008064 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005892:	fb01 f303 	mul.w	r3, r1, r3
 8005896:	441a      	add	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	3b01      	subs	r3, #1
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	441a      	add	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	22ff      	movs	r2, #255	; 0xff
 80058c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d114      	bne.n	8005902 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01a      	beq.n	8005916 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3310      	adds	r3, #16
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 fb97 	bl	8007018 <xTaskRemoveFromEventList>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d012      	beq.n	8005916 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <xQueueGenericReset+0xcc>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	e009      	b.n	8005916 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3310      	adds	r3, #16
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff fef2 	bl	80056f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3324      	adds	r3, #36	; 0x24
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff feed 	bl	80056f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005916:	f002 fbd5 	bl	80080c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800591a:	2301      	movs	r3, #1
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	e000ed04 	.word	0xe000ed04

08005928 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08e      	sub	sp, #56	; 0x38
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <xQueueGenericCreateStatic+0x52>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <xQueueGenericCreateStatic+0x56>
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <xQueueGenericCreateStatic+0x58>
 800597e:	2300      	movs	r3, #0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	623b      	str	r3, [r7, #32]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <xQueueGenericCreateStatic+0x7e>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <xQueueGenericCreateStatic+0x82>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xQueueGenericCreateStatic+0x84>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	61fb      	str	r3, [r7, #28]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059c6:	2350      	movs	r3, #80	; 0x50
 80059c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b50      	cmp	r3, #80	; 0x50
 80059ce:	d00a      	beq.n	80059e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	61bb      	str	r3, [r7, #24]
}
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00d      	beq.n	8005a0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	4613      	mov	r3, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f83f 	bl	8005a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3730      	adds	r7, #48	; 0x30
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	613b      	str	r3, [r7, #16]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	fb02 f303 	mul.w	r3, r2, r3
 8005a4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	3350      	adds	r3, #80	; 0x50
 8005a50:	4618      	mov	r0, r3
 8005a52:	f002 fc29 	bl	80082a8 <pvPortMalloc>
 8005a56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d011      	beq.n	8005a82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	3350      	adds	r3, #80	; 0x50
 8005a66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a70:	79fa      	ldrb	r2, [r7, #7]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	4613      	mov	r3, r2
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f805 	bl	8005a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a82:	69bb      	ldr	r3, [r7, #24]
	}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e002      	b.n	8005aae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005aba:	2101      	movs	r1, #1
 8005abc:	69b8      	ldr	r0, [r7, #24]
 8005abe:	f7ff fecb 	bl	8005858 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005af2:	2300      	movs	r3, #0
 8005af4:	2200      	movs	r2, #0
 8005af6:	2100      	movs	r1, #0
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f8a1 	bl	8005c40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b086      	sub	sp, #24
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b10:	2301      	movs	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6939      	ldr	r1, [r7, #16]
 8005b1e:	6978      	ldr	r0, [r7, #20]
 8005b20:	f7ff ff7a 	bl	8005a18 <xQueueGenericCreate>
 8005b24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff ffd3 	bl	8005ad2 <prvInitialiseMutex>

		return xNewQueue;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b088      	sub	sp, #32
 8005b3a:	af02      	add	r7, sp, #8
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	6039      	str	r1, [r7, #0]
 8005b40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b42:	2301      	movs	r3, #1
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2200      	movs	r2, #0
 8005b52:	6939      	ldr	r1, [r7, #16]
 8005b54:	6978      	ldr	r0, [r7, #20]
 8005b56:	f7ff fee7 	bl	8005928 <xQueueGenericCreateStatic>
 8005b5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff ffb8 	bl	8005ad2 <prvInitialiseMutex>

		return xNewQueue;
 8005b62:	68fb      	ldr	r3, [r7, #12]
	}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005b6c:	b590      	push	{r4, r7, lr}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	60fb      	str	r3, [r7, #12]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	689c      	ldr	r4, [r3, #8]
 8005b98:	f001 fbfc 	bl	8007394 <xTaskGetCurrentTaskHandle>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	429c      	cmp	r4, r3
 8005ba0:	d111      	bne.n	8005bc6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	1e5a      	subs	r2, r3, #1
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2100      	movs	r1, #0
 8005bba:	6938      	ldr	r0, [r7, #16]
 8005bbc:	f000 f840 	bl	8005c40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	e001      	b.n	8005bca <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005bca:	697b      	ldr	r3, [r7, #20]
	}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd90      	pop	{r4, r7, pc}

08005bd4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	60fb      	str	r3, [r7, #12]
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	689c      	ldr	r4, [r3, #8]
 8005c02:	f001 fbc7 	bl	8007394 <xTaskGetCurrentTaskHandle>
 8005c06:	4603      	mov	r3, r0
 8005c08:	429c      	cmp	r4, r3
 8005c0a:	d107      	bne.n	8005c1c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005c16:	2301      	movs	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e00c      	b.n	8005c36 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6938      	ldr	r0, [r7, #16]
 8005c20:	f000 fa88 	bl	8006134 <xQueueSemaphoreTake>
 8005c24:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d004      	beq.n	8005c36 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005c36:	697b      	ldr	r3, [r7, #20]
	}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd90      	pop	{r4, r7, pc}

08005c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08e      	sub	sp, #56	; 0x38
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <xQueueGenericSend+0x32>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <xQueueGenericSend+0x40>
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <xQueueGenericSend+0x44>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <xQueueGenericSend+0x46>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <xQueueGenericSend+0x60>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c9c:	bf00      	nop
 8005c9e:	e7fe      	b.n	8005c9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d103      	bne.n	8005cae <xQueueGenericSend+0x6e>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <xQueueGenericSend+0x72>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <xQueueGenericSend+0x74>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <xQueueGenericSend+0x8e>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	623b      	str	r3, [r7, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cce:	f001 fb71 	bl	80073b4 <xTaskGetSchedulerState>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <xQueueGenericSend+0x9e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <xQueueGenericSend+0xa2>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <xQueueGenericSend+0xa4>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <xQueueGenericSend+0xbe>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	61fb      	str	r3, [r7, #28]
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cfe:	f002 f9b1 	bl	8008064 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d302      	bcc.n	8005d14 <xQueueGenericSend+0xd4>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d129      	bne.n	8005d68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d1a:	f000 fbaf 	bl	800647c <prvCopyDataToQueue>
 8005d1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	3324      	adds	r3, #36	; 0x24
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 f973 	bl	8007018 <xTaskRemoveFromEventList>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d013      	beq.n	8005d60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d38:	4b3f      	ldr	r3, [pc, #252]	; (8005e38 <xQueueGenericSend+0x1f8>)
 8005d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	e00a      	b.n	8005d60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d50:	4b39      	ldr	r3, [pc, #228]	; (8005e38 <xQueueGenericSend+0x1f8>)
 8005d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d60:	f002 f9b0 	bl	80080c4 <vPortExitCritical>
				return pdPASS;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e063      	b.n	8005e30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d6e:	f002 f9a9 	bl	80080c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e05c      	b.n	8005e30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d7c:	f107 0314 	add.w	r3, r7, #20
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 f9ad 	bl	80070e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d86:	2301      	movs	r3, #1
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d8a:	f002 f99b 	bl	80080c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d8e:	f000 ff1f 	bl	8006bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d92:	f002 f967 	bl	8008064 <vPortEnterCritical>
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d9c:	b25b      	sxtb	r3, r3
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da2:	d103      	bne.n	8005dac <xQueueGenericSend+0x16c>
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db8:	d103      	bne.n	8005dc2 <xQueueGenericSend+0x182>
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dc2:	f002 f97f 	bl	80080c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dc6:	1d3a      	adds	r2, r7, #4
 8005dc8:	f107 0314 	add.w	r3, r7, #20
 8005dcc:	4611      	mov	r1, r2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 f99c 	bl	800710c <xTaskCheckForTimeOut>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d124      	bne.n	8005e24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ddc:	f000 fc46 	bl	800666c <prvIsQueueFull>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d018      	beq.n	8005e18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	3310      	adds	r3, #16
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 f8c2 	bl	8006f78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df6:	f000 fbd1 	bl	800659c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dfa:	f000 fef7 	bl	8006bec <xTaskResumeAll>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f47f af7c 	bne.w	8005cfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <xQueueGenericSend+0x1f8>)
 8005e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	e772      	b.n	8005cfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e1a:	f000 fbbf 	bl	800659c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e1e:	f000 fee5 	bl	8006bec <xTaskResumeAll>
 8005e22:	e76c      	b.n	8005cfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e26:	f000 fbb9 	bl	800659c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e2a:	f000 fedf 	bl	8006bec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3738      	adds	r7, #56	; 0x38
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b090      	sub	sp, #64	; 0x40
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d103      	bne.n	8005e78 <xQueueGenericSendFromISR+0x3c>
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <xQueueGenericSendFromISR+0x40>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <xQueueGenericSendFromISR+0x42>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d103      	bne.n	8005ea6 <xQueueGenericSendFromISR+0x6a>
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <xQueueGenericSendFromISR+0x6e>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <xQueueGenericSendFromISR+0x70>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	623b      	str	r3, [r7, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ec6:	f002 f9af 	bl	8008228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005eca:	f3ef 8211 	mrs	r2, BASEPRI
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	61fa      	str	r2, [r7, #28]
 8005ee0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ee2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <xQueueGenericSendFromISR+0xbc>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d12f      	bne.n	8005f58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f0e:	f000 fab5 	bl	800647c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f1a:	d112      	bne.n	8005f42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d016      	beq.n	8005f52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	3324      	adds	r3, #36	; 0x24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 f875 	bl	8007018 <xTaskRemoveFromEventList>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00e      	beq.n	8005f52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	e007      	b.n	8005f52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f46:	3301      	adds	r3, #1
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	b25a      	sxtb	r2, r3
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f52:	2301      	movs	r3, #1
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f56:	e001      	b.n	8005f5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3740      	adds	r7, #64	; 0x40
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08c      	sub	sp, #48	; 0x30
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f80:	2300      	movs	r3, #0
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <xQueueReceive+0x30>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	623b      	str	r3, [r7, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d103      	bne.n	8005fb2 <xQueueReceive+0x3e>
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <xQueueReceive+0x42>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueReceive+0x44>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <xQueueReceive+0x5e>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	61fb      	str	r3, [r7, #28]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fd2:	f001 f9ef 	bl	80073b4 <xTaskGetSchedulerState>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <xQueueReceive+0x6e>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <xQueueReceive+0x72>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <xQueueReceive+0x74>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <xQueueReceive+0x8e>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	61bb      	str	r3, [r7, #24]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006002:	f002 f82f 	bl	8008064 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01f      	beq.n	8006052 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006016:	f000 fa9b 	bl	8006550 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1e5a      	subs	r2, r3, #1
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00f      	beq.n	800604a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	3310      	adds	r3, #16
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fff2 	bl	8007018 <xTaskRemoveFromEventList>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800603a:	4b3d      	ldr	r3, [pc, #244]	; (8006130 <xQueueReceive+0x1bc>)
 800603c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800604a:	f002 f83b 	bl	80080c4 <vPortExitCritical>
				return pdPASS;
 800604e:	2301      	movs	r3, #1
 8006050:	e069      	b.n	8006126 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d103      	bne.n	8006060 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006058:	f002 f834 	bl	80080c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800605c:	2300      	movs	r3, #0
 800605e:	e062      	b.n	8006126 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006066:	f107 0310 	add.w	r3, r7, #16
 800606a:	4618      	mov	r0, r3
 800606c:	f001 f838 	bl	80070e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006074:	f002 f826 	bl	80080c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006078:	f000 fdaa 	bl	8006bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800607c:	f001 fff2 	bl	8008064 <vPortEnterCritical>
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006086:	b25b      	sxtb	r3, r3
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800608c:	d103      	bne.n	8006096 <xQueueReceive+0x122>
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800609c:	b25b      	sxtb	r3, r3
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060a2:	d103      	bne.n	80060ac <xQueueReceive+0x138>
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ac:	f002 f80a 	bl	80080c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060b0:	1d3a      	adds	r2, r7, #4
 80060b2:	f107 0310 	add.w	r3, r7, #16
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 f827 	bl	800710c <xTaskCheckForTimeOut>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d123      	bne.n	800610c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c6:	f000 fabb 	bl	8006640 <prvIsQueueEmpty>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d017      	beq.n	8006100 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	3324      	adds	r3, #36	; 0x24
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 ff4d 	bl	8006f78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e0:	f000 fa5c 	bl	800659c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060e4:	f000 fd82 	bl	8006bec <xTaskResumeAll>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d189      	bne.n	8006002 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80060ee:	4b10      	ldr	r3, [pc, #64]	; (8006130 <xQueueReceive+0x1bc>)
 80060f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	e780      	b.n	8006002 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006102:	f000 fa4b 	bl	800659c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006106:	f000 fd71 	bl	8006bec <xTaskResumeAll>
 800610a:	e77a      	b.n	8006002 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800610c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800610e:	f000 fa45 	bl	800659c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006112:	f000 fd6b 	bl	8006bec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006118:	f000 fa92 	bl	8006640 <prvIsQueueEmpty>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	f43f af6f 	beq.w	8006002 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006124:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006126:	4618      	mov	r0, r3
 8006128:	3730      	adds	r7, #48	; 0x30
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08e      	sub	sp, #56	; 0x38
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800613e:	2300      	movs	r3, #0
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006146:	2300      	movs	r3, #0
 8006148:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	623b      	str	r3, [r7, #32]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	61fb      	str	r3, [r7, #28]
}
 8006180:	bf00      	nop
 8006182:	e7fe      	b.n	8006182 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006184:	f001 f916 	bl	80073b4 <xTaskGetSchedulerState>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <xQueueSemaphoreTake+0x60>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <xQueueSemaphoreTake+0x64>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <xQueueSemaphoreTake+0x66>
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	61bb      	str	r3, [r7, #24]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061b4:	f001 ff56 	bl	8008064 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d024      	beq.n	800620e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	1e5a      	subs	r2, r3, #1
 80061c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061d4:	f001 fa64 	bl	80076a0 <pvTaskIncrementMutexHeldCount>
 80061d8:	4602      	mov	r2, r0
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00f      	beq.n	8006206 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	3310      	adds	r3, #16
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 ff14 	bl	8007018 <xTaskRemoveFromEventList>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061f6:	4b54      	ldr	r3, [pc, #336]	; (8006348 <xQueueSemaphoreTake+0x214>)
 80061f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006206:	f001 ff5d 	bl	80080c4 <vPortExitCritical>
				return pdPASS;
 800620a:	2301      	movs	r3, #1
 800620c:	e097      	b.n	800633e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d111      	bne.n	8006238 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	617b      	str	r3, [r7, #20]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006230:	f001 ff48 	bl	80080c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006234:	2300      	movs	r3, #0
 8006236:	e082      	b.n	800633e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800623e:	f107 030c 	add.w	r3, r7, #12
 8006242:	4618      	mov	r0, r3
 8006244:	f000 ff4c 	bl	80070e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006248:	2301      	movs	r3, #1
 800624a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800624c:	f001 ff3a 	bl	80080c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006250:	f000 fcbe 	bl	8006bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006254:	f001 ff06 	bl	8008064 <vPortEnterCritical>
 8006258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800625e:	b25b      	sxtb	r3, r3
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006264:	d103      	bne.n	800626e <xQueueSemaphoreTake+0x13a>
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006274:	b25b      	sxtb	r3, r3
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800627a:	d103      	bne.n	8006284 <xQueueSemaphoreTake+0x150>
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006284:	f001 ff1e 	bl	80080c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006288:	463a      	mov	r2, r7
 800628a:	f107 030c 	add.w	r3, r7, #12
 800628e:	4611      	mov	r1, r2
 8006290:	4618      	mov	r0, r3
 8006292:	f000 ff3b 	bl	800710c <xTaskCheckForTimeOut>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d132      	bne.n	8006302 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800629c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800629e:	f000 f9cf 	bl	8006640 <prvIsQueueEmpty>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d026      	beq.n	80062f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d109      	bne.n	80062c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80062b0:	f001 fed8 	bl	8008064 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 f899 	bl	80073f0 <xTaskPriorityInherit>
 80062be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80062c0:	f001 ff00 	bl	80080c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c6:	3324      	adds	r3, #36	; 0x24
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fe53 	bl	8006f78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062d4:	f000 f962 	bl	800659c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062d8:	f000 fc88 	bl	8006bec <xTaskResumeAll>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f47f af68 	bne.w	80061b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80062e4:	4b18      	ldr	r3, [pc, #96]	; (8006348 <xQueueSemaphoreTake+0x214>)
 80062e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	e75e      	b.n	80061b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062f8:	f000 f950 	bl	800659c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062fc:	f000 fc76 	bl	8006bec <xTaskResumeAll>
 8006300:	e758      	b.n	80061b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006304:	f000 f94a 	bl	800659c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006308:	f000 fc70 	bl	8006bec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800630c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800630e:	f000 f997 	bl	8006640 <prvIsQueueEmpty>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	f43f af4d 	beq.w	80061b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00d      	beq.n	800633c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006320:	f001 fea0 	bl	8008064 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006326:	f000 f891 	bl	800644c <prvGetDisinheritPriorityAfterTimeout>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006332:	4618      	mov	r0, r3
 8006334:	f001 f932 	bl	800759c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006338:	f001 fec4 	bl	80080c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800633c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800633e:	4618      	mov	r0, r3
 8006340:	3738      	adds	r7, #56	; 0x38
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08e      	sub	sp, #56	; 0x38
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	623b      	str	r3, [r7, #32]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <xQueueReceiveFromISR+0x3a>
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <xQueueReceiveFromISR+0x3e>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <xQueueReceiveFromISR+0x40>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	61fb      	str	r3, [r7, #28]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063a6:	f001 ff3f 	bl	8008228 <vPortValidateInterruptPriority>
	__asm volatile
 80063aa:	f3ef 8211 	mrs	r2, BASEPRI
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	61ba      	str	r2, [r7, #24]
 80063c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80063c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d02f      	beq.n	8006432 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063e0:	f000 f8b6 	bl	8006550 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	1e5a      	subs	r2, r3, #1
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80063ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f4:	d112      	bne.n	800641c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	3310      	adds	r3, #16
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fe08 	bl	8007018 <xTaskRemoveFromEventList>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00e      	beq.n	800642c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e007      	b.n	800642c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800641c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006420:	3301      	adds	r3, #1
 8006422:	b2db      	uxtb	r3, r3
 8006424:	b25a      	sxtb	r2, r3
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800642c:	2301      	movs	r3, #1
 800642e:	637b      	str	r3, [r7, #52]	; 0x34
 8006430:	e001      	b.n	8006436 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006432:	2300      	movs	r3, #0
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	613b      	str	r3, [r7, #16]
	__asm volatile
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f383 8811 	msr	BASEPRI, r3
}
 8006440:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006444:	4618      	mov	r0, r3
 8006446:	3738      	adds	r7, #56	; 0x38
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	d006      	beq.n	800646a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	e001      	b.n	800646e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800646e:	68fb      	ldr	r3, [r7, #12]
	}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10d      	bne.n	80064b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d14d      	bne.n	800653e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 f80a 	bl	80074c0 <xTaskPriorityDisinherit>
 80064ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	e043      	b.n	800653e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d119      	bne.n	80064f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6858      	ldr	r0, [r3, #4]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	461a      	mov	r2, r3
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	f002 f90a 	bl	80086e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	441a      	add	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d32b      	bcc.n	800653e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	e026      	b.n	800653e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68d8      	ldr	r0, [r3, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	461a      	mov	r2, r3
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	f002 f8f0 	bl	80086e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	425b      	negs	r3, r3
 800650a:	441a      	add	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d207      	bcs.n	800652c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	425b      	negs	r3, r3
 8006526:	441a      	add	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d105      	bne.n	800653e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	3b01      	subs	r3, #1
 800653c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006546:	697b      	ldr	r3, [r7, #20]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d018      	beq.n	8006594 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	441a      	add	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	429a      	cmp	r2, r3
 800657a:	d303      	bcc.n	8006584 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68d9      	ldr	r1, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	461a      	mov	r2, r3
 800658e:	6838      	ldr	r0, [r7, #0]
 8006590:	f002 f8a6 	bl	80086e0 <memcpy>
	}
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065a4:	f001 fd5e 	bl	8008064 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065b0:	e011      	b.n	80065d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d012      	beq.n	80065e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3324      	adds	r3, #36	; 0x24
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fd2a 	bl	8007018 <xTaskRemoveFromEventList>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065ca:	f000 fe01 	bl	80071d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dce9      	bgt.n	80065b2 <prvUnlockQueue+0x16>
 80065de:	e000      	b.n	80065e2 <prvUnlockQueue+0x46>
					break;
 80065e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	22ff      	movs	r2, #255	; 0xff
 80065e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065ea:	f001 fd6b 	bl	80080c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065ee:	f001 fd39 	bl	8008064 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065fa:	e011      	b.n	8006620 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d012      	beq.n	800662a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3310      	adds	r3, #16
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fd05 	bl	8007018 <xTaskRemoveFromEventList>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006614:	f000 fddc 	bl	80071d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	3b01      	subs	r3, #1
 800661c:	b2db      	uxtb	r3, r3
 800661e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006624:	2b00      	cmp	r3, #0
 8006626:	dce9      	bgt.n	80065fc <prvUnlockQueue+0x60>
 8006628:	e000      	b.n	800662c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800662a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	22ff      	movs	r2, #255	; 0xff
 8006630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006634:	f001 fd46 	bl	80080c4 <vPortExitCritical>
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006648:	f001 fd0c 	bl	8008064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006654:	2301      	movs	r3, #1
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e001      	b.n	800665e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800665e:	f001 fd31 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 8006662:	68fb      	ldr	r3, [r7, #12]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006674:	f001 fcf6 	bl	8008064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	429a      	cmp	r2, r3
 8006682:	d102      	bne.n	800668a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e001      	b.n	800668e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800668e:	f001 fd19 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	e014      	b.n	80066d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066ac:	4a0f      	ldr	r2, [pc, #60]	; (80066ec <vQueueAddToRegistry+0x50>)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066b8:	490c      	ldr	r1, [pc, #48]	; (80066ec <vQueueAddToRegistry+0x50>)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066c2:	4a0a      	ldr	r2, [pc, #40]	; (80066ec <vQueueAddToRegistry+0x50>)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	4413      	add	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80066ce:	e006      	b.n	80066de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b07      	cmp	r3, #7
 80066da:	d9e7      	bls.n	80066ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20000a7c 	.word	0x20000a7c

080066f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006700:	f001 fcb0 	bl	8008064 <vPortEnterCritical>
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800670a:	b25b      	sxtb	r3, r3
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006710:	d103      	bne.n	800671a <vQueueWaitForMessageRestricted+0x2a>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006720:	b25b      	sxtb	r3, r3
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006726:	d103      	bne.n	8006730 <vQueueWaitForMessageRestricted+0x40>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006730:	f001 fcc8 	bl	80080c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	2b00      	cmp	r3, #0
 800673a:	d106      	bne.n	800674a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	3324      	adds	r3, #36	; 0x24
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fc3b 	bl	8006fc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800674a:	6978      	ldr	r0, [r7, #20]
 800674c:	f7ff ff26 	bl	800659c <prvUnlockQueue>
	}
 8006750:	bf00      	nop
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08e      	sub	sp, #56	; 0x38
 800675c:	af04      	add	r7, sp, #16
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <xTaskCreateStatic+0x2a>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	623b      	str	r3, [r7, #32]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xTaskCreateStatic+0x46>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	61fb      	str	r3, [r7, #28]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800679e:	235c      	movs	r3, #92	; 0x5c
 80067a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b5c      	cmp	r3, #92	; 0x5c
 80067a6:	d00a      	beq.n	80067be <xTaskCreateStatic+0x66>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	61bb      	str	r3, [r7, #24]
}
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80067be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d01e      	beq.n	8006804 <xTaskCreateStatic+0xac>
 80067c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01b      	beq.n	8006804 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	2202      	movs	r2, #2
 80067da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067de:	2300      	movs	r3, #0
 80067e0:	9303      	str	r3, [sp, #12]
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	9302      	str	r3, [sp, #8]
 80067e6:	f107 0314 	add.w	r3, r7, #20
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 f850 	bl	800689c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067fe:	f000 f8dd 	bl	80069bc <prvAddNewTaskToReadyList>
 8006802:	e001      	b.n	8006808 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006808:	697b      	ldr	r3, [r7, #20]
	}
 800680a:	4618      	mov	r0, r3
 800680c:	3728      	adds	r7, #40	; 0x28
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006812:	b580      	push	{r7, lr}
 8006814:	b08c      	sub	sp, #48	; 0x30
 8006816:	af04      	add	r7, sp, #16
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006822:	88fb      	ldrh	r3, [r7, #6]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4618      	mov	r0, r3
 8006828:	f001 fd3e 	bl	80082a8 <pvPortMalloc>
 800682c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00e      	beq.n	8006852 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006834:	205c      	movs	r0, #92	; 0x5c
 8006836:	f001 fd37 	bl	80082a8 <pvPortMalloc>
 800683a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
 8006848:	e005      	b.n	8006856 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800684a:	6978      	ldr	r0, [r7, #20]
 800684c:	f001 fdf8 	bl	8008440 <vPortFree>
 8006850:	e001      	b.n	8006856 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006852:	2300      	movs	r3, #0
 8006854:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d017      	beq.n	800688c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006864:	88fa      	ldrh	r2, [r7, #6]
 8006866:	2300      	movs	r3, #0
 8006868:	9303      	str	r3, [sp, #12]
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	9302      	str	r3, [sp, #8]
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f80e 	bl	800689c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006880:	69f8      	ldr	r0, [r7, #28]
 8006882:	f000 f89b 	bl	80069bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006886:	2301      	movs	r3, #1
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	e002      	b.n	8006892 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800688c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006890:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006892:	69bb      	ldr	r3, [r7, #24]
	}
 8006894:	4618      	mov	r0, r3
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	461a      	mov	r2, r3
 80068b4:	21a5      	movs	r1, #165	; 0xa5
 80068b6:	f001 ff21 	bl	80086fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068c4:	3b01      	subs	r3, #1
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f023 0307 	bic.w	r3, r3, #7
 80068d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	617b      	str	r3, [r7, #20]
}
 80068f0:	bf00      	nop
 80068f2:	e7fe      	b.n	80068f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d01f      	beq.n	800693a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068fa:	2300      	movs	r3, #0
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	e012      	b.n	8006926 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	7819      	ldrb	r1, [r3, #0]
 8006908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	3334      	adds	r3, #52	; 0x34
 8006910:	460a      	mov	r2, r1
 8006912:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d006      	beq.n	800692e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	3301      	adds	r3, #1
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	2b0f      	cmp	r3, #15
 800692a:	d9e9      	bls.n	8006900 <prvInitialiseNewTask+0x64>
 800692c:	e000      	b.n	8006930 <prvInitialiseNewTask+0x94>
			{
				break;
 800692e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006938:	e003      	b.n	8006942 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	2b37      	cmp	r3, #55	; 0x37
 8006946:	d901      	bls.n	800694c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006948:	2337      	movs	r3, #55	; 0x37
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006950:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006956:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	2200      	movs	r2, #0
 800695c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	3304      	adds	r3, #4
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fee4 	bl	8005730 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	3318      	adds	r3, #24
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fedf 	bl	8005730 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006976:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006986:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	2200      	movs	r2, #0
 800698c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	68f9      	ldr	r1, [r7, #12]
 800699a:	69b8      	ldr	r0, [r7, #24]
 800699c:	f001 fa36 	bl	8007e0c <pxPortInitialiseStack>
 80069a0:	4602      	mov	r2, r0
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069b2:	bf00      	nop
 80069b4:	3720      	adds	r7, #32
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069c4:	f001 fb4e 	bl	8008064 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069c8:	4b2d      	ldr	r3, [pc, #180]	; (8006a80 <prvAddNewTaskToReadyList+0xc4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3301      	adds	r3, #1
 80069ce:	4a2c      	ldr	r2, [pc, #176]	; (8006a80 <prvAddNewTaskToReadyList+0xc4>)
 80069d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069d2:	4b2c      	ldr	r3, [pc, #176]	; (8006a84 <prvAddNewTaskToReadyList+0xc8>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069da:	4a2a      	ldr	r2, [pc, #168]	; (8006a84 <prvAddNewTaskToReadyList+0xc8>)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069e0:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <prvAddNewTaskToReadyList+0xc4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d110      	bne.n	8006a0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069e8:	f000 fc16 	bl	8007218 <prvInitialiseTaskLists>
 80069ec:	e00d      	b.n	8006a0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069ee:	4b26      	ldr	r3, [pc, #152]	; (8006a88 <prvAddNewTaskToReadyList+0xcc>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069f6:	4b23      	ldr	r3, [pc, #140]	; (8006a84 <prvAddNewTaskToReadyList+0xc8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d802      	bhi.n	8006a0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a04:	4a1f      	ldr	r2, [pc, #124]	; (8006a84 <prvAddNewTaskToReadyList+0xc8>)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a0a:	4b20      	ldr	r3, [pc, #128]	; (8006a8c <prvAddNewTaskToReadyList+0xd0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <prvAddNewTaskToReadyList+0xd0>)
 8006a12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a14:	4b1d      	ldr	r3, [pc, #116]	; (8006a8c <prvAddNewTaskToReadyList+0xd0>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <prvAddNewTaskToReadyList+0xd4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d903      	bls.n	8006a30 <prvAddNewTaskToReadyList+0x74>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	4a18      	ldr	r2, [pc, #96]	; (8006a90 <prvAddNewTaskToReadyList+0xd4>)
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <prvAddNewTaskToReadyList+0xd8>)
 8006a3e:	441a      	add	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4619      	mov	r1, r3
 8006a46:	4610      	mov	r0, r2
 8006a48:	f7fe fe7f 	bl	800574a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a4c:	f001 fb3a 	bl	80080c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a50:	4b0d      	ldr	r3, [pc, #52]	; (8006a88 <prvAddNewTaskToReadyList+0xcc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00e      	beq.n	8006a76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <prvAddNewTaskToReadyList+0xc8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d207      	bcs.n	8006a76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <prvAddNewTaskToReadyList+0xdc>)
 8006a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000f90 	.word	0x20000f90
 8006a84:	20000abc 	.word	0x20000abc
 8006a88:	20000f9c 	.word	0x20000f9c
 8006a8c:	20000fac 	.word	0x20000fac
 8006a90:	20000f98 	.word	0x20000f98
 8006a94:	20000ac0 	.word	0x20000ac0
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d017      	beq.n	8006ade <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006aae:	4b13      	ldr	r3, [pc, #76]	; (8006afc <vTaskDelay+0x60>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <vTaskDelay+0x30>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60bb      	str	r3, [r7, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006acc:	f000 f880 	bl	8006bd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fdf8 	bl	80076c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ad8:	f000 f888 	bl	8006bec <xTaskResumeAll>
 8006adc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d107      	bne.n	8006af4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ae4:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <vTaskDelay+0x64>)
 8006ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20000fb8 	.word	0x20000fb8
 8006b00:	e000ed04 	.word	0xe000ed04

08006b04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08a      	sub	sp, #40	; 0x28
 8006b08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b12:	463a      	mov	r2, r7
 8006b14:	1d39      	adds	r1, r7, #4
 8006b16:	f107 0308 	add.w	r3, r7, #8
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fdb4 	bl	8005688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	9202      	str	r2, [sp, #8]
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	460a      	mov	r2, r1
 8006b32:	4921      	ldr	r1, [pc, #132]	; (8006bb8 <vTaskStartScheduler+0xb4>)
 8006b34:	4821      	ldr	r0, [pc, #132]	; (8006bbc <vTaskStartScheduler+0xb8>)
 8006b36:	f7ff fe0f 	bl	8006758 <xTaskCreateStatic>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	4a20      	ldr	r2, [pc, #128]	; (8006bc0 <vTaskStartScheduler+0xbc>)
 8006b3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b40:	4b1f      	ldr	r3, [pc, #124]	; (8006bc0 <vTaskStartScheduler+0xbc>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	e001      	b.n	8006b52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d102      	bne.n	8006b5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b58:	f000 fe0a 	bl	8007770 <xTimerCreateTimerTask>
 8006b5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d116      	bne.n	8006b92 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	613b      	str	r3, [r7, #16]
}
 8006b76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b78:	4b12      	ldr	r3, [pc, #72]	; (8006bc4 <vTaskStartScheduler+0xc0>)
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b80:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <vTaskStartScheduler+0xc4>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b86:	4b11      	ldr	r3, [pc, #68]	; (8006bcc <vTaskStartScheduler+0xc8>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b8c:	f001 f9c8 	bl	8007f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b90:	e00e      	b.n	8006bb0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b98:	d10a      	bne.n	8006bb0 <vTaskStartScheduler+0xac>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	60fb      	str	r3, [r7, #12]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <vTaskStartScheduler+0xaa>
}
 8006bb0:	bf00      	nop
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	0800d1f0 	.word	0x0800d1f0
 8006bbc:	080071e9 	.word	0x080071e9
 8006bc0:	20000fb4 	.word	0x20000fb4
 8006bc4:	20000fb0 	.word	0x20000fb0
 8006bc8:	20000f9c 	.word	0x20000f9c
 8006bcc:	20000f94 	.word	0x20000f94

08006bd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bd4:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <vTaskSuspendAll+0x18>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	4a03      	ldr	r2, [pc, #12]	; (8006be8 <vTaskSuspendAll+0x18>)
 8006bdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bde:	bf00      	nop
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20000fb8 	.word	0x20000fb8

08006bec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bfa:	4b42      	ldr	r3, [pc, #264]	; (8006d04 <xTaskResumeAll+0x118>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <xTaskResumeAll+0x2c>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	603b      	str	r3, [r7, #0]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c18:	f001 fa24 	bl	8008064 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c1c:	4b39      	ldr	r3, [pc, #228]	; (8006d04 <xTaskResumeAll+0x118>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	4a38      	ldr	r2, [pc, #224]	; (8006d04 <xTaskResumeAll+0x118>)
 8006c24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c26:	4b37      	ldr	r3, [pc, #220]	; (8006d04 <xTaskResumeAll+0x118>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d162      	bne.n	8006cf4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c2e:	4b36      	ldr	r3, [pc, #216]	; (8006d08 <xTaskResumeAll+0x11c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d05e      	beq.n	8006cf4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c36:	e02f      	b.n	8006c98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c38:	4b34      	ldr	r3, [pc, #208]	; (8006d0c <xTaskResumeAll+0x120>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3318      	adds	r3, #24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fddd 	bl	8005804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe fdd8 	bl	8005804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c58:	4b2d      	ldr	r3, [pc, #180]	; (8006d10 <xTaskResumeAll+0x124>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d903      	bls.n	8006c68 <xTaskResumeAll+0x7c>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	4a2a      	ldr	r2, [pc, #168]	; (8006d10 <xTaskResumeAll+0x124>)
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4a27      	ldr	r2, [pc, #156]	; (8006d14 <xTaskResumeAll+0x128>)
 8006c76:	441a      	add	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4610      	mov	r0, r2
 8006c80:	f7fe fd63 	bl	800574a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c88:	4b23      	ldr	r3, [pc, #140]	; (8006d18 <xTaskResumeAll+0x12c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d302      	bcc.n	8006c98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c92:	4b22      	ldr	r3, [pc, #136]	; (8006d1c <xTaskResumeAll+0x130>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c98:	4b1c      	ldr	r3, [pc, #112]	; (8006d0c <xTaskResumeAll+0x120>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1cb      	bne.n	8006c38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ca6:	f000 fb55 	bl	8007354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006caa:	4b1d      	ldr	r3, [pc, #116]	; (8006d20 <xTaskResumeAll+0x134>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d010      	beq.n	8006cd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cb6:	f000 f847 	bl	8006d48 <xTaskIncrementTick>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006cc0:	4b16      	ldr	r3, [pc, #88]	; (8006d1c <xTaskResumeAll+0x130>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f1      	bne.n	8006cb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006cd2:	4b13      	ldr	r3, [pc, #76]	; (8006d20 <xTaskResumeAll+0x134>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cd8:	4b10      	ldr	r3, [pc, #64]	; (8006d1c <xTaskResumeAll+0x130>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <xTaskResumeAll+0x138>)
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cf4:	f001 f9e6 	bl	80080c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000fb8 	.word	0x20000fb8
 8006d08:	20000f90 	.word	0x20000f90
 8006d0c:	20000f50 	.word	0x20000f50
 8006d10:	20000f98 	.word	0x20000f98
 8006d14:	20000ac0 	.word	0x20000ac0
 8006d18:	20000abc 	.word	0x20000abc
 8006d1c:	20000fa4 	.word	0x20000fa4
 8006d20:	20000fa0 	.word	0x20000fa0
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <xTaskGetTickCount+0x1c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d34:	687b      	ldr	r3, [r7, #4]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000f94 	.word	0x20000f94

08006d48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d52:	4b4f      	ldr	r3, [pc, #316]	; (8006e90 <xTaskIncrementTick+0x148>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f040 808f 	bne.w	8006e7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d5c:	4b4d      	ldr	r3, [pc, #308]	; (8006e94 <xTaskIncrementTick+0x14c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d64:	4a4b      	ldr	r2, [pc, #300]	; (8006e94 <xTaskIncrementTick+0x14c>)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d120      	bne.n	8006db2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d70:	4b49      	ldr	r3, [pc, #292]	; (8006e98 <xTaskIncrementTick+0x150>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <xTaskIncrementTick+0x48>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	603b      	str	r3, [r7, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <xTaskIncrementTick+0x46>
 8006d90:	4b41      	ldr	r3, [pc, #260]	; (8006e98 <xTaskIncrementTick+0x150>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	4b41      	ldr	r3, [pc, #260]	; (8006e9c <xTaskIncrementTick+0x154>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3f      	ldr	r2, [pc, #252]	; (8006e98 <xTaskIncrementTick+0x150>)
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	4a3f      	ldr	r2, [pc, #252]	; (8006e9c <xTaskIncrementTick+0x154>)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	4b3e      	ldr	r3, [pc, #248]	; (8006ea0 <xTaskIncrementTick+0x158>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3301      	adds	r3, #1
 8006daa:	4a3d      	ldr	r2, [pc, #244]	; (8006ea0 <xTaskIncrementTick+0x158>)
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	f000 fad1 	bl	8007354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006db2:	4b3c      	ldr	r3, [pc, #240]	; (8006ea4 <xTaskIncrementTick+0x15c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d349      	bcc.n	8006e50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dbc:	4b36      	ldr	r3, [pc, #216]	; (8006e98 <xTaskIncrementTick+0x150>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc6:	4b37      	ldr	r3, [pc, #220]	; (8006ea4 <xTaskIncrementTick+0x15c>)
 8006dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dcc:	601a      	str	r2, [r3, #0]
					break;
 8006dce:	e03f      	b.n	8006e50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd0:	4b31      	ldr	r3, [pc, #196]	; (8006e98 <xTaskIncrementTick+0x150>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d203      	bcs.n	8006df0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006de8:	4a2e      	ldr	r2, [pc, #184]	; (8006ea4 <xTaskIncrementTick+0x15c>)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006dee:	e02f      	b.n	8006e50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fd05 	bl	8005804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	3318      	adds	r3, #24
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe fcfc 	bl	8005804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4b25      	ldr	r3, [pc, #148]	; (8006ea8 <xTaskIncrementTick+0x160>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d903      	bls.n	8006e20 <xTaskIncrementTick+0xd8>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	4a22      	ldr	r2, [pc, #136]	; (8006ea8 <xTaskIncrementTick+0x160>)
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4a1f      	ldr	r2, [pc, #124]	; (8006eac <xTaskIncrementTick+0x164>)
 8006e2e:	441a      	add	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f7fe fc87 	bl	800574a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e40:	4b1b      	ldr	r3, [pc, #108]	; (8006eb0 <xTaskIncrementTick+0x168>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d3b8      	bcc.n	8006dbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e4e:	e7b5      	b.n	8006dbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e50:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <xTaskIncrementTick+0x168>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e56:	4915      	ldr	r1, [pc, #84]	; (8006eac <xTaskIncrementTick+0x164>)
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d901      	bls.n	8006e6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e6c:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <xTaskIncrementTick+0x16c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e74:	2301      	movs	r3, #1
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	e004      	b.n	8006e84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <xTaskIncrementTick+0x170>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	4a0d      	ldr	r2, [pc, #52]	; (8006eb8 <xTaskIncrementTick+0x170>)
 8006e82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e84:	697b      	ldr	r3, [r7, #20]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000fb8 	.word	0x20000fb8
 8006e94:	20000f94 	.word	0x20000f94
 8006e98:	20000f48 	.word	0x20000f48
 8006e9c:	20000f4c 	.word	0x20000f4c
 8006ea0:	20000fa8 	.word	0x20000fa8
 8006ea4:	20000fb0 	.word	0x20000fb0
 8006ea8:	20000f98 	.word	0x20000f98
 8006eac:	20000ac0 	.word	0x20000ac0
 8006eb0:	20000abc 	.word	0x20000abc
 8006eb4:	20000fa4 	.word	0x20000fa4
 8006eb8:	20000fa0 	.word	0x20000fa0

08006ebc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ec2:	4b28      	ldr	r3, [pc, #160]	; (8006f64 <vTaskSwitchContext+0xa8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006eca:	4b27      	ldr	r3, [pc, #156]	; (8006f68 <vTaskSwitchContext+0xac>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ed0:	e041      	b.n	8006f56 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006ed2:	4b25      	ldr	r3, [pc, #148]	; (8006f68 <vTaskSwitchContext+0xac>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed8:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <vTaskSwitchContext+0xb0>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	e010      	b.n	8006f02 <vTaskSwitchContext+0x46>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <vTaskSwitchContext+0x40>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	607b      	str	r3, [r7, #4]
}
 8006ef8:	bf00      	nop
 8006efa:	e7fe      	b.n	8006efa <vTaskSwitchContext+0x3e>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	491b      	ldr	r1, [pc, #108]	; (8006f70 <vTaskSwitchContext+0xb4>)
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0e4      	beq.n	8006ee0 <vTaskSwitchContext+0x24>
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <vTaskSwitchContext+0xb4>)
 8006f22:	4413      	add	r3, r2
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	605a      	str	r2, [r3, #4]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	3308      	adds	r3, #8
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d104      	bne.n	8006f46 <vTaskSwitchContext+0x8a>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	605a      	str	r2, [r3, #4]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <vTaskSwitchContext+0xb8>)
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	4a06      	ldr	r2, [pc, #24]	; (8006f6c <vTaskSwitchContext+0xb0>)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6013      	str	r3, [r2, #0]
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000fb8 	.word	0x20000fb8
 8006f68:	20000fa4 	.word	0x20000fa4
 8006f6c:	20000f98 	.word	0x20000f98
 8006f70:	20000ac0 	.word	0x20000ac0
 8006f74:	20000abc 	.word	0x20000abc

08006f78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	60fb      	str	r3, [r7, #12]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f9e:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <vTaskPlaceOnEventList+0x44>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fe fbf3 	bl	8005792 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fac:	2101      	movs	r1, #1
 8006fae:	6838      	ldr	r0, [r7, #0]
 8006fb0:	f000 fb8a 	bl	80076c8 <prvAddCurrentTaskToDelayedList>
}
 8006fb4:	bf00      	nop
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20000abc 	.word	0x20000abc

08006fc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	617b      	str	r3, [r7, #20]
}
 8006fe4:	bf00      	nop
 8006fe6:	e7fe      	b.n	8006fe6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3318      	adds	r3, #24
 8006fee:	4619      	mov	r1, r3
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7fe fbaa 	bl	800574a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007000:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	68b8      	ldr	r0, [r7, #8]
 8007006:	f000 fb5f 	bl	80076c8 <prvAddCurrentTaskToDelayedList>
	}
 800700a:	bf00      	nop
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000abc 	.word	0x20000abc

08007018 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	60fb      	str	r3, [r7, #12]
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	3318      	adds	r3, #24
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe fbdb 	bl	8005804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800704e:	4b1e      	ldr	r3, [pc, #120]	; (80070c8 <xTaskRemoveFromEventList+0xb0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d11d      	bne.n	8007092 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	3304      	adds	r3, #4
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fbd2 	bl	8005804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007064:	4b19      	ldr	r3, [pc, #100]	; (80070cc <xTaskRemoveFromEventList+0xb4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d903      	bls.n	8007074 <xTaskRemoveFromEventList+0x5c>
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	4a16      	ldr	r2, [pc, #88]	; (80070cc <xTaskRemoveFromEventList+0xb4>)
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4a13      	ldr	r2, [pc, #76]	; (80070d0 <xTaskRemoveFromEventList+0xb8>)
 8007082:	441a      	add	r2, r3
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	3304      	adds	r3, #4
 8007088:	4619      	mov	r1, r3
 800708a:	4610      	mov	r0, r2
 800708c:	f7fe fb5d 	bl	800574a <vListInsertEnd>
 8007090:	e005      	b.n	800709e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	3318      	adds	r3, #24
 8007096:	4619      	mov	r1, r3
 8007098:	480e      	ldr	r0, [pc, #56]	; (80070d4 <xTaskRemoveFromEventList+0xbc>)
 800709a:	f7fe fb56 	bl	800574a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a2:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <xTaskRemoveFromEventList+0xc0>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d905      	bls.n	80070b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070b0:	4b0a      	ldr	r3, [pc, #40]	; (80070dc <xTaskRemoveFromEventList+0xc4>)
 80070b2:	2201      	movs	r2, #1
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	e001      	b.n	80070bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070bc:	697b      	ldr	r3, [r7, #20]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000fb8 	.word	0x20000fb8
 80070cc:	20000f98 	.word	0x20000f98
 80070d0:	20000ac0 	.word	0x20000ac0
 80070d4:	20000f50 	.word	0x20000f50
 80070d8:	20000abc 	.word	0x20000abc
 80070dc:	20000fa4 	.word	0x20000fa4

080070e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070e8:	4b06      	ldr	r3, [pc, #24]	; (8007104 <vTaskInternalSetTimeOutState+0x24>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070f0:	4b05      	ldr	r3, [pc, #20]	; (8007108 <vTaskInternalSetTimeOutState+0x28>)
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	605a      	str	r2, [r3, #4]
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	20000fa8 	.word	0x20000fa8
 8007108:	20000f94 	.word	0x20000f94

0800710c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	613b      	str	r3, [r7, #16]
}
 800712e:	bf00      	nop
 8007130:	e7fe      	b.n	8007130 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	60fb      	str	r3, [r7, #12]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800714e:	f000 ff89 	bl	8008064 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007152:	4b1d      	ldr	r3, [pc, #116]	; (80071c8 <xTaskCheckForTimeOut+0xbc>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800716a:	d102      	bne.n	8007172 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800716c:	2300      	movs	r3, #0
 800716e:	61fb      	str	r3, [r7, #28]
 8007170:	e023      	b.n	80071ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	4b15      	ldr	r3, [pc, #84]	; (80071cc <xTaskCheckForTimeOut+0xc0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d007      	beq.n	800718e <xTaskCheckForTimeOut+0x82>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	429a      	cmp	r2, r3
 8007186:	d302      	bcc.n	800718e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007188:	2301      	movs	r3, #1
 800718a:	61fb      	str	r3, [r7, #28]
 800718c:	e015      	b.n	80071ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	429a      	cmp	r2, r3
 8007196:	d20b      	bcs.n	80071b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff ff9b 	bl	80070e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61fb      	str	r3, [r7, #28]
 80071ae:	e004      	b.n	80071ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071b6:	2301      	movs	r3, #1
 80071b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071ba:	f000 ff83 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 80071be:	69fb      	ldr	r3, [r7, #28]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3720      	adds	r7, #32
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20000f94 	.word	0x20000f94
 80071cc:	20000fa8 	.word	0x20000fa8

080071d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <vTaskMissedYield+0x14>)
 80071d6:	2201      	movs	r2, #1
 80071d8:	601a      	str	r2, [r3, #0]
}
 80071da:	bf00      	nop
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	20000fa4 	.word	0x20000fa4

080071e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071f0:	f000 f852 	bl	8007298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <prvIdleTask+0x28>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d9f9      	bls.n	80071f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <prvIdleTask+0x2c>)
 80071fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800720c:	e7f0      	b.n	80071f0 <prvIdleTask+0x8>
 800720e:	bf00      	nop
 8007210:	20000ac0 	.word	0x20000ac0
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800721e:	2300      	movs	r3, #0
 8007220:	607b      	str	r3, [r7, #4]
 8007222:	e00c      	b.n	800723e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4a12      	ldr	r2, [pc, #72]	; (8007278 <prvInitialiseTaskLists+0x60>)
 8007230:	4413      	add	r3, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fa5c 	bl	80056f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3301      	adds	r3, #1
 800723c:	607b      	str	r3, [r7, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b37      	cmp	r3, #55	; 0x37
 8007242:	d9ef      	bls.n	8007224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007244:	480d      	ldr	r0, [pc, #52]	; (800727c <prvInitialiseTaskLists+0x64>)
 8007246:	f7fe fa53 	bl	80056f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800724a:	480d      	ldr	r0, [pc, #52]	; (8007280 <prvInitialiseTaskLists+0x68>)
 800724c:	f7fe fa50 	bl	80056f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007250:	480c      	ldr	r0, [pc, #48]	; (8007284 <prvInitialiseTaskLists+0x6c>)
 8007252:	f7fe fa4d 	bl	80056f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007256:	480c      	ldr	r0, [pc, #48]	; (8007288 <prvInitialiseTaskLists+0x70>)
 8007258:	f7fe fa4a 	bl	80056f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800725c:	480b      	ldr	r0, [pc, #44]	; (800728c <prvInitialiseTaskLists+0x74>)
 800725e:	f7fe fa47 	bl	80056f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007262:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <prvInitialiseTaskLists+0x78>)
 8007264:	4a05      	ldr	r2, [pc, #20]	; (800727c <prvInitialiseTaskLists+0x64>)
 8007266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <prvInitialiseTaskLists+0x7c>)
 800726a:	4a05      	ldr	r2, [pc, #20]	; (8007280 <prvInitialiseTaskLists+0x68>)
 800726c:	601a      	str	r2, [r3, #0]
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000ac0 	.word	0x20000ac0
 800727c:	20000f20 	.word	0x20000f20
 8007280:	20000f34 	.word	0x20000f34
 8007284:	20000f50 	.word	0x20000f50
 8007288:	20000f64 	.word	0x20000f64
 800728c:	20000f7c 	.word	0x20000f7c
 8007290:	20000f48 	.word	0x20000f48
 8007294:	20000f4c 	.word	0x20000f4c

08007298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800729e:	e019      	b.n	80072d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072a0:	f000 fee0 	bl	8008064 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a4:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <prvCheckTasksWaitingTermination+0x50>)
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe faa7 	bl	8005804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072b6:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <prvCheckTasksWaitingTermination+0x54>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	4a0b      	ldr	r2, [pc, #44]	; (80072ec <prvCheckTasksWaitingTermination+0x54>)
 80072be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <prvCheckTasksWaitingTermination+0x58>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	4a0a      	ldr	r2, [pc, #40]	; (80072f0 <prvCheckTasksWaitingTermination+0x58>)
 80072c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072ca:	f000 fefb 	bl	80080c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f810 	bl	80072f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <prvCheckTasksWaitingTermination+0x58>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e1      	bne.n	80072a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000f64 	.word	0x20000f64
 80072ec:	20000f90 	.word	0x20000f90
 80072f0:	20000f78 	.word	0x20000f78

080072f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007302:	2b00      	cmp	r3, #0
 8007304:	d108      	bne.n	8007318 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	4618      	mov	r0, r3
 800730c:	f001 f898 	bl	8008440 <vPortFree>
				vPortFree( pxTCB );
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 f895 	bl	8008440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007316:	e018      	b.n	800734a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800731e:	2b01      	cmp	r3, #1
 8007320:	d103      	bne.n	800732a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 f88c 	bl	8008440 <vPortFree>
	}
 8007328:	e00f      	b.n	800734a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007330:	2b02      	cmp	r3, #2
 8007332:	d00a      	beq.n	800734a <prvDeleteTCB+0x56>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	60fb      	str	r3, [r7, #12]
}
 8007346:	bf00      	nop
 8007348:	e7fe      	b.n	8007348 <prvDeleteTCB+0x54>
	}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800735a:	4b0c      	ldr	r3, [pc, #48]	; (800738c <prvResetNextTaskUnblockTime+0x38>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007364:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <prvResetNextTaskUnblockTime+0x3c>)
 8007366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800736a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800736c:	e008      	b.n	8007380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <prvResetNextTaskUnblockTime+0x38>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4a04      	ldr	r2, [pc, #16]	; (8007390 <prvResetNextTaskUnblockTime+0x3c>)
 800737e:	6013      	str	r3, [r2, #0]
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	20000f48 	.word	0x20000f48
 8007390:	20000fb0 	.word	0x20000fb0

08007394 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800739a:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80073a0:	687b      	ldr	r3, [r7, #4]
	}
 80073a2:	4618      	mov	r0, r3
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20000abc 	.word	0x20000abc

080073b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073ba:	4b0b      	ldr	r3, [pc, #44]	; (80073e8 <xTaskGetSchedulerState+0x34>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073c2:	2301      	movs	r3, #1
 80073c4:	607b      	str	r3, [r7, #4]
 80073c6:	e008      	b.n	80073da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073c8:	4b08      	ldr	r3, [pc, #32]	; (80073ec <xTaskGetSchedulerState+0x38>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073d0:	2302      	movs	r3, #2
 80073d2:	607b      	str	r3, [r7, #4]
 80073d4:	e001      	b.n	80073da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073d6:	2300      	movs	r3, #0
 80073d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073da:	687b      	ldr	r3, [r7, #4]
	}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	20000f9c 	.word	0x20000f9c
 80073ec:	20000fb8 	.word	0x20000fb8

080073f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d051      	beq.n	80074aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740a:	4b2a      	ldr	r3, [pc, #168]	; (80074b4 <xTaskPriorityInherit+0xc4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	429a      	cmp	r2, r3
 8007412:	d241      	bcs.n	8007498 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	db06      	blt.n	800742a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741c:	4b25      	ldr	r3, [pc, #148]	; (80074b4 <xTaskPriorityInherit+0xc4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	6959      	ldr	r1, [r3, #20]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4a1f      	ldr	r2, [pc, #124]	; (80074b8 <xTaskPriorityInherit+0xc8>)
 800743c:	4413      	add	r3, r2
 800743e:	4299      	cmp	r1, r3
 8007440:	d122      	bne.n	8007488 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	3304      	adds	r3, #4
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe f9dc 	bl	8005804 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800744c:	4b19      	ldr	r3, [pc, #100]	; (80074b4 <xTaskPriorityInherit+0xc4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745a:	4b18      	ldr	r3, [pc, #96]	; (80074bc <xTaskPriorityInherit+0xcc>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d903      	bls.n	800746a <xTaskPriorityInherit+0x7a>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	4a15      	ldr	r2, [pc, #84]	; (80074bc <xTaskPriorityInherit+0xcc>)
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4a10      	ldr	r2, [pc, #64]	; (80074b8 <xTaskPriorityInherit+0xc8>)
 8007478:	441a      	add	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	3304      	adds	r3, #4
 800747e:	4619      	mov	r1, r3
 8007480:	4610      	mov	r0, r2
 8007482:	f7fe f962 	bl	800574a <vListInsertEnd>
 8007486:	e004      	b.n	8007492 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007488:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <xTaskPriorityInherit+0xc4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007492:	2301      	movs	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e008      	b.n	80074aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <xTaskPriorityInherit+0xc4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d201      	bcs.n	80074aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074a6:	2301      	movs	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074aa:	68fb      	ldr	r3, [r7, #12]
	}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000abc 	.word	0x20000abc
 80074b8:	20000ac0 	.word	0x20000ac0
 80074bc:	20000f98 	.word	0x20000f98

080074c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d056      	beq.n	8007584 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074d6:	4b2e      	ldr	r3, [pc, #184]	; (8007590 <xTaskPriorityDisinherit+0xd0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d00a      	beq.n	80074f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	60fb      	str	r3, [r7, #12]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	60bb      	str	r3, [r7, #8]
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007518:	1e5a      	subs	r2, r3, #1
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007526:	429a      	cmp	r2, r3
 8007528:	d02c      	beq.n	8007584 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752e:	2b00      	cmp	r3, #0
 8007530:	d128      	bne.n	8007584 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	3304      	adds	r3, #4
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe f964 	bl	8005804 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	4b0f      	ldr	r3, [pc, #60]	; (8007594 <xTaskPriorityDisinherit+0xd4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d903      	bls.n	8007564 <xTaskPriorityDisinherit+0xa4>
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	4a0c      	ldr	r2, [pc, #48]	; (8007594 <xTaskPriorityDisinherit+0xd4>)
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4a09      	ldr	r2, [pc, #36]	; (8007598 <xTaskPriorityDisinherit+0xd8>)
 8007572:	441a      	add	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4610      	mov	r0, r2
 800757c:	f7fe f8e5 	bl	800574a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007580:	2301      	movs	r3, #1
 8007582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007584:	697b      	ldr	r3, [r7, #20]
	}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000abc 	.word	0x20000abc
 8007594:	20000f98 	.word	0x20000f98
 8007598:	20000ac0 	.word	0x20000ac0

0800759c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075aa:	2301      	movs	r3, #1
 80075ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d06a      	beq.n	800768a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10a      	bne.n	80075d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60fb      	str	r3, [r7, #12]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d902      	bls.n	80075e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	e002      	b.n	80075e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d04b      	beq.n	800768a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d146      	bne.n	800768a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075fc:	4b25      	ldr	r3, [pc, #148]	; (8007694 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	429a      	cmp	r2, r3
 8007604:	d10a      	bne.n	800761c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	60bb      	str	r3, [r7, #8]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	db04      	blt.n	800763a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	6959      	ldr	r1, [r3, #20]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4613      	mov	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4a13      	ldr	r2, [pc, #76]	; (8007698 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800764a:	4413      	add	r3, r2
 800764c:	4299      	cmp	r1, r3
 800764e:	d11c      	bne.n	800768a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	3304      	adds	r3, #4
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe f8d5 	bl	8005804 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765e:	4b0f      	ldr	r3, [pc, #60]	; (800769c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d903      	bls.n	800766e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	4a0c      	ldr	r2, [pc, #48]	; (800769c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4a07      	ldr	r2, [pc, #28]	; (8007698 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800767c:	441a      	add	r2, r3
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	3304      	adds	r3, #4
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f7fe f860 	bl	800574a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800768a:	bf00      	nop
 800768c:	3720      	adds	r7, #32
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20000abc 	.word	0x20000abc
 8007698:	20000ac0 	.word	0x20000ac0
 800769c:	20000f98 	.word	0x20000f98

080076a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80076ac:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076b2:	3201      	adds	r2, #1
 80076b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80076b6:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80076b8:	681b      	ldr	r3, [r3, #0]
	}
 80076ba:	4618      	mov	r0, r3
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	20000abc 	.word	0x20000abc

080076c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076d2:	4b21      	ldr	r3, [pc, #132]	; (8007758 <prvAddCurrentTaskToDelayedList+0x90>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076d8:	4b20      	ldr	r3, [pc, #128]	; (800775c <prvAddCurrentTaskToDelayedList+0x94>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3304      	adds	r3, #4
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe f890 	bl	8005804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ea:	d10a      	bne.n	8007702 <prvAddCurrentTaskToDelayedList+0x3a>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d007      	beq.n	8007702 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076f2:	4b1a      	ldr	r3, [pc, #104]	; (800775c <prvAddCurrentTaskToDelayedList+0x94>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4819      	ldr	r0, [pc, #100]	; (8007760 <prvAddCurrentTaskToDelayedList+0x98>)
 80076fc:	f7fe f825 	bl	800574a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007700:	e026      	b.n	8007750 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4413      	add	r3, r2
 8007708:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800770a:	4b14      	ldr	r3, [pc, #80]	; (800775c <prvAddCurrentTaskToDelayedList+0x94>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	429a      	cmp	r2, r3
 8007718:	d209      	bcs.n	800772e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <prvAddCurrentTaskToDelayedList+0x9c>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	4b0f      	ldr	r3, [pc, #60]	; (800775c <prvAddCurrentTaskToDelayedList+0x94>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3304      	adds	r3, #4
 8007724:	4619      	mov	r1, r3
 8007726:	4610      	mov	r0, r2
 8007728:	f7fe f833 	bl	8005792 <vListInsert>
}
 800772c:	e010      	b.n	8007750 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800772e:	4b0e      	ldr	r3, [pc, #56]	; (8007768 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b0a      	ldr	r3, [pc, #40]	; (800775c <prvAddCurrentTaskToDelayedList+0x94>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3304      	adds	r3, #4
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f7fe f829 	bl	8005792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	429a      	cmp	r2, r3
 8007748:	d202      	bcs.n	8007750 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800774a:	4a08      	ldr	r2, [pc, #32]	; (800776c <prvAddCurrentTaskToDelayedList+0xa4>)
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	6013      	str	r3, [r2, #0]
}
 8007750:	bf00      	nop
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	20000f94 	.word	0x20000f94
 800775c:	20000abc 	.word	0x20000abc
 8007760:	20000f7c 	.word	0x20000f7c
 8007764:	20000f4c 	.word	0x20000f4c
 8007768:	20000f48 	.word	0x20000f48
 800776c:	20000fb0 	.word	0x20000fb0

08007770 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08a      	sub	sp, #40	; 0x28
 8007774:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800777a:	f000 fb07 	bl	8007d8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800777e:	4b1c      	ldr	r3, [pc, #112]	; (80077f0 <xTimerCreateTimerTask+0x80>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d021      	beq.n	80077ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800778a:	2300      	movs	r3, #0
 800778c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800778e:	1d3a      	adds	r2, r7, #4
 8007790:	f107 0108 	add.w	r1, r7, #8
 8007794:	f107 030c 	add.w	r3, r7, #12
 8007798:	4618      	mov	r0, r3
 800779a:	f7fd ff8f 	bl	80056bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	9202      	str	r2, [sp, #8]
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	2302      	movs	r3, #2
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	2300      	movs	r3, #0
 80077ae:	460a      	mov	r2, r1
 80077b0:	4910      	ldr	r1, [pc, #64]	; (80077f4 <xTimerCreateTimerTask+0x84>)
 80077b2:	4811      	ldr	r0, [pc, #68]	; (80077f8 <xTimerCreateTimerTask+0x88>)
 80077b4:	f7fe ffd0 	bl	8006758 <xTaskCreateStatic>
 80077b8:	4603      	mov	r3, r0
 80077ba:	4a10      	ldr	r2, [pc, #64]	; (80077fc <xTimerCreateTimerTask+0x8c>)
 80077bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077be:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <xTimerCreateTimerTask+0x8c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077c6:	2301      	movs	r3, #1
 80077c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	613b      	str	r3, [r7, #16]
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077e6:	697b      	ldr	r3, [r7, #20]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000fec 	.word	0x20000fec
 80077f4:	0800d1f8 	.word	0x0800d1f8
 80077f8:	08007935 	.word	0x08007935
 80077fc:	20000ff0 	.word	0x20000ff0

08007800 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	; 0x28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800780e:	2300      	movs	r3, #0
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	623b      	str	r3, [r7, #32]
}
 800782a:	bf00      	nop
 800782c:	e7fe      	b.n	800782c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800782e:	4b1a      	ldr	r3, [pc, #104]	; (8007898 <xTimerGenericCommand+0x98>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d02a      	beq.n	800788c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b05      	cmp	r3, #5
 8007846:	dc18      	bgt.n	800787a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007848:	f7ff fdb4 	bl	80073b4 <xTaskGetSchedulerState>
 800784c:	4603      	mov	r3, r0
 800784e:	2b02      	cmp	r3, #2
 8007850:	d109      	bne.n	8007866 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007852:	4b11      	ldr	r3, [pc, #68]	; (8007898 <xTimerGenericCommand+0x98>)
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	f107 0110 	add.w	r1, r7, #16
 800785a:	2300      	movs	r3, #0
 800785c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785e:	f7fe f9ef 	bl	8005c40 <xQueueGenericSend>
 8007862:	6278      	str	r0, [r7, #36]	; 0x24
 8007864:	e012      	b.n	800788c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <xTimerGenericCommand+0x98>)
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	f107 0110 	add.w	r1, r7, #16
 800786e:	2300      	movs	r3, #0
 8007870:	2200      	movs	r2, #0
 8007872:	f7fe f9e5 	bl	8005c40 <xQueueGenericSend>
 8007876:	6278      	str	r0, [r7, #36]	; 0x24
 8007878:	e008      	b.n	800788c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800787a:	4b07      	ldr	r3, [pc, #28]	; (8007898 <xTimerGenericCommand+0x98>)
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	f107 0110 	add.w	r1, r7, #16
 8007882:	2300      	movs	r3, #0
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	f7fe fad9 	bl	8005e3c <xQueueGenericSendFromISR>
 800788a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800788e:	4618      	mov	r0, r3
 8007890:	3728      	adds	r7, #40	; 0x28
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000fec 	.word	0x20000fec

0800789c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a6:	4b22      	ldr	r3, [pc, #136]	; (8007930 <prvProcessExpiredTimer+0x94>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fd ffa5 	bl	8005804 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d022      	beq.n	800790e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	699a      	ldr	r2, [r3, #24]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	18d1      	adds	r1, r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	6978      	ldr	r0, [r7, #20]
 80078d6:	f000 f8d1 	bl	8007a7c <prvInsertTimerInActiveList>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01f      	beq.n	8007920 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078e0:	2300      	movs	r3, #0
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	2300      	movs	r3, #0
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	2100      	movs	r1, #0
 80078ea:	6978      	ldr	r0, [r7, #20]
 80078ec:	f7ff ff88 	bl	8007800 <xTimerGenericCommand>
 80078f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d113      	bne.n	8007920 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	60fb      	str	r3, [r7, #12]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	b2da      	uxtb	r2, r3
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	6978      	ldr	r0, [r7, #20]
 8007926:	4798      	blx	r3
}
 8007928:	bf00      	nop
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000fe4 	.word	0x20000fe4

08007934 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800793c:	f107 0308 	add.w	r3, r7, #8
 8007940:	4618      	mov	r0, r3
 8007942:	f000 f857 	bl	80079f4 <prvGetNextExpireTime>
 8007946:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4619      	mov	r1, r3
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 f803 	bl	8007958 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007952:	f000 f8d5 	bl	8007b00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007956:	e7f1      	b.n	800793c <prvTimerTask+0x8>

08007958 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007962:	f7ff f935 	bl	8006bd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007966:	f107 0308 	add.w	r3, r7, #8
 800796a:	4618      	mov	r0, r3
 800796c:	f000 f866 	bl	8007a3c <prvSampleTimeNow>
 8007970:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d130      	bne.n	80079da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <prvProcessTimerOrBlockTask+0x3c>
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	429a      	cmp	r2, r3
 8007984:	d806      	bhi.n	8007994 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007986:	f7ff f931 	bl	8006bec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff ff85 	bl	800789c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007992:	e024      	b.n	80079de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d008      	beq.n	80079ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800799a:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <prvProcessTimerOrBlockTask+0x90>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <prvProcessTimerOrBlockTask+0x50>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <prvProcessTimerOrBlockTask+0x52>
 80079a8:	2300      	movs	r3, #0
 80079aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079ac:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <prvProcessTimerOrBlockTask+0x94>)
 80079ae:	6818      	ldr	r0, [r3, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	4619      	mov	r1, r3
 80079ba:	f7fe fe99 	bl	80066f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079be:	f7ff f915 	bl	8006bec <xTaskResumeAll>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079c8:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <prvProcessTimerOrBlockTask+0x98>)
 80079ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	f3bf 8f6f 	isb	sy
}
 80079d8:	e001      	b.n	80079de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079da:	f7ff f907 	bl	8006bec <xTaskResumeAll>
}
 80079de:	bf00      	nop
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000fe8 	.word	0x20000fe8
 80079ec:	20000fec 	.word	0x20000fec
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079fc:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <prvGetNextExpireTime+0x44>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <prvGetNextExpireTime+0x16>
 8007a06:	2201      	movs	r2, #1
 8007a08:	e000      	b.n	8007a0c <prvGetNextExpireTime+0x18>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <prvGetNextExpireTime+0x44>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	e001      	b.n	8007a28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a28:	68fb      	ldr	r3, [r7, #12]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	20000fe4 	.word	0x20000fe4

08007a3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a44:	f7ff f970 	bl	8006d28 <xTaskGetTickCount>
 8007a48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <prvSampleTimeNow+0x3c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d205      	bcs.n	8007a60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a54:	f000 f936 	bl	8007cc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	e002      	b.n	8007a66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a66:	4a04      	ldr	r2, [pc, #16]	; (8007a78 <prvSampleTimeNow+0x3c>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000ff4 	.word	0x20000ff4

08007a7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d812      	bhi.n	8007ac8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	1ad2      	subs	r2, r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d302      	bcc.n	8007ab6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	e01b      	b.n	8007aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <prvInsertTimerInActiveList+0x7c>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f7fd fe66 	bl	8005792 <vListInsert>
 8007ac6:	e012      	b.n	8007aee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d206      	bcs.n	8007ade <prvInsertTimerInActiveList+0x62>
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d302      	bcc.n	8007ade <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	e007      	b.n	8007aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ade:	4b07      	ldr	r3, [pc, #28]	; (8007afc <prvInsertTimerInActiveList+0x80>)
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f7fd fe52 	bl	8005792 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007aee:	697b      	ldr	r3, [r7, #20]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20000fe8 	.word	0x20000fe8
 8007afc:	20000fe4 	.word	0x20000fe4

08007b00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08e      	sub	sp, #56	; 0x38
 8007b04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b06:	e0ca      	b.n	8007c9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	da18      	bge.n	8007b40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b0e:	1d3b      	adds	r3, r7, #4
 8007b10:	3304      	adds	r3, #4
 8007b12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	61fb      	str	r3, [r7, #28]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b36:	6850      	ldr	r0, [r2, #4]
 8007b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b3a:	6892      	ldr	r2, [r2, #8]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f2c0 80aa 	blt.w	8007c9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d004      	beq.n	8007b5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fd fe53 	bl	8005804 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b5e:	463b      	mov	r3, r7
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff ff6b 	bl	8007a3c <prvSampleTimeNow>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b09      	cmp	r3, #9
 8007b6c:	f200 8097 	bhi.w	8007c9e <prvProcessReceivedCommands+0x19e>
 8007b70:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <prvProcessReceivedCommands+0x78>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007ba1 	.word	0x08007ba1
 8007b7c:	08007ba1 	.word	0x08007ba1
 8007b80:	08007ba1 	.word	0x08007ba1
 8007b84:	08007c15 	.word	0x08007c15
 8007b88:	08007c29 	.word	0x08007c29
 8007b8c:	08007c73 	.word	0x08007c73
 8007b90:	08007ba1 	.word	0x08007ba1
 8007b94:	08007ba1 	.word	0x08007ba1
 8007b98:	08007c15 	.word	0x08007c15
 8007b9c:	08007c29 	.word	0x08007c29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ba6:	f043 0301 	orr.w	r3, r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	18d1      	adds	r1, r2, r3
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc0:	f7ff ff5c 	bl	8007a7c <prvInsertTimerInActiveList>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d069      	beq.n	8007c9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d05e      	beq.n	8007c9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	441a      	add	r2, r3
 8007be8:	2300      	movs	r3, #0
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	2300      	movs	r3, #0
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf2:	f7ff fe05 	bl	8007800 <xTimerGenericCommand>
 8007bf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d14f      	bne.n	8007c9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	61bb      	str	r3, [r7, #24]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c1a:	f023 0301 	bic.w	r3, r3, #1
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c26:	e03a      	b.n	8007c9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c2e:	f043 0301 	orr.w	r3, r3, #1
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	617b      	str	r3, [r7, #20]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	18d1      	adds	r1, r2, r3
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c6c:	f7ff ff06 	bl	8007a7c <prvInsertTimerInActiveList>
					break;
 8007c70:	e015      	b.n	8007c9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d103      	bne.n	8007c88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c82:	f000 fbdd 	bl	8008440 <vPortFree>
 8007c86:	e00a      	b.n	8007c9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c8e:	f023 0301 	bic.w	r3, r3, #1
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c9a:	e000      	b.n	8007c9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c9e:	4b08      	ldr	r3, [pc, #32]	; (8007cc0 <prvProcessReceivedCommands+0x1c0>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	1d39      	adds	r1, r7, #4
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe f964 	bl	8005f74 <xQueueReceive>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f47f af2a 	bne.w	8007b08 <prvProcessReceivedCommands+0x8>
	}
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop
 8007cb8:	3730      	adds	r7, #48	; 0x30
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000fec 	.word	0x20000fec

08007cc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cca:	e048      	b.n	8007d5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ccc:	4b2d      	ldr	r3, [pc, #180]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd6:	4b2b      	ldr	r3, [pc, #172]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fd fd8d 	bl	8005804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d02e      	beq.n	8007d5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4413      	add	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d90e      	bls.n	8007d30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d1e:	4b19      	ldr	r3, [pc, #100]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f7fd fd32 	bl	8005792 <vListInsert>
 8007d2e:	e016      	b.n	8007d5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d30:	2300      	movs	r3, #0
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	2300      	movs	r3, #0
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	2100      	movs	r1, #0
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff fd60 	bl	8007800 <xTimerGenericCommand>
 8007d40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	603b      	str	r3, [r7, #0]
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1b1      	bne.n	8007ccc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d68:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d6e:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <prvSwitchTimerLists+0xc4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a04      	ldr	r2, [pc, #16]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007d74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d76:	4a04      	ldr	r2, [pc, #16]	; (8007d88 <prvSwitchTimerLists+0xc4>)
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	6013      	str	r3, [r2, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20000fe4 	.word	0x20000fe4
 8007d88:	20000fe8 	.word	0x20000fe8

08007d8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d92:	f000 f967 	bl	8008064 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d96:	4b15      	ldr	r3, [pc, #84]	; (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d120      	bne.n	8007de0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d9e:	4814      	ldr	r0, [pc, #80]	; (8007df0 <prvCheckForValidListAndQueue+0x64>)
 8007da0:	f7fd fca6 	bl	80056f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007da4:	4813      	ldr	r0, [pc, #76]	; (8007df4 <prvCheckForValidListAndQueue+0x68>)
 8007da6:	f7fd fca3 	bl	80056f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007daa:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <prvCheckForValidListAndQueue+0x6c>)
 8007dac:	4a10      	ldr	r2, [pc, #64]	; (8007df0 <prvCheckForValidListAndQueue+0x64>)
 8007dae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <prvCheckForValidListAndQueue+0x70>)
 8007db2:	4a10      	ldr	r2, [pc, #64]	; (8007df4 <prvCheckForValidListAndQueue+0x68>)
 8007db4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007db6:	2300      	movs	r3, #0
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4b11      	ldr	r3, [pc, #68]	; (8007e00 <prvCheckForValidListAndQueue+0x74>)
 8007dbc:	4a11      	ldr	r2, [pc, #68]	; (8007e04 <prvCheckForValidListAndQueue+0x78>)
 8007dbe:	2110      	movs	r1, #16
 8007dc0:	200a      	movs	r0, #10
 8007dc2:	f7fd fdb1 	bl	8005928 <xQueueGenericCreateStatic>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4a08      	ldr	r2, [pc, #32]	; (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007dca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007dcc:	4b07      	ldr	r3, [pc, #28]	; (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	490b      	ldr	r1, [pc, #44]	; (8007e08 <prvCheckForValidListAndQueue+0x7c>)
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fc5e 	bl	800669c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007de0:	f000 f970 	bl	80080c4 <vPortExitCritical>
}
 8007de4:	bf00      	nop
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20000fec 	.word	0x20000fec
 8007df0:	20000fbc 	.word	0x20000fbc
 8007df4:	20000fd0 	.word	0x20000fd0
 8007df8:	20000fe4 	.word	0x20000fe4
 8007dfc:	20000fe8 	.word	0x20000fe8
 8007e00:	20001098 	.word	0x20001098
 8007e04:	20000ff8 	.word	0x20000ff8
 8007e08:	0800d200 	.word	0x0800d200

08007e0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3b04      	subs	r3, #4
 8007e1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3b04      	subs	r3, #4
 8007e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f023 0201 	bic.w	r2, r3, #1
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3b04      	subs	r3, #4
 8007e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e3c:	4a0c      	ldr	r2, [pc, #48]	; (8007e70 <pxPortInitialiseStack+0x64>)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3b14      	subs	r3, #20
 8007e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3b04      	subs	r3, #4
 8007e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f06f 0202 	mvn.w	r2, #2
 8007e5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3b20      	subs	r3, #32
 8007e60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e62:	68fb      	ldr	r3, [r7, #12]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	08007e75 	.word	0x08007e75

08007e74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e7e:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <prvTaskExitError+0x54>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e86:	d00a      	beq.n	8007e9e <prvTaskExitError+0x2a>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	60fb      	str	r3, [r7, #12]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <prvTaskExitError+0x28>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	60bb      	str	r3, [r7, #8]
}
 8007eb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007eb2:	bf00      	nop
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0fc      	beq.n	8007eb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	2000000c 	.word	0x2000000c
 8007ecc:	00000000 	.word	0x00000000

08007ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ed0:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <pxCurrentTCBConst2>)
 8007ed2:	6819      	ldr	r1, [r3, #0]
 8007ed4:	6808      	ldr	r0, [r1, #0]
 8007ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eda:	f380 8809 	msr	PSP, r0
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	f380 8811 	msr	BASEPRI, r0
 8007eea:	4770      	bx	lr
 8007eec:	f3af 8000 	nop.w

08007ef0 <pxCurrentTCBConst2>:
 8007ef0:	20000abc 	.word	0x20000abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop

08007ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ef8:	4808      	ldr	r0, [pc, #32]	; (8007f1c <prvPortStartFirstTask+0x24>)
 8007efa:	6800      	ldr	r0, [r0, #0]
 8007efc:	6800      	ldr	r0, [r0, #0]
 8007efe:	f380 8808 	msr	MSP, r0
 8007f02:	f04f 0000 	mov.w	r0, #0
 8007f06:	f380 8814 	msr	CONTROL, r0
 8007f0a:	b662      	cpsie	i
 8007f0c:	b661      	cpsie	f
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	df00      	svc	0
 8007f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f1a:	bf00      	nop
 8007f1c:	e000ed08 	.word	0xe000ed08

08007f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f26:	4b46      	ldr	r3, [pc, #280]	; (8008040 <xPortStartScheduler+0x120>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a46      	ldr	r2, [pc, #280]	; (8008044 <xPortStartScheduler+0x124>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10a      	bne.n	8007f46 <xPortStartScheduler+0x26>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	613b      	str	r3, [r7, #16]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f46:	4b3e      	ldr	r3, [pc, #248]	; (8008040 <xPortStartScheduler+0x120>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a3f      	ldr	r2, [pc, #252]	; (8008048 <xPortStartScheduler+0x128>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d10a      	bne.n	8007f66 <xPortStartScheduler+0x46>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	60fb      	str	r3, [r7, #12]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f66:	4b39      	ldr	r3, [pc, #228]	; (800804c <xPortStartScheduler+0x12c>)
 8007f68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	22ff      	movs	r2, #255	; 0xff
 8007f76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	4b31      	ldr	r3, [pc, #196]	; (8008050 <xPortStartScheduler+0x130>)
 8007f8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f8e:	4b31      	ldr	r3, [pc, #196]	; (8008054 <xPortStartScheduler+0x134>)
 8007f90:	2207      	movs	r2, #7
 8007f92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f94:	e009      	b.n	8007faa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f96:	4b2f      	ldr	r3, [pc, #188]	; (8008054 <xPortStartScheduler+0x134>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	4a2d      	ldr	r2, [pc, #180]	; (8008054 <xPortStartScheduler+0x134>)
 8007f9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb2:	2b80      	cmp	r3, #128	; 0x80
 8007fb4:	d0ef      	beq.n	8007f96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fb6:	4b27      	ldr	r3, [pc, #156]	; (8008054 <xPortStartScheduler+0x134>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f1c3 0307 	rsb	r3, r3, #7
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d00a      	beq.n	8007fd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60bb      	str	r3, [r7, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fd8:	4b1e      	ldr	r3, [pc, #120]	; (8008054 <xPortStartScheduler+0x134>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <xPortStartScheduler+0x134>)
 8007fe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fe2:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <xPortStartScheduler+0x134>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fea:	4a1a      	ldr	r2, [pc, #104]	; (8008054 <xPortStartScheduler+0x134>)
 8007fec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ff6:	4b18      	ldr	r3, [pc, #96]	; (8008058 <xPortStartScheduler+0x138>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <xPortStartScheduler+0x138>)
 8007ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008002:	4b15      	ldr	r3, [pc, #84]	; (8008058 <xPortStartScheduler+0x138>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a14      	ldr	r2, [pc, #80]	; (8008058 <xPortStartScheduler+0x138>)
 8008008:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800800c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800800e:	f000 f8dd 	bl	80081cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008012:	4b12      	ldr	r3, [pc, #72]	; (800805c <xPortStartScheduler+0x13c>)
 8008014:	2200      	movs	r2, #0
 8008016:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008018:	f000 f8fc 	bl	8008214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800801c:	4b10      	ldr	r3, [pc, #64]	; (8008060 <xPortStartScheduler+0x140>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a0f      	ldr	r2, [pc, #60]	; (8008060 <xPortStartScheduler+0x140>)
 8008022:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008026:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008028:	f7ff ff66 	bl	8007ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800802c:	f7fe ff46 	bl	8006ebc <vTaskSwitchContext>
	prvTaskExitError();
 8008030:	f7ff ff20 	bl	8007e74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	e000ed00 	.word	0xe000ed00
 8008044:	410fc271 	.word	0x410fc271
 8008048:	410fc270 	.word	0x410fc270
 800804c:	e000e400 	.word	0xe000e400
 8008050:	200010e8 	.word	0x200010e8
 8008054:	200010ec 	.word	0x200010ec
 8008058:	e000ed20 	.word	0xe000ed20
 800805c:	2000000c 	.word	0x2000000c
 8008060:	e000ef34 	.word	0xe000ef34

08008064 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	607b      	str	r3, [r7, #4]
}
 800807c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800807e:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <vPortEnterCritical+0x58>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3301      	adds	r3, #1
 8008084:	4a0d      	ldr	r2, [pc, #52]	; (80080bc <vPortEnterCritical+0x58>)
 8008086:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008088:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <vPortEnterCritical+0x58>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10f      	bne.n	80080b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortEnterCritical+0x5c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	603b      	str	r3, [r7, #0]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <vPortEnterCritical+0x4a>
	}
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	2000000c 	.word	0x2000000c
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ca:	4b12      	ldr	r3, [pc, #72]	; (8008114 <vPortExitCritical+0x50>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <vPortExitCritical+0x24>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	607b      	str	r3, [r7, #4]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080e8:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <vPortExitCritical+0x50>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	4a09      	ldr	r2, [pc, #36]	; (8008114 <vPortExitCritical+0x50>)
 80080f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080f2:	4b08      	ldr	r3, [pc, #32]	; (8008114 <vPortExitCritical+0x50>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d105      	bne.n	8008106 <vPortExitCritical+0x42>
 80080fa:	2300      	movs	r3, #0
 80080fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	f383 8811 	msr	BASEPRI, r3
}
 8008104:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	2000000c 	.word	0x2000000c
	...

08008120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008120:	f3ef 8009 	mrs	r0, PSP
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4b15      	ldr	r3, [pc, #84]	; (8008180 <pxCurrentTCBConst>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	f01e 0f10 	tst.w	lr, #16
 8008130:	bf08      	it	eq
 8008132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813a:	6010      	str	r0, [r2, #0]
 800813c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008144:	f380 8811 	msr	BASEPRI, r0
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f7fe feb4 	bl	8006ebc <vTaskSwitchContext>
 8008154:	f04f 0000 	mov.w	r0, #0
 8008158:	f380 8811 	msr	BASEPRI, r0
 800815c:	bc09      	pop	{r0, r3}
 800815e:	6819      	ldr	r1, [r3, #0]
 8008160:	6808      	ldr	r0, [r1, #0]
 8008162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008166:	f01e 0f10 	tst.w	lr, #16
 800816a:	bf08      	it	eq
 800816c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008170:	f380 8809 	msr	PSP, r0
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	f3af 8000 	nop.w

08008180 <pxCurrentTCBConst>:
 8008180:	20000abc 	.word	0x20000abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop

08008188 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	607b      	str	r3, [r7, #4]
}
 80081a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081a2:	f7fe fdd1 	bl	8006d48 <xTaskIncrementTick>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ac:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <xPortSysTickHandler+0x40>)
 80081ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f383 8811 	msr	BASEPRI, r3
}
 80081be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	e000ed04 	.word	0xe000ed04

080081cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081d0:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <vPortSetupTimerInterrupt+0x34>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081d6:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <vPortSetupTimerInterrupt+0x38>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081dc:	4b0a      	ldr	r3, [pc, #40]	; (8008208 <vPortSetupTimerInterrupt+0x3c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	; (800820c <vPortSetupTimerInterrupt+0x40>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	099b      	lsrs	r3, r3, #6
 80081e8:	4a09      	ldr	r2, [pc, #36]	; (8008210 <vPortSetupTimerInterrupt+0x44>)
 80081ea:	3b01      	subs	r3, #1
 80081ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ee:	4b04      	ldr	r3, [pc, #16]	; (8008200 <vPortSetupTimerInterrupt+0x34>)
 80081f0:	2207      	movs	r2, #7
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	e000e010 	.word	0xe000e010
 8008204:	e000e018 	.word	0xe000e018
 8008208:	20000000 	.word	0x20000000
 800820c:	10624dd3 	.word	0x10624dd3
 8008210:	e000e014 	.word	0xe000e014

08008214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008224 <vPortEnableVFP+0x10>
 8008218:	6801      	ldr	r1, [r0, #0]
 800821a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800821e:	6001      	str	r1, [r0, #0]
 8008220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008222:	bf00      	nop
 8008224:	e000ed88 	.word	0xe000ed88

08008228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800822e:	f3ef 8305 	mrs	r3, IPSR
 8008232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b0f      	cmp	r3, #15
 8008238:	d914      	bls.n	8008264 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800823a:	4a17      	ldr	r2, [pc, #92]	; (8008298 <vPortValidateInterruptPriority+0x70>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008244:	4b15      	ldr	r3, [pc, #84]	; (800829c <vPortValidateInterruptPriority+0x74>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	7afa      	ldrb	r2, [r7, #11]
 800824a:	429a      	cmp	r2, r3
 800824c:	d20a      	bcs.n	8008264 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	607b      	str	r3, [r7, #4]
}
 8008260:	bf00      	nop
 8008262:	e7fe      	b.n	8008262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008264:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <vPortValidateInterruptPriority+0x78>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <vPortValidateInterruptPriority+0x7c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d90a      	bls.n	800828a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	603b      	str	r3, [r7, #0]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <vPortValidateInterruptPriority+0x60>
	}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	e000e3f0 	.word	0xe000e3f0
 800829c:	200010e8 	.word	0x200010e8
 80082a0:	e000ed0c 	.word	0xe000ed0c
 80082a4:	200010ec 	.word	0x200010ec

080082a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082b4:	f7fe fc8c 	bl	8006bd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082b8:	4b5b      	ldr	r3, [pc, #364]	; (8008428 <pvPortMalloc+0x180>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082c0:	f000 f920 	bl	8008504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082c4:	4b59      	ldr	r3, [pc, #356]	; (800842c <pvPortMalloc+0x184>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4013      	ands	r3, r2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8093 	bne.w	80083f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01d      	beq.n	8008314 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082d8:	2208      	movs	r2, #8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4413      	add	r3, r2
 80082de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d014      	beq.n	8008314 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f023 0307 	bic.w	r3, r3, #7
 80082f0:	3308      	adds	r3, #8
 80082f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <pvPortMalloc+0x6c>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	617b      	str	r3, [r7, #20]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d06e      	beq.n	80083f8 <pvPortMalloc+0x150>
 800831a:	4b45      	ldr	r3, [pc, #276]	; (8008430 <pvPortMalloc+0x188>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d869      	bhi.n	80083f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008324:	4b43      	ldr	r3, [pc, #268]	; (8008434 <pvPortMalloc+0x18c>)
 8008326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008328:	4b42      	ldr	r3, [pc, #264]	; (8008434 <pvPortMalloc+0x18c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800832e:	e004      	b.n	800833a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	d903      	bls.n	800834c <pvPortMalloc+0xa4>
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1f1      	bne.n	8008330 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800834c:	4b36      	ldr	r3, [pc, #216]	; (8008428 <pvPortMalloc+0x180>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008352:	429a      	cmp	r2, r3
 8008354:	d050      	beq.n	80083f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2208      	movs	r2, #8
 800835c:	4413      	add	r3, r2
 800835e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	2308      	movs	r3, #8
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	429a      	cmp	r2, r3
 8008376:	d91f      	bls.n	80083b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <pvPortMalloc+0xf8>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	613b      	str	r3, [r7, #16]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	1ad2      	subs	r2, r2, r3
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083b2:	69b8      	ldr	r0, [r7, #24]
 80083b4:	f000 f908 	bl	80085c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083b8:	4b1d      	ldr	r3, [pc, #116]	; (8008430 <pvPortMalloc+0x188>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	4a1b      	ldr	r2, [pc, #108]	; (8008430 <pvPortMalloc+0x188>)
 80083c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083c6:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <pvPortMalloc+0x188>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <pvPortMalloc+0x190>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d203      	bcs.n	80083da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083d2:	4b17      	ldr	r3, [pc, #92]	; (8008430 <pvPortMalloc+0x188>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a18      	ldr	r2, [pc, #96]	; (8008438 <pvPortMalloc+0x190>)
 80083d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <pvPortMalloc+0x184>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083ee:	4b13      	ldr	r3, [pc, #76]	; (800843c <pvPortMalloc+0x194>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3301      	adds	r3, #1
 80083f4:	4a11      	ldr	r2, [pc, #68]	; (800843c <pvPortMalloc+0x194>)
 80083f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083f8:	f7fe fbf8 	bl	8006bec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <pvPortMalloc+0x174>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60fb      	str	r3, [r7, #12]
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <pvPortMalloc+0x172>
	return pvReturn;
 800841c:	69fb      	ldr	r3, [r7, #28]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3728      	adds	r7, #40	; 0x28
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20004cf8 	.word	0x20004cf8
 800842c:	20004d0c 	.word	0x20004d0c
 8008430:	20004cfc 	.word	0x20004cfc
 8008434:	20004cf0 	.word	0x20004cf0
 8008438:	20004d00 	.word	0x20004d00
 800843c:	20004d04 	.word	0x20004d04

08008440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d04d      	beq.n	80084ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008452:	2308      	movs	r3, #8
 8008454:	425b      	negs	r3, r3
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4413      	add	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	4b24      	ldr	r3, [pc, #144]	; (80084f8 <vPortFree+0xb8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4013      	ands	r3, r2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <vPortFree+0x44>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	60fb      	str	r3, [r7, #12]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <vPortFree+0x62>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	60bb      	str	r3, [r7, #8]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <vPortFree+0xb8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4013      	ands	r3, r2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01e      	beq.n	80084ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d11a      	bne.n	80084ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <vPortFree+0xb8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	43db      	mvns	r3, r3
 80084c2:	401a      	ands	r2, r3
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084c8:	f7fe fb82 	bl	8006bd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <vPortFree+0xbc>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	4a09      	ldr	r2, [pc, #36]	; (80084fc <vPortFree+0xbc>)
 80084d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084da:	6938      	ldr	r0, [r7, #16]
 80084dc:	f000 f874 	bl	80085c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084e0:	4b07      	ldr	r3, [pc, #28]	; (8008500 <vPortFree+0xc0>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	4a06      	ldr	r2, [pc, #24]	; (8008500 <vPortFree+0xc0>)
 80084e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084ea:	f7fe fb7f 	bl	8006bec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084ee:	bf00      	nop
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20004d0c 	.word	0x20004d0c
 80084fc:	20004cfc 	.word	0x20004cfc
 8008500:	20004d08 	.word	0x20004d08

08008504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800850a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800850e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008510:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <prvHeapInit+0xac>)
 8008512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00c      	beq.n	8008538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3307      	adds	r3, #7
 8008522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	4a1f      	ldr	r2, [pc, #124]	; (80085b0 <prvHeapInit+0xac>)
 8008534:	4413      	add	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800853c:	4a1d      	ldr	r2, [pc, #116]	; (80085b4 <prvHeapInit+0xb0>)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008542:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <prvHeapInit+0xb0>)
 8008544:	2200      	movs	r2, #0
 8008546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4413      	add	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008550:	2208      	movs	r2, #8
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0307 	bic.w	r3, r3, #7
 800855e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <prvHeapInit+0xb4>)
 8008564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <prvHeapInit+0xb4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800856e:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <prvHeapInit+0xb4>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008584:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <prvHeapInit+0xb4>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	4a0a      	ldr	r2, [pc, #40]	; (80085bc <prvHeapInit+0xb8>)
 8008592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	4a09      	ldr	r2, [pc, #36]	; (80085c0 <prvHeapInit+0xbc>)
 800859a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800859c:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <prvHeapInit+0xc0>)
 800859e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085a2:	601a      	str	r2, [r3, #0]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	200010f0 	.word	0x200010f0
 80085b4:	20004cf0 	.word	0x20004cf0
 80085b8:	20004cf8 	.word	0x20004cf8
 80085bc:	20004d00 	.word	0x20004d00
 80085c0:	20004cfc 	.word	0x20004cfc
 80085c4:	20004d0c 	.word	0x20004d0c

080085c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085d0:	4b28      	ldr	r3, [pc, #160]	; (8008674 <prvInsertBlockIntoFreeList+0xac>)
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e002      	b.n	80085dc <prvInsertBlockIntoFreeList+0x14>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d8f7      	bhi.n	80085d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d108      	bne.n	800860a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	441a      	add	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	441a      	add	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d118      	bne.n	8008650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	4b15      	ldr	r3, [pc, #84]	; (8008678 <prvInsertBlockIntoFreeList+0xb0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d00d      	beq.n	8008646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	441a      	add	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	e008      	b.n	8008658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008646:	4b0c      	ldr	r3, [pc, #48]	; (8008678 <prvInsertBlockIntoFreeList+0xb0>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e003      	b.n	8008658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	429a      	cmp	r2, r3
 800865e:	d002      	beq.n	8008666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	20004cf0 	.word	0x20004cf0
 8008678:	20004cf8 	.word	0x20004cf8

0800867c <__errno>:
 800867c:	4b01      	ldr	r3, [pc, #4]	; (8008684 <__errno+0x8>)
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	20000010 	.word	0x20000010

08008688 <__libc_init_array>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	4d0d      	ldr	r5, [pc, #52]	; (80086c0 <__libc_init_array+0x38>)
 800868c:	4c0d      	ldr	r4, [pc, #52]	; (80086c4 <__libc_init_array+0x3c>)
 800868e:	1b64      	subs	r4, r4, r5
 8008690:	10a4      	asrs	r4, r4, #2
 8008692:	2600      	movs	r6, #0
 8008694:	42a6      	cmp	r6, r4
 8008696:	d109      	bne.n	80086ac <__libc_init_array+0x24>
 8008698:	4d0b      	ldr	r5, [pc, #44]	; (80086c8 <__libc_init_array+0x40>)
 800869a:	4c0c      	ldr	r4, [pc, #48]	; (80086cc <__libc_init_array+0x44>)
 800869c:	f004 fd00 	bl	800d0a0 <_init>
 80086a0:	1b64      	subs	r4, r4, r5
 80086a2:	10a4      	asrs	r4, r4, #2
 80086a4:	2600      	movs	r6, #0
 80086a6:	42a6      	cmp	r6, r4
 80086a8:	d105      	bne.n	80086b6 <__libc_init_array+0x2e>
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b0:	4798      	blx	r3
 80086b2:	3601      	adds	r6, #1
 80086b4:	e7ee      	b.n	8008694 <__libc_init_array+0xc>
 80086b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ba:	4798      	blx	r3
 80086bc:	3601      	adds	r6, #1
 80086be:	e7f2      	b.n	80086a6 <__libc_init_array+0x1e>
 80086c0:	0800d828 	.word	0x0800d828
 80086c4:	0800d828 	.word	0x0800d828
 80086c8:	0800d828 	.word	0x0800d828
 80086cc:	0800d82c 	.word	0x0800d82c

080086d0 <malloc>:
 80086d0:	4b02      	ldr	r3, [pc, #8]	; (80086dc <malloc+0xc>)
 80086d2:	4601      	mov	r1, r0
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f000 b885 	b.w	80087e4 <_malloc_r>
 80086da:	bf00      	nop
 80086dc:	20000010 	.word	0x20000010

080086e0 <memcpy>:
 80086e0:	440a      	add	r2, r1
 80086e2:	4291      	cmp	r1, r2
 80086e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80086e8:	d100      	bne.n	80086ec <memcpy+0xc>
 80086ea:	4770      	bx	lr
 80086ec:	b510      	push	{r4, lr}
 80086ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086f6:	4291      	cmp	r1, r2
 80086f8:	d1f9      	bne.n	80086ee <memcpy+0xe>
 80086fa:	bd10      	pop	{r4, pc}

080086fc <memset>:
 80086fc:	4402      	add	r2, r0
 80086fe:	4603      	mov	r3, r0
 8008700:	4293      	cmp	r3, r2
 8008702:	d100      	bne.n	8008706 <memset+0xa>
 8008704:	4770      	bx	lr
 8008706:	f803 1b01 	strb.w	r1, [r3], #1
 800870a:	e7f9      	b.n	8008700 <memset+0x4>

0800870c <_free_r>:
 800870c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800870e:	2900      	cmp	r1, #0
 8008710:	d044      	beq.n	800879c <_free_r+0x90>
 8008712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008716:	9001      	str	r0, [sp, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	f1a1 0404 	sub.w	r4, r1, #4
 800871e:	bfb8      	it	lt
 8008720:	18e4      	addlt	r4, r4, r3
 8008722:	f003 f8cf 	bl	800b8c4 <__malloc_lock>
 8008726:	4a1e      	ldr	r2, [pc, #120]	; (80087a0 <_free_r+0x94>)
 8008728:	9801      	ldr	r0, [sp, #4]
 800872a:	6813      	ldr	r3, [r2, #0]
 800872c:	b933      	cbnz	r3, 800873c <_free_r+0x30>
 800872e:	6063      	str	r3, [r4, #4]
 8008730:	6014      	str	r4, [r2, #0]
 8008732:	b003      	add	sp, #12
 8008734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008738:	f003 b8ca 	b.w	800b8d0 <__malloc_unlock>
 800873c:	42a3      	cmp	r3, r4
 800873e:	d908      	bls.n	8008752 <_free_r+0x46>
 8008740:	6825      	ldr	r5, [r4, #0]
 8008742:	1961      	adds	r1, r4, r5
 8008744:	428b      	cmp	r3, r1
 8008746:	bf01      	itttt	eq
 8008748:	6819      	ldreq	r1, [r3, #0]
 800874a:	685b      	ldreq	r3, [r3, #4]
 800874c:	1949      	addeq	r1, r1, r5
 800874e:	6021      	streq	r1, [r4, #0]
 8008750:	e7ed      	b.n	800872e <_free_r+0x22>
 8008752:	461a      	mov	r2, r3
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	b10b      	cbz	r3, 800875c <_free_r+0x50>
 8008758:	42a3      	cmp	r3, r4
 800875a:	d9fa      	bls.n	8008752 <_free_r+0x46>
 800875c:	6811      	ldr	r1, [r2, #0]
 800875e:	1855      	adds	r5, r2, r1
 8008760:	42a5      	cmp	r5, r4
 8008762:	d10b      	bne.n	800877c <_free_r+0x70>
 8008764:	6824      	ldr	r4, [r4, #0]
 8008766:	4421      	add	r1, r4
 8008768:	1854      	adds	r4, r2, r1
 800876a:	42a3      	cmp	r3, r4
 800876c:	6011      	str	r1, [r2, #0]
 800876e:	d1e0      	bne.n	8008732 <_free_r+0x26>
 8008770:	681c      	ldr	r4, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	6053      	str	r3, [r2, #4]
 8008776:	4421      	add	r1, r4
 8008778:	6011      	str	r1, [r2, #0]
 800877a:	e7da      	b.n	8008732 <_free_r+0x26>
 800877c:	d902      	bls.n	8008784 <_free_r+0x78>
 800877e:	230c      	movs	r3, #12
 8008780:	6003      	str	r3, [r0, #0]
 8008782:	e7d6      	b.n	8008732 <_free_r+0x26>
 8008784:	6825      	ldr	r5, [r4, #0]
 8008786:	1961      	adds	r1, r4, r5
 8008788:	428b      	cmp	r3, r1
 800878a:	bf04      	itt	eq
 800878c:	6819      	ldreq	r1, [r3, #0]
 800878e:	685b      	ldreq	r3, [r3, #4]
 8008790:	6063      	str	r3, [r4, #4]
 8008792:	bf04      	itt	eq
 8008794:	1949      	addeq	r1, r1, r5
 8008796:	6021      	streq	r1, [r4, #0]
 8008798:	6054      	str	r4, [r2, #4]
 800879a:	e7ca      	b.n	8008732 <_free_r+0x26>
 800879c:	b003      	add	sp, #12
 800879e:	bd30      	pop	{r4, r5, pc}
 80087a0:	20004d10 	.word	0x20004d10

080087a4 <sbrk_aligned>:
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	4e0e      	ldr	r6, [pc, #56]	; (80087e0 <sbrk_aligned+0x3c>)
 80087a8:	460c      	mov	r4, r1
 80087aa:	6831      	ldr	r1, [r6, #0]
 80087ac:	4605      	mov	r5, r0
 80087ae:	b911      	cbnz	r1, 80087b6 <sbrk_aligned+0x12>
 80087b0:	f000 ff72 	bl	8009698 <_sbrk_r>
 80087b4:	6030      	str	r0, [r6, #0]
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 ff6d 	bl	8009698 <_sbrk_r>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d00a      	beq.n	80087d8 <sbrk_aligned+0x34>
 80087c2:	1cc4      	adds	r4, r0, #3
 80087c4:	f024 0403 	bic.w	r4, r4, #3
 80087c8:	42a0      	cmp	r0, r4
 80087ca:	d007      	beq.n	80087dc <sbrk_aligned+0x38>
 80087cc:	1a21      	subs	r1, r4, r0
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 ff62 	bl	8009698 <_sbrk_r>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d101      	bne.n	80087dc <sbrk_aligned+0x38>
 80087d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80087dc:	4620      	mov	r0, r4
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	20004d14 	.word	0x20004d14

080087e4 <_malloc_r>:
 80087e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e8:	1ccd      	adds	r5, r1, #3
 80087ea:	f025 0503 	bic.w	r5, r5, #3
 80087ee:	3508      	adds	r5, #8
 80087f0:	2d0c      	cmp	r5, #12
 80087f2:	bf38      	it	cc
 80087f4:	250c      	movcc	r5, #12
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	4607      	mov	r7, r0
 80087fa:	db01      	blt.n	8008800 <_malloc_r+0x1c>
 80087fc:	42a9      	cmp	r1, r5
 80087fe:	d905      	bls.n	800880c <_malloc_r+0x28>
 8008800:	230c      	movs	r3, #12
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	2600      	movs	r6, #0
 8008806:	4630      	mov	r0, r6
 8008808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880c:	4e2e      	ldr	r6, [pc, #184]	; (80088c8 <_malloc_r+0xe4>)
 800880e:	f003 f859 	bl	800b8c4 <__malloc_lock>
 8008812:	6833      	ldr	r3, [r6, #0]
 8008814:	461c      	mov	r4, r3
 8008816:	bb34      	cbnz	r4, 8008866 <_malloc_r+0x82>
 8008818:	4629      	mov	r1, r5
 800881a:	4638      	mov	r0, r7
 800881c:	f7ff ffc2 	bl	80087a4 <sbrk_aligned>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	4604      	mov	r4, r0
 8008824:	d14d      	bne.n	80088c2 <_malloc_r+0xde>
 8008826:	6834      	ldr	r4, [r6, #0]
 8008828:	4626      	mov	r6, r4
 800882a:	2e00      	cmp	r6, #0
 800882c:	d140      	bne.n	80088b0 <_malloc_r+0xcc>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	4631      	mov	r1, r6
 8008832:	4638      	mov	r0, r7
 8008834:	eb04 0803 	add.w	r8, r4, r3
 8008838:	f000 ff2e 	bl	8009698 <_sbrk_r>
 800883c:	4580      	cmp	r8, r0
 800883e:	d13a      	bne.n	80088b6 <_malloc_r+0xd2>
 8008840:	6821      	ldr	r1, [r4, #0]
 8008842:	3503      	adds	r5, #3
 8008844:	1a6d      	subs	r5, r5, r1
 8008846:	f025 0503 	bic.w	r5, r5, #3
 800884a:	3508      	adds	r5, #8
 800884c:	2d0c      	cmp	r5, #12
 800884e:	bf38      	it	cc
 8008850:	250c      	movcc	r5, #12
 8008852:	4629      	mov	r1, r5
 8008854:	4638      	mov	r0, r7
 8008856:	f7ff ffa5 	bl	80087a4 <sbrk_aligned>
 800885a:	3001      	adds	r0, #1
 800885c:	d02b      	beq.n	80088b6 <_malloc_r+0xd2>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	442b      	add	r3, r5
 8008862:	6023      	str	r3, [r4, #0]
 8008864:	e00e      	b.n	8008884 <_malloc_r+0xa0>
 8008866:	6822      	ldr	r2, [r4, #0]
 8008868:	1b52      	subs	r2, r2, r5
 800886a:	d41e      	bmi.n	80088aa <_malloc_r+0xc6>
 800886c:	2a0b      	cmp	r2, #11
 800886e:	d916      	bls.n	800889e <_malloc_r+0xba>
 8008870:	1961      	adds	r1, r4, r5
 8008872:	42a3      	cmp	r3, r4
 8008874:	6025      	str	r5, [r4, #0]
 8008876:	bf18      	it	ne
 8008878:	6059      	strne	r1, [r3, #4]
 800887a:	6863      	ldr	r3, [r4, #4]
 800887c:	bf08      	it	eq
 800887e:	6031      	streq	r1, [r6, #0]
 8008880:	5162      	str	r2, [r4, r5]
 8008882:	604b      	str	r3, [r1, #4]
 8008884:	4638      	mov	r0, r7
 8008886:	f104 060b 	add.w	r6, r4, #11
 800888a:	f003 f821 	bl	800b8d0 <__malloc_unlock>
 800888e:	f026 0607 	bic.w	r6, r6, #7
 8008892:	1d23      	adds	r3, r4, #4
 8008894:	1af2      	subs	r2, r6, r3
 8008896:	d0b6      	beq.n	8008806 <_malloc_r+0x22>
 8008898:	1b9b      	subs	r3, r3, r6
 800889a:	50a3      	str	r3, [r4, r2]
 800889c:	e7b3      	b.n	8008806 <_malloc_r+0x22>
 800889e:	6862      	ldr	r2, [r4, #4]
 80088a0:	42a3      	cmp	r3, r4
 80088a2:	bf0c      	ite	eq
 80088a4:	6032      	streq	r2, [r6, #0]
 80088a6:	605a      	strne	r2, [r3, #4]
 80088a8:	e7ec      	b.n	8008884 <_malloc_r+0xa0>
 80088aa:	4623      	mov	r3, r4
 80088ac:	6864      	ldr	r4, [r4, #4]
 80088ae:	e7b2      	b.n	8008816 <_malloc_r+0x32>
 80088b0:	4634      	mov	r4, r6
 80088b2:	6876      	ldr	r6, [r6, #4]
 80088b4:	e7b9      	b.n	800882a <_malloc_r+0x46>
 80088b6:	230c      	movs	r3, #12
 80088b8:	603b      	str	r3, [r7, #0]
 80088ba:	4638      	mov	r0, r7
 80088bc:	f003 f808 	bl	800b8d0 <__malloc_unlock>
 80088c0:	e7a1      	b.n	8008806 <_malloc_r+0x22>
 80088c2:	6025      	str	r5, [r4, #0]
 80088c4:	e7de      	b.n	8008884 <_malloc_r+0xa0>
 80088c6:	bf00      	nop
 80088c8:	20004d10 	.word	0x20004d10

080088cc <__cvt>:
 80088cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088d0:	ec55 4b10 	vmov	r4, r5, d0
 80088d4:	2d00      	cmp	r5, #0
 80088d6:	460e      	mov	r6, r1
 80088d8:	4619      	mov	r1, r3
 80088da:	462b      	mov	r3, r5
 80088dc:	bfbb      	ittet	lt
 80088de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80088e2:	461d      	movlt	r5, r3
 80088e4:	2300      	movge	r3, #0
 80088e6:	232d      	movlt	r3, #45	; 0x2d
 80088e8:	700b      	strb	r3, [r1, #0]
 80088ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088f0:	4691      	mov	r9, r2
 80088f2:	f023 0820 	bic.w	r8, r3, #32
 80088f6:	bfbc      	itt	lt
 80088f8:	4622      	movlt	r2, r4
 80088fa:	4614      	movlt	r4, r2
 80088fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008900:	d005      	beq.n	800890e <__cvt+0x42>
 8008902:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008906:	d100      	bne.n	800890a <__cvt+0x3e>
 8008908:	3601      	adds	r6, #1
 800890a:	2102      	movs	r1, #2
 800890c:	e000      	b.n	8008910 <__cvt+0x44>
 800890e:	2103      	movs	r1, #3
 8008910:	ab03      	add	r3, sp, #12
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	ab02      	add	r3, sp, #8
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	ec45 4b10 	vmov	d0, r4, r5
 800891c:	4653      	mov	r3, sl
 800891e:	4632      	mov	r2, r6
 8008920:	f001 fe4a 	bl	800a5b8 <_dtoa_r>
 8008924:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008928:	4607      	mov	r7, r0
 800892a:	d102      	bne.n	8008932 <__cvt+0x66>
 800892c:	f019 0f01 	tst.w	r9, #1
 8008930:	d022      	beq.n	8008978 <__cvt+0xac>
 8008932:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008936:	eb07 0906 	add.w	r9, r7, r6
 800893a:	d110      	bne.n	800895e <__cvt+0x92>
 800893c:	783b      	ldrb	r3, [r7, #0]
 800893e:	2b30      	cmp	r3, #48	; 0x30
 8008940:	d10a      	bne.n	8008958 <__cvt+0x8c>
 8008942:	2200      	movs	r2, #0
 8008944:	2300      	movs	r3, #0
 8008946:	4620      	mov	r0, r4
 8008948:	4629      	mov	r1, r5
 800894a:	f7f8 f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800894e:	b918      	cbnz	r0, 8008958 <__cvt+0x8c>
 8008950:	f1c6 0601 	rsb	r6, r6, #1
 8008954:	f8ca 6000 	str.w	r6, [sl]
 8008958:	f8da 3000 	ldr.w	r3, [sl]
 800895c:	4499      	add	r9, r3
 800895e:	2200      	movs	r2, #0
 8008960:	2300      	movs	r3, #0
 8008962:	4620      	mov	r0, r4
 8008964:	4629      	mov	r1, r5
 8008966:	f7f8 f8b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800896a:	b108      	cbz	r0, 8008970 <__cvt+0xa4>
 800896c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008970:	2230      	movs	r2, #48	; 0x30
 8008972:	9b03      	ldr	r3, [sp, #12]
 8008974:	454b      	cmp	r3, r9
 8008976:	d307      	bcc.n	8008988 <__cvt+0xbc>
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800897c:	1bdb      	subs	r3, r3, r7
 800897e:	4638      	mov	r0, r7
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	b004      	add	sp, #16
 8008984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008988:	1c59      	adds	r1, r3, #1
 800898a:	9103      	str	r1, [sp, #12]
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	e7f0      	b.n	8008972 <__cvt+0xa6>

08008990 <__exponent>:
 8008990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008992:	4603      	mov	r3, r0
 8008994:	2900      	cmp	r1, #0
 8008996:	bfb8      	it	lt
 8008998:	4249      	neglt	r1, r1
 800899a:	f803 2b02 	strb.w	r2, [r3], #2
 800899e:	bfb4      	ite	lt
 80089a0:	222d      	movlt	r2, #45	; 0x2d
 80089a2:	222b      	movge	r2, #43	; 0x2b
 80089a4:	2909      	cmp	r1, #9
 80089a6:	7042      	strb	r2, [r0, #1]
 80089a8:	dd2a      	ble.n	8008a00 <__exponent+0x70>
 80089aa:	f10d 0407 	add.w	r4, sp, #7
 80089ae:	46a4      	mov	ip, r4
 80089b0:	270a      	movs	r7, #10
 80089b2:	46a6      	mov	lr, r4
 80089b4:	460a      	mov	r2, r1
 80089b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80089ba:	fb07 1516 	mls	r5, r7, r6, r1
 80089be:	3530      	adds	r5, #48	; 0x30
 80089c0:	2a63      	cmp	r2, #99	; 0x63
 80089c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80089c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80089ca:	4631      	mov	r1, r6
 80089cc:	dcf1      	bgt.n	80089b2 <__exponent+0x22>
 80089ce:	3130      	adds	r1, #48	; 0x30
 80089d0:	f1ae 0502 	sub.w	r5, lr, #2
 80089d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80089d8:	1c44      	adds	r4, r0, #1
 80089da:	4629      	mov	r1, r5
 80089dc:	4561      	cmp	r1, ip
 80089de:	d30a      	bcc.n	80089f6 <__exponent+0x66>
 80089e0:	f10d 0209 	add.w	r2, sp, #9
 80089e4:	eba2 020e 	sub.w	r2, r2, lr
 80089e8:	4565      	cmp	r5, ip
 80089ea:	bf88      	it	hi
 80089ec:	2200      	movhi	r2, #0
 80089ee:	4413      	add	r3, r2
 80089f0:	1a18      	subs	r0, r3, r0
 80089f2:	b003      	add	sp, #12
 80089f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089fe:	e7ed      	b.n	80089dc <__exponent+0x4c>
 8008a00:	2330      	movs	r3, #48	; 0x30
 8008a02:	3130      	adds	r1, #48	; 0x30
 8008a04:	7083      	strb	r3, [r0, #2]
 8008a06:	70c1      	strb	r1, [r0, #3]
 8008a08:	1d03      	adds	r3, r0, #4
 8008a0a:	e7f1      	b.n	80089f0 <__exponent+0x60>

08008a0c <_printf_float>:
 8008a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a10:	ed2d 8b02 	vpush	{d8}
 8008a14:	b08d      	sub	sp, #52	; 0x34
 8008a16:	460c      	mov	r4, r1
 8008a18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008a1c:	4616      	mov	r6, r2
 8008a1e:	461f      	mov	r7, r3
 8008a20:	4605      	mov	r5, r0
 8008a22:	f002 ff39 	bl	800b898 <_localeconv_r>
 8008a26:	f8d0 a000 	ldr.w	sl, [r0]
 8008a2a:	4650      	mov	r0, sl
 8008a2c:	f7f7 fbd8 	bl	80001e0 <strlen>
 8008a30:	2300      	movs	r3, #0
 8008a32:	930a      	str	r3, [sp, #40]	; 0x28
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	9305      	str	r3, [sp, #20]
 8008a38:	f8d8 3000 	ldr.w	r3, [r8]
 8008a3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008a40:	3307      	adds	r3, #7
 8008a42:	f023 0307 	bic.w	r3, r3, #7
 8008a46:	f103 0208 	add.w	r2, r3, #8
 8008a4a:	f8c8 2000 	str.w	r2, [r8]
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a5e:	9307      	str	r3, [sp, #28]
 8008a60:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a64:	ee08 0a10 	vmov	s16, r0
 8008a68:	4b9f      	ldr	r3, [pc, #636]	; (8008ce8 <_printf_float+0x2dc>)
 8008a6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a72:	f7f8 f863 	bl	8000b3c <__aeabi_dcmpun>
 8008a76:	bb88      	cbnz	r0, 8008adc <_printf_float+0xd0>
 8008a78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a7c:	4b9a      	ldr	r3, [pc, #616]	; (8008ce8 <_printf_float+0x2dc>)
 8008a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a82:	f7f8 f83d 	bl	8000b00 <__aeabi_dcmple>
 8008a86:	bb48      	cbnz	r0, 8008adc <_printf_float+0xd0>
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f8 f82c 	bl	8000aec <__aeabi_dcmplt>
 8008a94:	b110      	cbz	r0, 8008a9c <_printf_float+0x90>
 8008a96:	232d      	movs	r3, #45	; 0x2d
 8008a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a9c:	4b93      	ldr	r3, [pc, #588]	; (8008cec <_printf_float+0x2e0>)
 8008a9e:	4894      	ldr	r0, [pc, #592]	; (8008cf0 <_printf_float+0x2e4>)
 8008aa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008aa4:	bf94      	ite	ls
 8008aa6:	4698      	movls	r8, r3
 8008aa8:	4680      	movhi	r8, r0
 8008aaa:	2303      	movs	r3, #3
 8008aac:	6123      	str	r3, [r4, #16]
 8008aae:	9b05      	ldr	r3, [sp, #20]
 8008ab0:	f023 0204 	bic.w	r2, r3, #4
 8008ab4:	6022      	str	r2, [r4, #0]
 8008ab6:	f04f 0900 	mov.w	r9, #0
 8008aba:	9700      	str	r7, [sp, #0]
 8008abc:	4633      	mov	r3, r6
 8008abe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f000 f9d8 	bl	8008e78 <_printf_common>
 8008ac8:	3001      	adds	r0, #1
 8008aca:	f040 8090 	bne.w	8008bee <_printf_float+0x1e2>
 8008ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ad2:	b00d      	add	sp, #52	; 0x34
 8008ad4:	ecbd 8b02 	vpop	{d8}
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008adc:	4642      	mov	r2, r8
 8008ade:	464b      	mov	r3, r9
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	f7f8 f82a 	bl	8000b3c <__aeabi_dcmpun>
 8008ae8:	b140      	cbz	r0, 8008afc <_printf_float+0xf0>
 8008aea:	464b      	mov	r3, r9
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	bfbc      	itt	lt
 8008af0:	232d      	movlt	r3, #45	; 0x2d
 8008af2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008af6:	487f      	ldr	r0, [pc, #508]	; (8008cf4 <_printf_float+0x2e8>)
 8008af8:	4b7f      	ldr	r3, [pc, #508]	; (8008cf8 <_printf_float+0x2ec>)
 8008afa:	e7d1      	b.n	8008aa0 <_printf_float+0x94>
 8008afc:	6863      	ldr	r3, [r4, #4]
 8008afe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008b02:	9206      	str	r2, [sp, #24]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	d13f      	bne.n	8008b88 <_printf_float+0x17c>
 8008b08:	2306      	movs	r3, #6
 8008b0a:	6063      	str	r3, [r4, #4]
 8008b0c:	9b05      	ldr	r3, [sp, #20]
 8008b0e:	6861      	ldr	r1, [r4, #4]
 8008b10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008b14:	2300      	movs	r3, #0
 8008b16:	9303      	str	r3, [sp, #12]
 8008b18:	ab0a      	add	r3, sp, #40	; 0x28
 8008b1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008b1e:	ab09      	add	r3, sp, #36	; 0x24
 8008b20:	ec49 8b10 	vmov	d0, r8, r9
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	6022      	str	r2, [r4, #0]
 8008b28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f7ff fecd 	bl	80088cc <__cvt>
 8008b32:	9b06      	ldr	r3, [sp, #24]
 8008b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b36:	2b47      	cmp	r3, #71	; 0x47
 8008b38:	4680      	mov	r8, r0
 8008b3a:	d108      	bne.n	8008b4e <_printf_float+0x142>
 8008b3c:	1cc8      	adds	r0, r1, #3
 8008b3e:	db02      	blt.n	8008b46 <_printf_float+0x13a>
 8008b40:	6863      	ldr	r3, [r4, #4]
 8008b42:	4299      	cmp	r1, r3
 8008b44:	dd41      	ble.n	8008bca <_printf_float+0x1be>
 8008b46:	f1ab 0b02 	sub.w	fp, fp, #2
 8008b4a:	fa5f fb8b 	uxtb.w	fp, fp
 8008b4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b52:	d820      	bhi.n	8008b96 <_printf_float+0x18a>
 8008b54:	3901      	subs	r1, #1
 8008b56:	465a      	mov	r2, fp
 8008b58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b5c:	9109      	str	r1, [sp, #36]	; 0x24
 8008b5e:	f7ff ff17 	bl	8008990 <__exponent>
 8008b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b64:	1813      	adds	r3, r2, r0
 8008b66:	2a01      	cmp	r2, #1
 8008b68:	4681      	mov	r9, r0
 8008b6a:	6123      	str	r3, [r4, #16]
 8008b6c:	dc02      	bgt.n	8008b74 <_printf_float+0x168>
 8008b6e:	6822      	ldr	r2, [r4, #0]
 8008b70:	07d2      	lsls	r2, r2, #31
 8008b72:	d501      	bpl.n	8008b78 <_printf_float+0x16c>
 8008b74:	3301      	adds	r3, #1
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d09c      	beq.n	8008aba <_printf_float+0xae>
 8008b80:	232d      	movs	r3, #45	; 0x2d
 8008b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b86:	e798      	b.n	8008aba <_printf_float+0xae>
 8008b88:	9a06      	ldr	r2, [sp, #24]
 8008b8a:	2a47      	cmp	r2, #71	; 0x47
 8008b8c:	d1be      	bne.n	8008b0c <_printf_float+0x100>
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1bc      	bne.n	8008b0c <_printf_float+0x100>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e7b9      	b.n	8008b0a <_printf_float+0xfe>
 8008b96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b9a:	d118      	bne.n	8008bce <_printf_float+0x1c2>
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	6863      	ldr	r3, [r4, #4]
 8008ba0:	dd0b      	ble.n	8008bba <_printf_float+0x1ae>
 8008ba2:	6121      	str	r1, [r4, #16]
 8008ba4:	b913      	cbnz	r3, 8008bac <_printf_float+0x1a0>
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	07d0      	lsls	r0, r2, #31
 8008baa:	d502      	bpl.n	8008bb2 <_printf_float+0x1a6>
 8008bac:	3301      	adds	r3, #1
 8008bae:	440b      	add	r3, r1
 8008bb0:	6123      	str	r3, [r4, #16]
 8008bb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008bb4:	f04f 0900 	mov.w	r9, #0
 8008bb8:	e7de      	b.n	8008b78 <_printf_float+0x16c>
 8008bba:	b913      	cbnz	r3, 8008bc2 <_printf_float+0x1b6>
 8008bbc:	6822      	ldr	r2, [r4, #0]
 8008bbe:	07d2      	lsls	r2, r2, #31
 8008bc0:	d501      	bpl.n	8008bc6 <_printf_float+0x1ba>
 8008bc2:	3302      	adds	r3, #2
 8008bc4:	e7f4      	b.n	8008bb0 <_printf_float+0x1a4>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e7f2      	b.n	8008bb0 <_printf_float+0x1a4>
 8008bca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd0:	4299      	cmp	r1, r3
 8008bd2:	db05      	blt.n	8008be0 <_printf_float+0x1d4>
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	6121      	str	r1, [r4, #16]
 8008bd8:	07d8      	lsls	r0, r3, #31
 8008bda:	d5ea      	bpl.n	8008bb2 <_printf_float+0x1a6>
 8008bdc:	1c4b      	adds	r3, r1, #1
 8008bde:	e7e7      	b.n	8008bb0 <_printf_float+0x1a4>
 8008be0:	2900      	cmp	r1, #0
 8008be2:	bfd4      	ite	le
 8008be4:	f1c1 0202 	rsble	r2, r1, #2
 8008be8:	2201      	movgt	r2, #1
 8008bea:	4413      	add	r3, r2
 8008bec:	e7e0      	b.n	8008bb0 <_printf_float+0x1a4>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	055a      	lsls	r2, r3, #21
 8008bf2:	d407      	bmi.n	8008c04 <_printf_float+0x1f8>
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	4642      	mov	r2, r8
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d12c      	bne.n	8008c5c <_printf_float+0x250>
 8008c02:	e764      	b.n	8008ace <_printf_float+0xc2>
 8008c04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c08:	f240 80e0 	bls.w	8008dcc <_printf_float+0x3c0>
 8008c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c10:	2200      	movs	r2, #0
 8008c12:	2300      	movs	r3, #0
 8008c14:	f7f7 ff60 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d034      	beq.n	8008c86 <_printf_float+0x27a>
 8008c1c:	4a37      	ldr	r2, [pc, #220]	; (8008cfc <_printf_float+0x2f0>)
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	f43f af51 	beq.w	8008ace <_printf_float+0xc2>
 8008c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c30:	429a      	cmp	r2, r3
 8008c32:	db02      	blt.n	8008c3a <_printf_float+0x22e>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	07d8      	lsls	r0, r3, #31
 8008c38:	d510      	bpl.n	8008c5c <_printf_float+0x250>
 8008c3a:	ee18 3a10 	vmov	r3, s16
 8008c3e:	4652      	mov	r2, sl
 8008c40:	4631      	mov	r1, r6
 8008c42:	4628      	mov	r0, r5
 8008c44:	47b8      	blx	r7
 8008c46:	3001      	adds	r0, #1
 8008c48:	f43f af41 	beq.w	8008ace <_printf_float+0xc2>
 8008c4c:	f04f 0800 	mov.w	r8, #0
 8008c50:	f104 091a 	add.w	r9, r4, #26
 8008c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c56:	3b01      	subs	r3, #1
 8008c58:	4543      	cmp	r3, r8
 8008c5a:	dc09      	bgt.n	8008c70 <_printf_float+0x264>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	079b      	lsls	r3, r3, #30
 8008c60:	f100 8105 	bmi.w	8008e6e <_printf_float+0x462>
 8008c64:	68e0      	ldr	r0, [r4, #12]
 8008c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c68:	4298      	cmp	r0, r3
 8008c6a:	bfb8      	it	lt
 8008c6c:	4618      	movlt	r0, r3
 8008c6e:	e730      	b.n	8008ad2 <_printf_float+0xc6>
 8008c70:	2301      	movs	r3, #1
 8008c72:	464a      	mov	r2, r9
 8008c74:	4631      	mov	r1, r6
 8008c76:	4628      	mov	r0, r5
 8008c78:	47b8      	blx	r7
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	f43f af27 	beq.w	8008ace <_printf_float+0xc2>
 8008c80:	f108 0801 	add.w	r8, r8, #1
 8008c84:	e7e6      	b.n	8008c54 <_printf_float+0x248>
 8008c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dc39      	bgt.n	8008d00 <_printf_float+0x2f4>
 8008c8c:	4a1b      	ldr	r2, [pc, #108]	; (8008cfc <_printf_float+0x2f0>)
 8008c8e:	2301      	movs	r3, #1
 8008c90:	4631      	mov	r1, r6
 8008c92:	4628      	mov	r0, r5
 8008c94:	47b8      	blx	r7
 8008c96:	3001      	adds	r0, #1
 8008c98:	f43f af19 	beq.w	8008ace <_printf_float+0xc2>
 8008c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	d102      	bne.n	8008caa <_printf_float+0x29e>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	07d9      	lsls	r1, r3, #31
 8008ca8:	d5d8      	bpl.n	8008c5c <_printf_float+0x250>
 8008caa:	ee18 3a10 	vmov	r3, s16
 8008cae:	4652      	mov	r2, sl
 8008cb0:	4631      	mov	r1, r6
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	47b8      	blx	r7
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	f43f af09 	beq.w	8008ace <_printf_float+0xc2>
 8008cbc:	f04f 0900 	mov.w	r9, #0
 8008cc0:	f104 0a1a 	add.w	sl, r4, #26
 8008cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc6:	425b      	negs	r3, r3
 8008cc8:	454b      	cmp	r3, r9
 8008cca:	dc01      	bgt.n	8008cd0 <_printf_float+0x2c4>
 8008ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cce:	e792      	b.n	8008bf6 <_printf_float+0x1ea>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	47b8      	blx	r7
 8008cda:	3001      	adds	r0, #1
 8008cdc:	f43f aef7 	beq.w	8008ace <_printf_float+0xc2>
 8008ce0:	f109 0901 	add.w	r9, r9, #1
 8008ce4:	e7ee      	b.n	8008cc4 <_printf_float+0x2b8>
 8008ce6:	bf00      	nop
 8008ce8:	7fefffff 	.word	0x7fefffff
 8008cec:	0800d324 	.word	0x0800d324
 8008cf0:	0800d328 	.word	0x0800d328
 8008cf4:	0800d330 	.word	0x0800d330
 8008cf8:	0800d32c 	.word	0x0800d32c
 8008cfc:	0800d334 	.word	0x0800d334
 8008d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d04:	429a      	cmp	r2, r3
 8008d06:	bfa8      	it	ge
 8008d08:	461a      	movge	r2, r3
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	4691      	mov	r9, r2
 8008d0e:	dc37      	bgt.n	8008d80 <_printf_float+0x374>
 8008d10:	f04f 0b00 	mov.w	fp, #0
 8008d14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d18:	f104 021a 	add.w	r2, r4, #26
 8008d1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d1e:	9305      	str	r3, [sp, #20]
 8008d20:	eba3 0309 	sub.w	r3, r3, r9
 8008d24:	455b      	cmp	r3, fp
 8008d26:	dc33      	bgt.n	8008d90 <_printf_float+0x384>
 8008d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	db3b      	blt.n	8008da8 <_printf_float+0x39c>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	07da      	lsls	r2, r3, #31
 8008d34:	d438      	bmi.n	8008da8 <_printf_float+0x39c>
 8008d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d38:	9a05      	ldr	r2, [sp, #20]
 8008d3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d3c:	1a9a      	subs	r2, r3, r2
 8008d3e:	eba3 0901 	sub.w	r9, r3, r1
 8008d42:	4591      	cmp	r9, r2
 8008d44:	bfa8      	it	ge
 8008d46:	4691      	movge	r9, r2
 8008d48:	f1b9 0f00 	cmp.w	r9, #0
 8008d4c:	dc35      	bgt.n	8008dba <_printf_float+0x3ae>
 8008d4e:	f04f 0800 	mov.w	r8, #0
 8008d52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d56:	f104 0a1a 	add.w	sl, r4, #26
 8008d5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d5e:	1a9b      	subs	r3, r3, r2
 8008d60:	eba3 0309 	sub.w	r3, r3, r9
 8008d64:	4543      	cmp	r3, r8
 8008d66:	f77f af79 	ble.w	8008c5c <_printf_float+0x250>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4652      	mov	r2, sl
 8008d6e:	4631      	mov	r1, r6
 8008d70:	4628      	mov	r0, r5
 8008d72:	47b8      	blx	r7
 8008d74:	3001      	adds	r0, #1
 8008d76:	f43f aeaa 	beq.w	8008ace <_printf_float+0xc2>
 8008d7a:	f108 0801 	add.w	r8, r8, #1
 8008d7e:	e7ec      	b.n	8008d5a <_printf_float+0x34e>
 8008d80:	4613      	mov	r3, r2
 8008d82:	4631      	mov	r1, r6
 8008d84:	4642      	mov	r2, r8
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d1c0      	bne.n	8008d10 <_printf_float+0x304>
 8008d8e:	e69e      	b.n	8008ace <_printf_float+0xc2>
 8008d90:	2301      	movs	r3, #1
 8008d92:	4631      	mov	r1, r6
 8008d94:	4628      	mov	r0, r5
 8008d96:	9205      	str	r2, [sp, #20]
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f43f ae97 	beq.w	8008ace <_printf_float+0xc2>
 8008da0:	9a05      	ldr	r2, [sp, #20]
 8008da2:	f10b 0b01 	add.w	fp, fp, #1
 8008da6:	e7b9      	b.n	8008d1c <_printf_float+0x310>
 8008da8:	ee18 3a10 	vmov	r3, s16
 8008dac:	4652      	mov	r2, sl
 8008dae:	4631      	mov	r1, r6
 8008db0:	4628      	mov	r0, r5
 8008db2:	47b8      	blx	r7
 8008db4:	3001      	adds	r0, #1
 8008db6:	d1be      	bne.n	8008d36 <_printf_float+0x32a>
 8008db8:	e689      	b.n	8008ace <_printf_float+0xc2>
 8008dba:	9a05      	ldr	r2, [sp, #20]
 8008dbc:	464b      	mov	r3, r9
 8008dbe:	4442      	add	r2, r8
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	47b8      	blx	r7
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d1c1      	bne.n	8008d4e <_printf_float+0x342>
 8008dca:	e680      	b.n	8008ace <_printf_float+0xc2>
 8008dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dce:	2a01      	cmp	r2, #1
 8008dd0:	dc01      	bgt.n	8008dd6 <_printf_float+0x3ca>
 8008dd2:	07db      	lsls	r3, r3, #31
 8008dd4:	d538      	bpl.n	8008e48 <_printf_float+0x43c>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4642      	mov	r2, r8
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4628      	mov	r0, r5
 8008dde:	47b8      	blx	r7
 8008de0:	3001      	adds	r0, #1
 8008de2:	f43f ae74 	beq.w	8008ace <_printf_float+0xc2>
 8008de6:	ee18 3a10 	vmov	r3, s16
 8008dea:	4652      	mov	r2, sl
 8008dec:	4631      	mov	r1, r6
 8008dee:	4628      	mov	r0, r5
 8008df0:	47b8      	blx	r7
 8008df2:	3001      	adds	r0, #1
 8008df4:	f43f ae6b 	beq.w	8008ace <_printf_float+0xc2>
 8008df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f7f7 fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e04:	b9d8      	cbnz	r0, 8008e3e <_printf_float+0x432>
 8008e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e08:	f108 0201 	add.w	r2, r8, #1
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4628      	mov	r0, r5
 8008e12:	47b8      	blx	r7
 8008e14:	3001      	adds	r0, #1
 8008e16:	d10e      	bne.n	8008e36 <_printf_float+0x42a>
 8008e18:	e659      	b.n	8008ace <_printf_float+0xc2>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	4631      	mov	r1, r6
 8008e20:	4628      	mov	r0, r5
 8008e22:	47b8      	blx	r7
 8008e24:	3001      	adds	r0, #1
 8008e26:	f43f ae52 	beq.w	8008ace <_printf_float+0xc2>
 8008e2a:	f108 0801 	add.w	r8, r8, #1
 8008e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e30:	3b01      	subs	r3, #1
 8008e32:	4543      	cmp	r3, r8
 8008e34:	dcf1      	bgt.n	8008e1a <_printf_float+0x40e>
 8008e36:	464b      	mov	r3, r9
 8008e38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e3c:	e6dc      	b.n	8008bf8 <_printf_float+0x1ec>
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	f104 0a1a 	add.w	sl, r4, #26
 8008e46:	e7f2      	b.n	8008e2e <_printf_float+0x422>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	4642      	mov	r2, r8
 8008e4c:	e7df      	b.n	8008e0e <_printf_float+0x402>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	464a      	mov	r2, r9
 8008e52:	4631      	mov	r1, r6
 8008e54:	4628      	mov	r0, r5
 8008e56:	47b8      	blx	r7
 8008e58:	3001      	adds	r0, #1
 8008e5a:	f43f ae38 	beq.w	8008ace <_printf_float+0xc2>
 8008e5e:	f108 0801 	add.w	r8, r8, #1
 8008e62:	68e3      	ldr	r3, [r4, #12]
 8008e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e66:	1a5b      	subs	r3, r3, r1
 8008e68:	4543      	cmp	r3, r8
 8008e6a:	dcf0      	bgt.n	8008e4e <_printf_float+0x442>
 8008e6c:	e6fa      	b.n	8008c64 <_printf_float+0x258>
 8008e6e:	f04f 0800 	mov.w	r8, #0
 8008e72:	f104 0919 	add.w	r9, r4, #25
 8008e76:	e7f4      	b.n	8008e62 <_printf_float+0x456>

08008e78 <_printf_common>:
 8008e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7c:	4616      	mov	r6, r2
 8008e7e:	4699      	mov	r9, r3
 8008e80:	688a      	ldr	r2, [r1, #8]
 8008e82:	690b      	ldr	r3, [r1, #16]
 8008e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	bfb8      	it	lt
 8008e8c:	4613      	movlt	r3, r2
 8008e8e:	6033      	str	r3, [r6, #0]
 8008e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e94:	4607      	mov	r7, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	b10a      	cbz	r2, 8008e9e <_printf_common+0x26>
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	6033      	str	r3, [r6, #0]
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	0699      	lsls	r1, r3, #26
 8008ea2:	bf42      	ittt	mi
 8008ea4:	6833      	ldrmi	r3, [r6, #0]
 8008ea6:	3302      	addmi	r3, #2
 8008ea8:	6033      	strmi	r3, [r6, #0]
 8008eaa:	6825      	ldr	r5, [r4, #0]
 8008eac:	f015 0506 	ands.w	r5, r5, #6
 8008eb0:	d106      	bne.n	8008ec0 <_printf_common+0x48>
 8008eb2:	f104 0a19 	add.w	sl, r4, #25
 8008eb6:	68e3      	ldr	r3, [r4, #12]
 8008eb8:	6832      	ldr	r2, [r6, #0]
 8008eba:	1a9b      	subs	r3, r3, r2
 8008ebc:	42ab      	cmp	r3, r5
 8008ebe:	dc26      	bgt.n	8008f0e <_printf_common+0x96>
 8008ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ec4:	1e13      	subs	r3, r2, #0
 8008ec6:	6822      	ldr	r2, [r4, #0]
 8008ec8:	bf18      	it	ne
 8008eca:	2301      	movne	r3, #1
 8008ecc:	0692      	lsls	r2, r2, #26
 8008ece:	d42b      	bmi.n	8008f28 <_printf_common+0xb0>
 8008ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	47c0      	blx	r8
 8008eda:	3001      	adds	r0, #1
 8008edc:	d01e      	beq.n	8008f1c <_printf_common+0xa4>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	68e5      	ldr	r5, [r4, #12]
 8008ee2:	6832      	ldr	r2, [r6, #0]
 8008ee4:	f003 0306 	and.w	r3, r3, #6
 8008ee8:	2b04      	cmp	r3, #4
 8008eea:	bf08      	it	eq
 8008eec:	1aad      	subeq	r5, r5, r2
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	6922      	ldr	r2, [r4, #16]
 8008ef2:	bf0c      	ite	eq
 8008ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ef8:	2500      	movne	r5, #0
 8008efa:	4293      	cmp	r3, r2
 8008efc:	bfc4      	itt	gt
 8008efe:	1a9b      	subgt	r3, r3, r2
 8008f00:	18ed      	addgt	r5, r5, r3
 8008f02:	2600      	movs	r6, #0
 8008f04:	341a      	adds	r4, #26
 8008f06:	42b5      	cmp	r5, r6
 8008f08:	d11a      	bne.n	8008f40 <_printf_common+0xc8>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e008      	b.n	8008f20 <_printf_common+0xa8>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4652      	mov	r2, sl
 8008f12:	4649      	mov	r1, r9
 8008f14:	4638      	mov	r0, r7
 8008f16:	47c0      	blx	r8
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d103      	bne.n	8008f24 <_printf_common+0xac>
 8008f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f24:	3501      	adds	r5, #1
 8008f26:	e7c6      	b.n	8008eb6 <_printf_common+0x3e>
 8008f28:	18e1      	adds	r1, r4, r3
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	2030      	movs	r0, #48	; 0x30
 8008f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f32:	4422      	add	r2, r4
 8008f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f3c:	3302      	adds	r3, #2
 8008f3e:	e7c7      	b.n	8008ed0 <_printf_common+0x58>
 8008f40:	2301      	movs	r3, #1
 8008f42:	4622      	mov	r2, r4
 8008f44:	4649      	mov	r1, r9
 8008f46:	4638      	mov	r0, r7
 8008f48:	47c0      	blx	r8
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d0e6      	beq.n	8008f1c <_printf_common+0xa4>
 8008f4e:	3601      	adds	r6, #1
 8008f50:	e7d9      	b.n	8008f06 <_printf_common+0x8e>
	...

08008f54 <_printf_i>:
 8008f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f58:	7e0f      	ldrb	r7, [r1, #24]
 8008f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f5c:	2f78      	cmp	r7, #120	; 0x78
 8008f5e:	4691      	mov	r9, r2
 8008f60:	4680      	mov	r8, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	469a      	mov	sl, r3
 8008f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f6a:	d807      	bhi.n	8008f7c <_printf_i+0x28>
 8008f6c:	2f62      	cmp	r7, #98	; 0x62
 8008f6e:	d80a      	bhi.n	8008f86 <_printf_i+0x32>
 8008f70:	2f00      	cmp	r7, #0
 8008f72:	f000 80d8 	beq.w	8009126 <_printf_i+0x1d2>
 8008f76:	2f58      	cmp	r7, #88	; 0x58
 8008f78:	f000 80a3 	beq.w	80090c2 <_printf_i+0x16e>
 8008f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f84:	e03a      	b.n	8008ffc <_printf_i+0xa8>
 8008f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f8a:	2b15      	cmp	r3, #21
 8008f8c:	d8f6      	bhi.n	8008f7c <_printf_i+0x28>
 8008f8e:	a101      	add	r1, pc, #4	; (adr r1, 8008f94 <_printf_i+0x40>)
 8008f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f94:	08008fed 	.word	0x08008fed
 8008f98:	08009001 	.word	0x08009001
 8008f9c:	08008f7d 	.word	0x08008f7d
 8008fa0:	08008f7d 	.word	0x08008f7d
 8008fa4:	08008f7d 	.word	0x08008f7d
 8008fa8:	08008f7d 	.word	0x08008f7d
 8008fac:	08009001 	.word	0x08009001
 8008fb0:	08008f7d 	.word	0x08008f7d
 8008fb4:	08008f7d 	.word	0x08008f7d
 8008fb8:	08008f7d 	.word	0x08008f7d
 8008fbc:	08008f7d 	.word	0x08008f7d
 8008fc0:	0800910d 	.word	0x0800910d
 8008fc4:	08009031 	.word	0x08009031
 8008fc8:	080090ef 	.word	0x080090ef
 8008fcc:	08008f7d 	.word	0x08008f7d
 8008fd0:	08008f7d 	.word	0x08008f7d
 8008fd4:	0800912f 	.word	0x0800912f
 8008fd8:	08008f7d 	.word	0x08008f7d
 8008fdc:	08009031 	.word	0x08009031
 8008fe0:	08008f7d 	.word	0x08008f7d
 8008fe4:	08008f7d 	.word	0x08008f7d
 8008fe8:	080090f7 	.word	0x080090f7
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	1d1a      	adds	r2, r3, #4
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	602a      	str	r2, [r5, #0]
 8008ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e0a3      	b.n	8009148 <_printf_i+0x1f4>
 8009000:	6820      	ldr	r0, [r4, #0]
 8009002:	6829      	ldr	r1, [r5, #0]
 8009004:	0606      	lsls	r6, r0, #24
 8009006:	f101 0304 	add.w	r3, r1, #4
 800900a:	d50a      	bpl.n	8009022 <_printf_i+0xce>
 800900c:	680e      	ldr	r6, [r1, #0]
 800900e:	602b      	str	r3, [r5, #0]
 8009010:	2e00      	cmp	r6, #0
 8009012:	da03      	bge.n	800901c <_printf_i+0xc8>
 8009014:	232d      	movs	r3, #45	; 0x2d
 8009016:	4276      	negs	r6, r6
 8009018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800901c:	485e      	ldr	r0, [pc, #376]	; (8009198 <_printf_i+0x244>)
 800901e:	230a      	movs	r3, #10
 8009020:	e019      	b.n	8009056 <_printf_i+0x102>
 8009022:	680e      	ldr	r6, [r1, #0]
 8009024:	602b      	str	r3, [r5, #0]
 8009026:	f010 0f40 	tst.w	r0, #64	; 0x40
 800902a:	bf18      	it	ne
 800902c:	b236      	sxthne	r6, r6
 800902e:	e7ef      	b.n	8009010 <_printf_i+0xbc>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	6820      	ldr	r0, [r4, #0]
 8009034:	1d19      	adds	r1, r3, #4
 8009036:	6029      	str	r1, [r5, #0]
 8009038:	0601      	lsls	r1, r0, #24
 800903a:	d501      	bpl.n	8009040 <_printf_i+0xec>
 800903c:	681e      	ldr	r6, [r3, #0]
 800903e:	e002      	b.n	8009046 <_printf_i+0xf2>
 8009040:	0646      	lsls	r6, r0, #25
 8009042:	d5fb      	bpl.n	800903c <_printf_i+0xe8>
 8009044:	881e      	ldrh	r6, [r3, #0]
 8009046:	4854      	ldr	r0, [pc, #336]	; (8009198 <_printf_i+0x244>)
 8009048:	2f6f      	cmp	r7, #111	; 0x6f
 800904a:	bf0c      	ite	eq
 800904c:	2308      	moveq	r3, #8
 800904e:	230a      	movne	r3, #10
 8009050:	2100      	movs	r1, #0
 8009052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009056:	6865      	ldr	r5, [r4, #4]
 8009058:	60a5      	str	r5, [r4, #8]
 800905a:	2d00      	cmp	r5, #0
 800905c:	bfa2      	ittt	ge
 800905e:	6821      	ldrge	r1, [r4, #0]
 8009060:	f021 0104 	bicge.w	r1, r1, #4
 8009064:	6021      	strge	r1, [r4, #0]
 8009066:	b90e      	cbnz	r6, 800906c <_printf_i+0x118>
 8009068:	2d00      	cmp	r5, #0
 800906a:	d04d      	beq.n	8009108 <_printf_i+0x1b4>
 800906c:	4615      	mov	r5, r2
 800906e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009072:	fb03 6711 	mls	r7, r3, r1, r6
 8009076:	5dc7      	ldrb	r7, [r0, r7]
 8009078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800907c:	4637      	mov	r7, r6
 800907e:	42bb      	cmp	r3, r7
 8009080:	460e      	mov	r6, r1
 8009082:	d9f4      	bls.n	800906e <_printf_i+0x11a>
 8009084:	2b08      	cmp	r3, #8
 8009086:	d10b      	bne.n	80090a0 <_printf_i+0x14c>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	07de      	lsls	r6, r3, #31
 800908c:	d508      	bpl.n	80090a0 <_printf_i+0x14c>
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	6861      	ldr	r1, [r4, #4]
 8009092:	4299      	cmp	r1, r3
 8009094:	bfde      	ittt	le
 8009096:	2330      	movle	r3, #48	; 0x30
 8009098:	f805 3c01 	strble.w	r3, [r5, #-1]
 800909c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80090a0:	1b52      	subs	r2, r2, r5
 80090a2:	6122      	str	r2, [r4, #16]
 80090a4:	f8cd a000 	str.w	sl, [sp]
 80090a8:	464b      	mov	r3, r9
 80090aa:	aa03      	add	r2, sp, #12
 80090ac:	4621      	mov	r1, r4
 80090ae:	4640      	mov	r0, r8
 80090b0:	f7ff fee2 	bl	8008e78 <_printf_common>
 80090b4:	3001      	adds	r0, #1
 80090b6:	d14c      	bne.n	8009152 <_printf_i+0x1fe>
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090bc:	b004      	add	sp, #16
 80090be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c2:	4835      	ldr	r0, [pc, #212]	; (8009198 <_printf_i+0x244>)
 80090c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090c8:	6829      	ldr	r1, [r5, #0]
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80090d0:	6029      	str	r1, [r5, #0]
 80090d2:	061d      	lsls	r5, r3, #24
 80090d4:	d514      	bpl.n	8009100 <_printf_i+0x1ac>
 80090d6:	07df      	lsls	r7, r3, #31
 80090d8:	bf44      	itt	mi
 80090da:	f043 0320 	orrmi.w	r3, r3, #32
 80090de:	6023      	strmi	r3, [r4, #0]
 80090e0:	b91e      	cbnz	r6, 80090ea <_printf_i+0x196>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	f023 0320 	bic.w	r3, r3, #32
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	2310      	movs	r3, #16
 80090ec:	e7b0      	b.n	8009050 <_printf_i+0xfc>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	f043 0320 	orr.w	r3, r3, #32
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	2378      	movs	r3, #120	; 0x78
 80090f8:	4828      	ldr	r0, [pc, #160]	; (800919c <_printf_i+0x248>)
 80090fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090fe:	e7e3      	b.n	80090c8 <_printf_i+0x174>
 8009100:	0659      	lsls	r1, r3, #25
 8009102:	bf48      	it	mi
 8009104:	b2b6      	uxthmi	r6, r6
 8009106:	e7e6      	b.n	80090d6 <_printf_i+0x182>
 8009108:	4615      	mov	r5, r2
 800910a:	e7bb      	b.n	8009084 <_printf_i+0x130>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	6826      	ldr	r6, [r4, #0]
 8009110:	6961      	ldr	r1, [r4, #20]
 8009112:	1d18      	adds	r0, r3, #4
 8009114:	6028      	str	r0, [r5, #0]
 8009116:	0635      	lsls	r5, r6, #24
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	d501      	bpl.n	8009120 <_printf_i+0x1cc>
 800911c:	6019      	str	r1, [r3, #0]
 800911e:	e002      	b.n	8009126 <_printf_i+0x1d2>
 8009120:	0670      	lsls	r0, r6, #25
 8009122:	d5fb      	bpl.n	800911c <_printf_i+0x1c8>
 8009124:	8019      	strh	r1, [r3, #0]
 8009126:	2300      	movs	r3, #0
 8009128:	6123      	str	r3, [r4, #16]
 800912a:	4615      	mov	r5, r2
 800912c:	e7ba      	b.n	80090a4 <_printf_i+0x150>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	1d1a      	adds	r2, r3, #4
 8009132:	602a      	str	r2, [r5, #0]
 8009134:	681d      	ldr	r5, [r3, #0]
 8009136:	6862      	ldr	r2, [r4, #4]
 8009138:	2100      	movs	r1, #0
 800913a:	4628      	mov	r0, r5
 800913c:	f7f7 f858 	bl	80001f0 <memchr>
 8009140:	b108      	cbz	r0, 8009146 <_printf_i+0x1f2>
 8009142:	1b40      	subs	r0, r0, r5
 8009144:	6060      	str	r0, [r4, #4]
 8009146:	6863      	ldr	r3, [r4, #4]
 8009148:	6123      	str	r3, [r4, #16]
 800914a:	2300      	movs	r3, #0
 800914c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009150:	e7a8      	b.n	80090a4 <_printf_i+0x150>
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	462a      	mov	r2, r5
 8009156:	4649      	mov	r1, r9
 8009158:	4640      	mov	r0, r8
 800915a:	47d0      	blx	sl
 800915c:	3001      	adds	r0, #1
 800915e:	d0ab      	beq.n	80090b8 <_printf_i+0x164>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	079b      	lsls	r3, r3, #30
 8009164:	d413      	bmi.n	800918e <_printf_i+0x23a>
 8009166:	68e0      	ldr	r0, [r4, #12]
 8009168:	9b03      	ldr	r3, [sp, #12]
 800916a:	4298      	cmp	r0, r3
 800916c:	bfb8      	it	lt
 800916e:	4618      	movlt	r0, r3
 8009170:	e7a4      	b.n	80090bc <_printf_i+0x168>
 8009172:	2301      	movs	r3, #1
 8009174:	4632      	mov	r2, r6
 8009176:	4649      	mov	r1, r9
 8009178:	4640      	mov	r0, r8
 800917a:	47d0      	blx	sl
 800917c:	3001      	adds	r0, #1
 800917e:	d09b      	beq.n	80090b8 <_printf_i+0x164>
 8009180:	3501      	adds	r5, #1
 8009182:	68e3      	ldr	r3, [r4, #12]
 8009184:	9903      	ldr	r1, [sp, #12]
 8009186:	1a5b      	subs	r3, r3, r1
 8009188:	42ab      	cmp	r3, r5
 800918a:	dcf2      	bgt.n	8009172 <_printf_i+0x21e>
 800918c:	e7eb      	b.n	8009166 <_printf_i+0x212>
 800918e:	2500      	movs	r5, #0
 8009190:	f104 0619 	add.w	r6, r4, #25
 8009194:	e7f5      	b.n	8009182 <_printf_i+0x22e>
 8009196:	bf00      	nop
 8009198:	0800d336 	.word	0x0800d336
 800919c:	0800d347 	.word	0x0800d347

080091a0 <_scanf_float>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	b087      	sub	sp, #28
 80091a6:	4617      	mov	r7, r2
 80091a8:	9303      	str	r3, [sp, #12]
 80091aa:	688b      	ldr	r3, [r1, #8]
 80091ac:	1e5a      	subs	r2, r3, #1
 80091ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80091b2:	bf83      	ittte	hi
 80091b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80091b8:	195b      	addhi	r3, r3, r5
 80091ba:	9302      	strhi	r3, [sp, #8]
 80091bc:	2300      	movls	r3, #0
 80091be:	bf86      	itte	hi
 80091c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80091c4:	608b      	strhi	r3, [r1, #8]
 80091c6:	9302      	strls	r3, [sp, #8]
 80091c8:	680b      	ldr	r3, [r1, #0]
 80091ca:	468b      	mov	fp, r1
 80091cc:	2500      	movs	r5, #0
 80091ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80091d2:	f84b 3b1c 	str.w	r3, [fp], #28
 80091d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80091da:	4680      	mov	r8, r0
 80091dc:	460c      	mov	r4, r1
 80091de:	465e      	mov	r6, fp
 80091e0:	46aa      	mov	sl, r5
 80091e2:	46a9      	mov	r9, r5
 80091e4:	9501      	str	r5, [sp, #4]
 80091e6:	68a2      	ldr	r2, [r4, #8]
 80091e8:	b152      	cbz	r2, 8009200 <_scanf_float+0x60>
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b4e      	cmp	r3, #78	; 0x4e
 80091f0:	d864      	bhi.n	80092bc <_scanf_float+0x11c>
 80091f2:	2b40      	cmp	r3, #64	; 0x40
 80091f4:	d83c      	bhi.n	8009270 <_scanf_float+0xd0>
 80091f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80091fa:	b2c8      	uxtb	r0, r1
 80091fc:	280e      	cmp	r0, #14
 80091fe:	d93a      	bls.n	8009276 <_scanf_float+0xd6>
 8009200:	f1b9 0f00 	cmp.w	r9, #0
 8009204:	d003      	beq.n	800920e <_scanf_float+0x6e>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009212:	f1ba 0f01 	cmp.w	sl, #1
 8009216:	f200 8113 	bhi.w	8009440 <_scanf_float+0x2a0>
 800921a:	455e      	cmp	r6, fp
 800921c:	f200 8105 	bhi.w	800942a <_scanf_float+0x28a>
 8009220:	2501      	movs	r5, #1
 8009222:	4628      	mov	r0, r5
 8009224:	b007      	add	sp, #28
 8009226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800922e:	2a0d      	cmp	r2, #13
 8009230:	d8e6      	bhi.n	8009200 <_scanf_float+0x60>
 8009232:	a101      	add	r1, pc, #4	; (adr r1, 8009238 <_scanf_float+0x98>)
 8009234:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009238:	08009377 	.word	0x08009377
 800923c:	08009201 	.word	0x08009201
 8009240:	08009201 	.word	0x08009201
 8009244:	08009201 	.word	0x08009201
 8009248:	080093d7 	.word	0x080093d7
 800924c:	080093af 	.word	0x080093af
 8009250:	08009201 	.word	0x08009201
 8009254:	08009201 	.word	0x08009201
 8009258:	08009385 	.word	0x08009385
 800925c:	08009201 	.word	0x08009201
 8009260:	08009201 	.word	0x08009201
 8009264:	08009201 	.word	0x08009201
 8009268:	08009201 	.word	0x08009201
 800926c:	0800933d 	.word	0x0800933d
 8009270:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009274:	e7db      	b.n	800922e <_scanf_float+0x8e>
 8009276:	290e      	cmp	r1, #14
 8009278:	d8c2      	bhi.n	8009200 <_scanf_float+0x60>
 800927a:	a001      	add	r0, pc, #4	; (adr r0, 8009280 <_scanf_float+0xe0>)
 800927c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009280:	0800932f 	.word	0x0800932f
 8009284:	08009201 	.word	0x08009201
 8009288:	0800932f 	.word	0x0800932f
 800928c:	080093c3 	.word	0x080093c3
 8009290:	08009201 	.word	0x08009201
 8009294:	080092dd 	.word	0x080092dd
 8009298:	08009319 	.word	0x08009319
 800929c:	08009319 	.word	0x08009319
 80092a0:	08009319 	.word	0x08009319
 80092a4:	08009319 	.word	0x08009319
 80092a8:	08009319 	.word	0x08009319
 80092ac:	08009319 	.word	0x08009319
 80092b0:	08009319 	.word	0x08009319
 80092b4:	08009319 	.word	0x08009319
 80092b8:	08009319 	.word	0x08009319
 80092bc:	2b6e      	cmp	r3, #110	; 0x6e
 80092be:	d809      	bhi.n	80092d4 <_scanf_float+0x134>
 80092c0:	2b60      	cmp	r3, #96	; 0x60
 80092c2:	d8b2      	bhi.n	800922a <_scanf_float+0x8a>
 80092c4:	2b54      	cmp	r3, #84	; 0x54
 80092c6:	d077      	beq.n	80093b8 <_scanf_float+0x218>
 80092c8:	2b59      	cmp	r3, #89	; 0x59
 80092ca:	d199      	bne.n	8009200 <_scanf_float+0x60>
 80092cc:	2d07      	cmp	r5, #7
 80092ce:	d197      	bne.n	8009200 <_scanf_float+0x60>
 80092d0:	2508      	movs	r5, #8
 80092d2:	e029      	b.n	8009328 <_scanf_float+0x188>
 80092d4:	2b74      	cmp	r3, #116	; 0x74
 80092d6:	d06f      	beq.n	80093b8 <_scanf_float+0x218>
 80092d8:	2b79      	cmp	r3, #121	; 0x79
 80092da:	e7f6      	b.n	80092ca <_scanf_float+0x12a>
 80092dc:	6821      	ldr	r1, [r4, #0]
 80092de:	05c8      	lsls	r0, r1, #23
 80092e0:	d51a      	bpl.n	8009318 <_scanf_float+0x178>
 80092e2:	9b02      	ldr	r3, [sp, #8]
 80092e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80092e8:	6021      	str	r1, [r4, #0]
 80092ea:	f109 0901 	add.w	r9, r9, #1
 80092ee:	b11b      	cbz	r3, 80092f8 <_scanf_float+0x158>
 80092f0:	3b01      	subs	r3, #1
 80092f2:	3201      	adds	r2, #1
 80092f4:	9302      	str	r3, [sp, #8]
 80092f6:	60a2      	str	r2, [r4, #8]
 80092f8:	68a3      	ldr	r3, [r4, #8]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	60a3      	str	r3, [r4, #8]
 80092fe:	6923      	ldr	r3, [r4, #16]
 8009300:	3301      	adds	r3, #1
 8009302:	6123      	str	r3, [r4, #16]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3b01      	subs	r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	607b      	str	r3, [r7, #4]
 800930c:	f340 8084 	ble.w	8009418 <_scanf_float+0x278>
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	3301      	adds	r3, #1
 8009314:	603b      	str	r3, [r7, #0]
 8009316:	e766      	b.n	80091e6 <_scanf_float+0x46>
 8009318:	eb1a 0f05 	cmn.w	sl, r5
 800931c:	f47f af70 	bne.w	8009200 <_scanf_float+0x60>
 8009320:	6822      	ldr	r2, [r4, #0]
 8009322:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009326:	6022      	str	r2, [r4, #0]
 8009328:	f806 3b01 	strb.w	r3, [r6], #1
 800932c:	e7e4      	b.n	80092f8 <_scanf_float+0x158>
 800932e:	6822      	ldr	r2, [r4, #0]
 8009330:	0610      	lsls	r0, r2, #24
 8009332:	f57f af65 	bpl.w	8009200 <_scanf_float+0x60>
 8009336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800933a:	e7f4      	b.n	8009326 <_scanf_float+0x186>
 800933c:	f1ba 0f00 	cmp.w	sl, #0
 8009340:	d10e      	bne.n	8009360 <_scanf_float+0x1c0>
 8009342:	f1b9 0f00 	cmp.w	r9, #0
 8009346:	d10e      	bne.n	8009366 <_scanf_float+0x1c6>
 8009348:	6822      	ldr	r2, [r4, #0]
 800934a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800934e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009352:	d108      	bne.n	8009366 <_scanf_float+0x1c6>
 8009354:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009358:	6022      	str	r2, [r4, #0]
 800935a:	f04f 0a01 	mov.w	sl, #1
 800935e:	e7e3      	b.n	8009328 <_scanf_float+0x188>
 8009360:	f1ba 0f02 	cmp.w	sl, #2
 8009364:	d055      	beq.n	8009412 <_scanf_float+0x272>
 8009366:	2d01      	cmp	r5, #1
 8009368:	d002      	beq.n	8009370 <_scanf_float+0x1d0>
 800936a:	2d04      	cmp	r5, #4
 800936c:	f47f af48 	bne.w	8009200 <_scanf_float+0x60>
 8009370:	3501      	adds	r5, #1
 8009372:	b2ed      	uxtb	r5, r5
 8009374:	e7d8      	b.n	8009328 <_scanf_float+0x188>
 8009376:	f1ba 0f01 	cmp.w	sl, #1
 800937a:	f47f af41 	bne.w	8009200 <_scanf_float+0x60>
 800937e:	f04f 0a02 	mov.w	sl, #2
 8009382:	e7d1      	b.n	8009328 <_scanf_float+0x188>
 8009384:	b97d      	cbnz	r5, 80093a6 <_scanf_float+0x206>
 8009386:	f1b9 0f00 	cmp.w	r9, #0
 800938a:	f47f af3c 	bne.w	8009206 <_scanf_float+0x66>
 800938e:	6822      	ldr	r2, [r4, #0]
 8009390:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009394:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009398:	f47f af39 	bne.w	800920e <_scanf_float+0x6e>
 800939c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093a0:	6022      	str	r2, [r4, #0]
 80093a2:	2501      	movs	r5, #1
 80093a4:	e7c0      	b.n	8009328 <_scanf_float+0x188>
 80093a6:	2d03      	cmp	r5, #3
 80093a8:	d0e2      	beq.n	8009370 <_scanf_float+0x1d0>
 80093aa:	2d05      	cmp	r5, #5
 80093ac:	e7de      	b.n	800936c <_scanf_float+0x1cc>
 80093ae:	2d02      	cmp	r5, #2
 80093b0:	f47f af26 	bne.w	8009200 <_scanf_float+0x60>
 80093b4:	2503      	movs	r5, #3
 80093b6:	e7b7      	b.n	8009328 <_scanf_float+0x188>
 80093b8:	2d06      	cmp	r5, #6
 80093ba:	f47f af21 	bne.w	8009200 <_scanf_float+0x60>
 80093be:	2507      	movs	r5, #7
 80093c0:	e7b2      	b.n	8009328 <_scanf_float+0x188>
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	0591      	lsls	r1, r2, #22
 80093c6:	f57f af1b 	bpl.w	8009200 <_scanf_float+0x60>
 80093ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80093ce:	6022      	str	r2, [r4, #0]
 80093d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80093d4:	e7a8      	b.n	8009328 <_scanf_float+0x188>
 80093d6:	6822      	ldr	r2, [r4, #0]
 80093d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80093dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80093e0:	d006      	beq.n	80093f0 <_scanf_float+0x250>
 80093e2:	0550      	lsls	r0, r2, #21
 80093e4:	f57f af0c 	bpl.w	8009200 <_scanf_float+0x60>
 80093e8:	f1b9 0f00 	cmp.w	r9, #0
 80093ec:	f43f af0f 	beq.w	800920e <_scanf_float+0x6e>
 80093f0:	0591      	lsls	r1, r2, #22
 80093f2:	bf58      	it	pl
 80093f4:	9901      	ldrpl	r1, [sp, #4]
 80093f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093fa:	bf58      	it	pl
 80093fc:	eba9 0101 	subpl.w	r1, r9, r1
 8009400:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009404:	bf58      	it	pl
 8009406:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800940a:	6022      	str	r2, [r4, #0]
 800940c:	f04f 0900 	mov.w	r9, #0
 8009410:	e78a      	b.n	8009328 <_scanf_float+0x188>
 8009412:	f04f 0a03 	mov.w	sl, #3
 8009416:	e787      	b.n	8009328 <_scanf_float+0x188>
 8009418:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800941c:	4639      	mov	r1, r7
 800941e:	4640      	mov	r0, r8
 8009420:	4798      	blx	r3
 8009422:	2800      	cmp	r0, #0
 8009424:	f43f aedf 	beq.w	80091e6 <_scanf_float+0x46>
 8009428:	e6ea      	b.n	8009200 <_scanf_float+0x60>
 800942a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800942e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009432:	463a      	mov	r2, r7
 8009434:	4640      	mov	r0, r8
 8009436:	4798      	blx	r3
 8009438:	6923      	ldr	r3, [r4, #16]
 800943a:	3b01      	subs	r3, #1
 800943c:	6123      	str	r3, [r4, #16]
 800943e:	e6ec      	b.n	800921a <_scanf_float+0x7a>
 8009440:	1e6b      	subs	r3, r5, #1
 8009442:	2b06      	cmp	r3, #6
 8009444:	d825      	bhi.n	8009492 <_scanf_float+0x2f2>
 8009446:	2d02      	cmp	r5, #2
 8009448:	d836      	bhi.n	80094b8 <_scanf_float+0x318>
 800944a:	455e      	cmp	r6, fp
 800944c:	f67f aee8 	bls.w	8009220 <_scanf_float+0x80>
 8009450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009454:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009458:	463a      	mov	r2, r7
 800945a:	4640      	mov	r0, r8
 800945c:	4798      	blx	r3
 800945e:	6923      	ldr	r3, [r4, #16]
 8009460:	3b01      	subs	r3, #1
 8009462:	6123      	str	r3, [r4, #16]
 8009464:	e7f1      	b.n	800944a <_scanf_float+0x2aa>
 8009466:	9802      	ldr	r0, [sp, #8]
 8009468:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800946c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009470:	9002      	str	r0, [sp, #8]
 8009472:	463a      	mov	r2, r7
 8009474:	4640      	mov	r0, r8
 8009476:	4798      	blx	r3
 8009478:	6923      	ldr	r3, [r4, #16]
 800947a:	3b01      	subs	r3, #1
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009482:	fa5f fa8a 	uxtb.w	sl, sl
 8009486:	f1ba 0f02 	cmp.w	sl, #2
 800948a:	d1ec      	bne.n	8009466 <_scanf_float+0x2c6>
 800948c:	3d03      	subs	r5, #3
 800948e:	b2ed      	uxtb	r5, r5
 8009490:	1b76      	subs	r6, r6, r5
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	05da      	lsls	r2, r3, #23
 8009496:	d52f      	bpl.n	80094f8 <_scanf_float+0x358>
 8009498:	055b      	lsls	r3, r3, #21
 800949a:	d510      	bpl.n	80094be <_scanf_float+0x31e>
 800949c:	455e      	cmp	r6, fp
 800949e:	f67f aebf 	bls.w	8009220 <_scanf_float+0x80>
 80094a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094aa:	463a      	mov	r2, r7
 80094ac:	4640      	mov	r0, r8
 80094ae:	4798      	blx	r3
 80094b0:	6923      	ldr	r3, [r4, #16]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	6123      	str	r3, [r4, #16]
 80094b6:	e7f1      	b.n	800949c <_scanf_float+0x2fc>
 80094b8:	46aa      	mov	sl, r5
 80094ba:	9602      	str	r6, [sp, #8]
 80094bc:	e7df      	b.n	800947e <_scanf_float+0x2de>
 80094be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	2965      	cmp	r1, #101	; 0x65
 80094c6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80094ca:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80094ce:	6123      	str	r3, [r4, #16]
 80094d0:	d00c      	beq.n	80094ec <_scanf_float+0x34c>
 80094d2:	2945      	cmp	r1, #69	; 0x45
 80094d4:	d00a      	beq.n	80094ec <_scanf_float+0x34c>
 80094d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094da:	463a      	mov	r2, r7
 80094dc:	4640      	mov	r0, r8
 80094de:	4798      	blx	r3
 80094e0:	6923      	ldr	r3, [r4, #16]
 80094e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	1eb5      	subs	r5, r6, #2
 80094ea:	6123      	str	r3, [r4, #16]
 80094ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094f0:	463a      	mov	r2, r7
 80094f2:	4640      	mov	r0, r8
 80094f4:	4798      	blx	r3
 80094f6:	462e      	mov	r6, r5
 80094f8:	6825      	ldr	r5, [r4, #0]
 80094fa:	f015 0510 	ands.w	r5, r5, #16
 80094fe:	d159      	bne.n	80095b4 <_scanf_float+0x414>
 8009500:	7035      	strb	r5, [r6, #0]
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800950c:	d11b      	bne.n	8009546 <_scanf_float+0x3a6>
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	454b      	cmp	r3, r9
 8009512:	eba3 0209 	sub.w	r2, r3, r9
 8009516:	d123      	bne.n	8009560 <_scanf_float+0x3c0>
 8009518:	2200      	movs	r2, #0
 800951a:	4659      	mov	r1, fp
 800951c:	4640      	mov	r0, r8
 800951e:	f000 ff15 	bl	800a34c <_strtod_r>
 8009522:	6822      	ldr	r2, [r4, #0]
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	f012 0f02 	tst.w	r2, #2
 800952a:	ec57 6b10 	vmov	r6, r7, d0
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	d021      	beq.n	8009576 <_scanf_float+0x3d6>
 8009532:	9903      	ldr	r1, [sp, #12]
 8009534:	1d1a      	adds	r2, r3, #4
 8009536:	600a      	str	r2, [r1, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	e9c3 6700 	strd	r6, r7, [r3]
 800953e:	68e3      	ldr	r3, [r4, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60e3      	str	r3, [r4, #12]
 8009544:	e66d      	b.n	8009222 <_scanf_float+0x82>
 8009546:	9b04      	ldr	r3, [sp, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0e5      	beq.n	8009518 <_scanf_float+0x378>
 800954c:	9905      	ldr	r1, [sp, #20]
 800954e:	230a      	movs	r3, #10
 8009550:	462a      	mov	r2, r5
 8009552:	3101      	adds	r1, #1
 8009554:	4640      	mov	r0, r8
 8009556:	f000 ff81 	bl	800a45c <_strtol_r>
 800955a:	9b04      	ldr	r3, [sp, #16]
 800955c:	9e05      	ldr	r6, [sp, #20]
 800955e:	1ac2      	subs	r2, r0, r3
 8009560:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009564:	429e      	cmp	r6, r3
 8009566:	bf28      	it	cs
 8009568:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800956c:	4912      	ldr	r1, [pc, #72]	; (80095b8 <_scanf_float+0x418>)
 800956e:	4630      	mov	r0, r6
 8009570:	f000 f8a8 	bl	80096c4 <siprintf>
 8009574:	e7d0      	b.n	8009518 <_scanf_float+0x378>
 8009576:	9903      	ldr	r1, [sp, #12]
 8009578:	f012 0f04 	tst.w	r2, #4
 800957c:	f103 0204 	add.w	r2, r3, #4
 8009580:	600a      	str	r2, [r1, #0]
 8009582:	d1d9      	bne.n	8009538 <_scanf_float+0x398>
 8009584:	f8d3 8000 	ldr.w	r8, [r3]
 8009588:	ee10 2a10 	vmov	r2, s0
 800958c:	ee10 0a10 	vmov	r0, s0
 8009590:	463b      	mov	r3, r7
 8009592:	4639      	mov	r1, r7
 8009594:	f7f7 fad2 	bl	8000b3c <__aeabi_dcmpun>
 8009598:	b128      	cbz	r0, 80095a6 <_scanf_float+0x406>
 800959a:	4808      	ldr	r0, [pc, #32]	; (80095bc <_scanf_float+0x41c>)
 800959c:	f000 f88c 	bl	80096b8 <nanf>
 80095a0:	ed88 0a00 	vstr	s0, [r8]
 80095a4:	e7cb      	b.n	800953e <_scanf_float+0x39e>
 80095a6:	4630      	mov	r0, r6
 80095a8:	4639      	mov	r1, r7
 80095aa:	f7f7 fb25 	bl	8000bf8 <__aeabi_d2f>
 80095ae:	f8c8 0000 	str.w	r0, [r8]
 80095b2:	e7c4      	b.n	800953e <_scanf_float+0x39e>
 80095b4:	2500      	movs	r5, #0
 80095b6:	e634      	b.n	8009222 <_scanf_float+0x82>
 80095b8:	0800d358 	.word	0x0800d358
 80095bc:	0800d45b 	.word	0x0800d45b

080095c0 <srand>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4b10      	ldr	r3, [pc, #64]	; (8009604 <srand+0x44>)
 80095c4:	681d      	ldr	r5, [r3, #0]
 80095c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80095c8:	4604      	mov	r4, r0
 80095ca:	b9b3      	cbnz	r3, 80095fa <srand+0x3a>
 80095cc:	2018      	movs	r0, #24
 80095ce:	f7ff f87f 	bl	80086d0 <malloc>
 80095d2:	4602      	mov	r2, r0
 80095d4:	63a8      	str	r0, [r5, #56]	; 0x38
 80095d6:	b920      	cbnz	r0, 80095e2 <srand+0x22>
 80095d8:	4b0b      	ldr	r3, [pc, #44]	; (8009608 <srand+0x48>)
 80095da:	480c      	ldr	r0, [pc, #48]	; (800960c <srand+0x4c>)
 80095dc:	2142      	movs	r1, #66	; 0x42
 80095de:	f000 ff3f 	bl	800a460 <__assert_func>
 80095e2:	490b      	ldr	r1, [pc, #44]	; (8009610 <srand+0x50>)
 80095e4:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <srand+0x54>)
 80095e6:	e9c0 1300 	strd	r1, r3, [r0]
 80095ea:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <srand+0x58>)
 80095ec:	6083      	str	r3, [r0, #8]
 80095ee:	230b      	movs	r3, #11
 80095f0:	8183      	strh	r3, [r0, #12]
 80095f2:	2100      	movs	r1, #0
 80095f4:	2001      	movs	r0, #1
 80095f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80095fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80095fc:	2200      	movs	r2, #0
 80095fe:	611c      	str	r4, [r3, #16]
 8009600:	615a      	str	r2, [r3, #20]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	20000010 	.word	0x20000010
 8009608:	0800d35d 	.word	0x0800d35d
 800960c:	0800d374 	.word	0x0800d374
 8009610:	abcd330e 	.word	0xabcd330e
 8009614:	e66d1234 	.word	0xe66d1234
 8009618:	0005deec 	.word	0x0005deec

0800961c <rand>:
 800961c:	4b16      	ldr	r3, [pc, #88]	; (8009678 <rand+0x5c>)
 800961e:	b510      	push	{r4, lr}
 8009620:	681c      	ldr	r4, [r3, #0]
 8009622:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009624:	b9b3      	cbnz	r3, 8009654 <rand+0x38>
 8009626:	2018      	movs	r0, #24
 8009628:	f7ff f852 	bl	80086d0 <malloc>
 800962c:	63a0      	str	r0, [r4, #56]	; 0x38
 800962e:	b928      	cbnz	r0, 800963c <rand+0x20>
 8009630:	4602      	mov	r2, r0
 8009632:	4b12      	ldr	r3, [pc, #72]	; (800967c <rand+0x60>)
 8009634:	4812      	ldr	r0, [pc, #72]	; (8009680 <rand+0x64>)
 8009636:	214e      	movs	r1, #78	; 0x4e
 8009638:	f000 ff12 	bl	800a460 <__assert_func>
 800963c:	4a11      	ldr	r2, [pc, #68]	; (8009684 <rand+0x68>)
 800963e:	4b12      	ldr	r3, [pc, #72]	; (8009688 <rand+0x6c>)
 8009640:	e9c0 2300 	strd	r2, r3, [r0]
 8009644:	4b11      	ldr	r3, [pc, #68]	; (800968c <rand+0x70>)
 8009646:	6083      	str	r3, [r0, #8]
 8009648:	230b      	movs	r3, #11
 800964a:	8183      	strh	r3, [r0, #12]
 800964c:	2201      	movs	r2, #1
 800964e:	2300      	movs	r3, #0
 8009650:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009654:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009656:	4a0e      	ldr	r2, [pc, #56]	; (8009690 <rand+0x74>)
 8009658:	6920      	ldr	r0, [r4, #16]
 800965a:	6963      	ldr	r3, [r4, #20]
 800965c:	490d      	ldr	r1, [pc, #52]	; (8009694 <rand+0x78>)
 800965e:	4342      	muls	r2, r0
 8009660:	fb01 2203 	mla	r2, r1, r3, r2
 8009664:	fba0 0101 	umull	r0, r1, r0, r1
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	eb42 0001 	adc.w	r0, r2, r1
 800966e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009672:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009676:	bd10      	pop	{r4, pc}
 8009678:	20000010 	.word	0x20000010
 800967c:	0800d35d 	.word	0x0800d35d
 8009680:	0800d374 	.word	0x0800d374
 8009684:	abcd330e 	.word	0xabcd330e
 8009688:	e66d1234 	.word	0xe66d1234
 800968c:	0005deec 	.word	0x0005deec
 8009690:	5851f42d 	.word	0x5851f42d
 8009694:	4c957f2d 	.word	0x4c957f2d

08009698 <_sbrk_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d06      	ldr	r5, [pc, #24]	; (80096b4 <_sbrk_r+0x1c>)
 800969c:	2300      	movs	r3, #0
 800969e:	4604      	mov	r4, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	602b      	str	r3, [r5, #0]
 80096a4:	f7f9 f866 	bl	8002774 <_sbrk>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_sbrk_r+0x1a>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_sbrk_r+0x1a>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	20004d18 	.word	0x20004d18

080096b8 <nanf>:
 80096b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80096c0 <nanf+0x8>
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	7fc00000 	.word	0x7fc00000

080096c4 <siprintf>:
 80096c4:	b40e      	push	{r1, r2, r3}
 80096c6:	b500      	push	{lr}
 80096c8:	b09c      	sub	sp, #112	; 0x70
 80096ca:	ab1d      	add	r3, sp, #116	; 0x74
 80096cc:	9002      	str	r0, [sp, #8]
 80096ce:	9006      	str	r0, [sp, #24]
 80096d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096d4:	4809      	ldr	r0, [pc, #36]	; (80096fc <siprintf+0x38>)
 80096d6:	9107      	str	r1, [sp, #28]
 80096d8:	9104      	str	r1, [sp, #16]
 80096da:	4909      	ldr	r1, [pc, #36]	; (8009700 <siprintf+0x3c>)
 80096dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e0:	9105      	str	r1, [sp, #20]
 80096e2:	6800      	ldr	r0, [r0, #0]
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	a902      	add	r1, sp, #8
 80096e8:	f002 fe2a 	bl	800c340 <_svfiprintf_r>
 80096ec:	9b02      	ldr	r3, [sp, #8]
 80096ee:	2200      	movs	r2, #0
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	b01c      	add	sp, #112	; 0x70
 80096f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f8:	b003      	add	sp, #12
 80096fa:	4770      	bx	lr
 80096fc:	20000010 	.word	0x20000010
 8009700:	ffff0208 	.word	0xffff0208

08009704 <sulp>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	4604      	mov	r4, r0
 8009708:	460d      	mov	r5, r1
 800970a:	ec45 4b10 	vmov	d0, r4, r5
 800970e:	4616      	mov	r6, r2
 8009710:	f002 fc56 	bl	800bfc0 <__ulp>
 8009714:	ec51 0b10 	vmov	r0, r1, d0
 8009718:	b17e      	cbz	r6, 800973a <sulp+0x36>
 800971a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800971e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009722:	2b00      	cmp	r3, #0
 8009724:	dd09      	ble.n	800973a <sulp+0x36>
 8009726:	051b      	lsls	r3, r3, #20
 8009728:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800972c:	2400      	movs	r4, #0
 800972e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009732:	4622      	mov	r2, r4
 8009734:	462b      	mov	r3, r5
 8009736:	f7f6 ff67 	bl	8000608 <__aeabi_dmul>
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	0000      	movs	r0, r0
	...

08009740 <_strtod_l>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	ed2d 8b02 	vpush	{d8}
 8009748:	b09d      	sub	sp, #116	; 0x74
 800974a:	461f      	mov	r7, r3
 800974c:	2300      	movs	r3, #0
 800974e:	9318      	str	r3, [sp, #96]	; 0x60
 8009750:	4ba2      	ldr	r3, [pc, #648]	; (80099dc <_strtod_l+0x29c>)
 8009752:	9213      	str	r2, [sp, #76]	; 0x4c
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	4604      	mov	r4, r0
 800975a:	4618      	mov	r0, r3
 800975c:	4688      	mov	r8, r1
 800975e:	f7f6 fd3f 	bl	80001e0 <strlen>
 8009762:	f04f 0a00 	mov.w	sl, #0
 8009766:	4605      	mov	r5, r0
 8009768:	f04f 0b00 	mov.w	fp, #0
 800976c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009772:	781a      	ldrb	r2, [r3, #0]
 8009774:	2a2b      	cmp	r2, #43	; 0x2b
 8009776:	d04e      	beq.n	8009816 <_strtod_l+0xd6>
 8009778:	d83b      	bhi.n	80097f2 <_strtod_l+0xb2>
 800977a:	2a0d      	cmp	r2, #13
 800977c:	d834      	bhi.n	80097e8 <_strtod_l+0xa8>
 800977e:	2a08      	cmp	r2, #8
 8009780:	d834      	bhi.n	80097ec <_strtod_l+0xac>
 8009782:	2a00      	cmp	r2, #0
 8009784:	d03e      	beq.n	8009804 <_strtod_l+0xc4>
 8009786:	2300      	movs	r3, #0
 8009788:	930a      	str	r3, [sp, #40]	; 0x28
 800978a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800978c:	7833      	ldrb	r3, [r6, #0]
 800978e:	2b30      	cmp	r3, #48	; 0x30
 8009790:	f040 80b0 	bne.w	80098f4 <_strtod_l+0x1b4>
 8009794:	7873      	ldrb	r3, [r6, #1]
 8009796:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800979a:	2b58      	cmp	r3, #88	; 0x58
 800979c:	d168      	bne.n	8009870 <_strtod_l+0x130>
 800979e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	ab18      	add	r3, sp, #96	; 0x60
 80097a4:	9702      	str	r7, [sp, #8]
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	4a8d      	ldr	r2, [pc, #564]	; (80099e0 <_strtod_l+0x2a0>)
 80097aa:	ab19      	add	r3, sp, #100	; 0x64
 80097ac:	a917      	add	r1, sp, #92	; 0x5c
 80097ae:	4620      	mov	r0, r4
 80097b0:	f001 fd6a 	bl	800b288 <__gethex>
 80097b4:	f010 0707 	ands.w	r7, r0, #7
 80097b8:	4605      	mov	r5, r0
 80097ba:	d005      	beq.n	80097c8 <_strtod_l+0x88>
 80097bc:	2f06      	cmp	r7, #6
 80097be:	d12c      	bne.n	800981a <_strtod_l+0xda>
 80097c0:	3601      	adds	r6, #1
 80097c2:	2300      	movs	r3, #0
 80097c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80097c6:	930a      	str	r3, [sp, #40]	; 0x28
 80097c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f040 8590 	bne.w	800a2f0 <_strtod_l+0xbb0>
 80097d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d2:	b1eb      	cbz	r3, 8009810 <_strtod_l+0xd0>
 80097d4:	4652      	mov	r2, sl
 80097d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097da:	ec43 2b10 	vmov	d0, r2, r3
 80097de:	b01d      	add	sp, #116	; 0x74
 80097e0:	ecbd 8b02 	vpop	{d8}
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	2a20      	cmp	r2, #32
 80097ea:	d1cc      	bne.n	8009786 <_strtod_l+0x46>
 80097ec:	3301      	adds	r3, #1
 80097ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80097f0:	e7be      	b.n	8009770 <_strtod_l+0x30>
 80097f2:	2a2d      	cmp	r2, #45	; 0x2d
 80097f4:	d1c7      	bne.n	8009786 <_strtod_l+0x46>
 80097f6:	2201      	movs	r2, #1
 80097f8:	920a      	str	r2, [sp, #40]	; 0x28
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1c2      	bne.n	800978a <_strtod_l+0x4a>
 8009804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009806:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800980a:	2b00      	cmp	r3, #0
 800980c:	f040 856e 	bne.w	800a2ec <_strtod_l+0xbac>
 8009810:	4652      	mov	r2, sl
 8009812:	465b      	mov	r3, fp
 8009814:	e7e1      	b.n	80097da <_strtod_l+0x9a>
 8009816:	2200      	movs	r2, #0
 8009818:	e7ee      	b.n	80097f8 <_strtod_l+0xb8>
 800981a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800981c:	b13a      	cbz	r2, 800982e <_strtod_l+0xee>
 800981e:	2135      	movs	r1, #53	; 0x35
 8009820:	a81a      	add	r0, sp, #104	; 0x68
 8009822:	f002 fcd8 	bl	800c1d6 <__copybits>
 8009826:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009828:	4620      	mov	r0, r4
 800982a:	f002 f897 	bl	800b95c <_Bfree>
 800982e:	3f01      	subs	r7, #1
 8009830:	2f04      	cmp	r7, #4
 8009832:	d806      	bhi.n	8009842 <_strtod_l+0x102>
 8009834:	e8df f007 	tbb	[pc, r7]
 8009838:	1714030a 	.word	0x1714030a
 800983c:	0a          	.byte	0x0a
 800983d:	00          	.byte	0x00
 800983e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009842:	0728      	lsls	r0, r5, #28
 8009844:	d5c0      	bpl.n	80097c8 <_strtod_l+0x88>
 8009846:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800984a:	e7bd      	b.n	80097c8 <_strtod_l+0x88>
 800984c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009850:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009852:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009856:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800985a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800985e:	e7f0      	b.n	8009842 <_strtod_l+0x102>
 8009860:	f8df b180 	ldr.w	fp, [pc, #384]	; 80099e4 <_strtod_l+0x2a4>
 8009864:	e7ed      	b.n	8009842 <_strtod_l+0x102>
 8009866:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800986a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800986e:	e7e8      	b.n	8009842 <_strtod_l+0x102>
 8009870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	9217      	str	r2, [sp, #92]	; 0x5c
 8009876:	785b      	ldrb	r3, [r3, #1]
 8009878:	2b30      	cmp	r3, #48	; 0x30
 800987a:	d0f9      	beq.n	8009870 <_strtod_l+0x130>
 800987c:	2b00      	cmp	r3, #0
 800987e:	d0a3      	beq.n	80097c8 <_strtod_l+0x88>
 8009880:	2301      	movs	r3, #1
 8009882:	f04f 0900 	mov.w	r9, #0
 8009886:	9304      	str	r3, [sp, #16]
 8009888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800988a:	9308      	str	r3, [sp, #32]
 800988c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009890:	464f      	mov	r7, r9
 8009892:	220a      	movs	r2, #10
 8009894:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009896:	7806      	ldrb	r6, [r0, #0]
 8009898:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800989c:	b2d9      	uxtb	r1, r3
 800989e:	2909      	cmp	r1, #9
 80098a0:	d92a      	bls.n	80098f8 <_strtod_l+0x1b8>
 80098a2:	9905      	ldr	r1, [sp, #20]
 80098a4:	462a      	mov	r2, r5
 80098a6:	f002 ffaf 	bl	800c808 <strncmp>
 80098aa:	b398      	cbz	r0, 8009914 <_strtod_l+0x1d4>
 80098ac:	2000      	movs	r0, #0
 80098ae:	4632      	mov	r2, r6
 80098b0:	463d      	mov	r5, r7
 80098b2:	9005      	str	r0, [sp, #20]
 80098b4:	4603      	mov	r3, r0
 80098b6:	2a65      	cmp	r2, #101	; 0x65
 80098b8:	d001      	beq.n	80098be <_strtod_l+0x17e>
 80098ba:	2a45      	cmp	r2, #69	; 0x45
 80098bc:	d118      	bne.n	80098f0 <_strtod_l+0x1b0>
 80098be:	b91d      	cbnz	r5, 80098c8 <_strtod_l+0x188>
 80098c0:	9a04      	ldr	r2, [sp, #16]
 80098c2:	4302      	orrs	r2, r0
 80098c4:	d09e      	beq.n	8009804 <_strtod_l+0xc4>
 80098c6:	2500      	movs	r5, #0
 80098c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80098cc:	f108 0201 	add.w	r2, r8, #1
 80098d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80098d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80098d6:	2a2b      	cmp	r2, #43	; 0x2b
 80098d8:	d075      	beq.n	80099c6 <_strtod_l+0x286>
 80098da:	2a2d      	cmp	r2, #45	; 0x2d
 80098dc:	d07b      	beq.n	80099d6 <_strtod_l+0x296>
 80098de:	f04f 0c00 	mov.w	ip, #0
 80098e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80098e6:	2909      	cmp	r1, #9
 80098e8:	f240 8082 	bls.w	80099f0 <_strtod_l+0x2b0>
 80098ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80098f0:	2600      	movs	r6, #0
 80098f2:	e09d      	b.n	8009a30 <_strtod_l+0x2f0>
 80098f4:	2300      	movs	r3, #0
 80098f6:	e7c4      	b.n	8009882 <_strtod_l+0x142>
 80098f8:	2f08      	cmp	r7, #8
 80098fa:	bfd8      	it	le
 80098fc:	9907      	ldrle	r1, [sp, #28]
 80098fe:	f100 0001 	add.w	r0, r0, #1
 8009902:	bfda      	itte	le
 8009904:	fb02 3301 	mlale	r3, r2, r1, r3
 8009908:	9307      	strle	r3, [sp, #28]
 800990a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800990e:	3701      	adds	r7, #1
 8009910:	9017      	str	r0, [sp, #92]	; 0x5c
 8009912:	e7bf      	b.n	8009894 <_strtod_l+0x154>
 8009914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009916:	195a      	adds	r2, r3, r5
 8009918:	9217      	str	r2, [sp, #92]	; 0x5c
 800991a:	5d5a      	ldrb	r2, [r3, r5]
 800991c:	2f00      	cmp	r7, #0
 800991e:	d037      	beq.n	8009990 <_strtod_l+0x250>
 8009920:	9005      	str	r0, [sp, #20]
 8009922:	463d      	mov	r5, r7
 8009924:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009928:	2b09      	cmp	r3, #9
 800992a:	d912      	bls.n	8009952 <_strtod_l+0x212>
 800992c:	2301      	movs	r3, #1
 800992e:	e7c2      	b.n	80098b6 <_strtod_l+0x176>
 8009930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	9217      	str	r2, [sp, #92]	; 0x5c
 8009936:	785a      	ldrb	r2, [r3, #1]
 8009938:	3001      	adds	r0, #1
 800993a:	2a30      	cmp	r2, #48	; 0x30
 800993c:	d0f8      	beq.n	8009930 <_strtod_l+0x1f0>
 800993e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009942:	2b08      	cmp	r3, #8
 8009944:	f200 84d9 	bhi.w	800a2fa <_strtod_l+0xbba>
 8009948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800994a:	9005      	str	r0, [sp, #20]
 800994c:	2000      	movs	r0, #0
 800994e:	9308      	str	r3, [sp, #32]
 8009950:	4605      	mov	r5, r0
 8009952:	3a30      	subs	r2, #48	; 0x30
 8009954:	f100 0301 	add.w	r3, r0, #1
 8009958:	d014      	beq.n	8009984 <_strtod_l+0x244>
 800995a:	9905      	ldr	r1, [sp, #20]
 800995c:	4419      	add	r1, r3
 800995e:	9105      	str	r1, [sp, #20]
 8009960:	462b      	mov	r3, r5
 8009962:	eb00 0e05 	add.w	lr, r0, r5
 8009966:	210a      	movs	r1, #10
 8009968:	4573      	cmp	r3, lr
 800996a:	d113      	bne.n	8009994 <_strtod_l+0x254>
 800996c:	182b      	adds	r3, r5, r0
 800996e:	2b08      	cmp	r3, #8
 8009970:	f105 0501 	add.w	r5, r5, #1
 8009974:	4405      	add	r5, r0
 8009976:	dc1c      	bgt.n	80099b2 <_strtod_l+0x272>
 8009978:	9907      	ldr	r1, [sp, #28]
 800997a:	230a      	movs	r3, #10
 800997c:	fb03 2301 	mla	r3, r3, r1, r2
 8009980:	9307      	str	r3, [sp, #28]
 8009982:	2300      	movs	r3, #0
 8009984:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009986:	1c51      	adds	r1, r2, #1
 8009988:	9117      	str	r1, [sp, #92]	; 0x5c
 800998a:	7852      	ldrb	r2, [r2, #1]
 800998c:	4618      	mov	r0, r3
 800998e:	e7c9      	b.n	8009924 <_strtod_l+0x1e4>
 8009990:	4638      	mov	r0, r7
 8009992:	e7d2      	b.n	800993a <_strtod_l+0x1fa>
 8009994:	2b08      	cmp	r3, #8
 8009996:	dc04      	bgt.n	80099a2 <_strtod_l+0x262>
 8009998:	9e07      	ldr	r6, [sp, #28]
 800999a:	434e      	muls	r6, r1
 800999c:	9607      	str	r6, [sp, #28]
 800999e:	3301      	adds	r3, #1
 80099a0:	e7e2      	b.n	8009968 <_strtod_l+0x228>
 80099a2:	f103 0c01 	add.w	ip, r3, #1
 80099a6:	f1bc 0f10 	cmp.w	ip, #16
 80099aa:	bfd8      	it	le
 80099ac:	fb01 f909 	mulle.w	r9, r1, r9
 80099b0:	e7f5      	b.n	800999e <_strtod_l+0x25e>
 80099b2:	2d10      	cmp	r5, #16
 80099b4:	bfdc      	itt	le
 80099b6:	230a      	movle	r3, #10
 80099b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80099bc:	e7e1      	b.n	8009982 <_strtod_l+0x242>
 80099be:	2300      	movs	r3, #0
 80099c0:	9305      	str	r3, [sp, #20]
 80099c2:	2301      	movs	r3, #1
 80099c4:	e77c      	b.n	80098c0 <_strtod_l+0x180>
 80099c6:	f04f 0c00 	mov.w	ip, #0
 80099ca:	f108 0202 	add.w	r2, r8, #2
 80099ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80099d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80099d4:	e785      	b.n	80098e2 <_strtod_l+0x1a2>
 80099d6:	f04f 0c01 	mov.w	ip, #1
 80099da:	e7f6      	b.n	80099ca <_strtod_l+0x28a>
 80099dc:	0800d63c 	.word	0x0800d63c
 80099e0:	0800d3d0 	.word	0x0800d3d0
 80099e4:	7ff00000 	.word	0x7ff00000
 80099e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099ea:	1c51      	adds	r1, r2, #1
 80099ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80099ee:	7852      	ldrb	r2, [r2, #1]
 80099f0:	2a30      	cmp	r2, #48	; 0x30
 80099f2:	d0f9      	beq.n	80099e8 <_strtod_l+0x2a8>
 80099f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80099f8:	2908      	cmp	r1, #8
 80099fa:	f63f af79 	bhi.w	80098f0 <_strtod_l+0x1b0>
 80099fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009a02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a04:	9206      	str	r2, [sp, #24]
 8009a06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a08:	1c51      	adds	r1, r2, #1
 8009a0a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009a0c:	7852      	ldrb	r2, [r2, #1]
 8009a0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009a12:	2e09      	cmp	r6, #9
 8009a14:	d937      	bls.n	8009a86 <_strtod_l+0x346>
 8009a16:	9e06      	ldr	r6, [sp, #24]
 8009a18:	1b89      	subs	r1, r1, r6
 8009a1a:	2908      	cmp	r1, #8
 8009a1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009a20:	dc02      	bgt.n	8009a28 <_strtod_l+0x2e8>
 8009a22:	4576      	cmp	r6, lr
 8009a24:	bfa8      	it	ge
 8009a26:	4676      	movge	r6, lr
 8009a28:	f1bc 0f00 	cmp.w	ip, #0
 8009a2c:	d000      	beq.n	8009a30 <_strtod_l+0x2f0>
 8009a2e:	4276      	negs	r6, r6
 8009a30:	2d00      	cmp	r5, #0
 8009a32:	d14d      	bne.n	8009ad0 <_strtod_l+0x390>
 8009a34:	9904      	ldr	r1, [sp, #16]
 8009a36:	4301      	orrs	r1, r0
 8009a38:	f47f aec6 	bne.w	80097c8 <_strtod_l+0x88>
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f47f aee1 	bne.w	8009804 <_strtod_l+0xc4>
 8009a42:	2a69      	cmp	r2, #105	; 0x69
 8009a44:	d027      	beq.n	8009a96 <_strtod_l+0x356>
 8009a46:	dc24      	bgt.n	8009a92 <_strtod_l+0x352>
 8009a48:	2a49      	cmp	r2, #73	; 0x49
 8009a4a:	d024      	beq.n	8009a96 <_strtod_l+0x356>
 8009a4c:	2a4e      	cmp	r2, #78	; 0x4e
 8009a4e:	f47f aed9 	bne.w	8009804 <_strtod_l+0xc4>
 8009a52:	499f      	ldr	r1, [pc, #636]	; (8009cd0 <_strtod_l+0x590>)
 8009a54:	a817      	add	r0, sp, #92	; 0x5c
 8009a56:	f001 fe6f 	bl	800b738 <__match>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f43f aed2 	beq.w	8009804 <_strtod_l+0xc4>
 8009a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b28      	cmp	r3, #40	; 0x28
 8009a66:	d12d      	bne.n	8009ac4 <_strtod_l+0x384>
 8009a68:	499a      	ldr	r1, [pc, #616]	; (8009cd4 <_strtod_l+0x594>)
 8009a6a:	aa1a      	add	r2, sp, #104	; 0x68
 8009a6c:	a817      	add	r0, sp, #92	; 0x5c
 8009a6e:	f001 fe77 	bl	800b760 <__hexnan>
 8009a72:	2805      	cmp	r0, #5
 8009a74:	d126      	bne.n	8009ac4 <_strtod_l+0x384>
 8009a76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009a7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009a80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009a84:	e6a0      	b.n	80097c8 <_strtod_l+0x88>
 8009a86:	210a      	movs	r1, #10
 8009a88:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009a8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009a90:	e7b9      	b.n	8009a06 <_strtod_l+0x2c6>
 8009a92:	2a6e      	cmp	r2, #110	; 0x6e
 8009a94:	e7db      	b.n	8009a4e <_strtod_l+0x30e>
 8009a96:	4990      	ldr	r1, [pc, #576]	; (8009cd8 <_strtod_l+0x598>)
 8009a98:	a817      	add	r0, sp, #92	; 0x5c
 8009a9a:	f001 fe4d 	bl	800b738 <__match>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f43f aeb0 	beq.w	8009804 <_strtod_l+0xc4>
 8009aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009aa6:	498d      	ldr	r1, [pc, #564]	; (8009cdc <_strtod_l+0x59c>)
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	a817      	add	r0, sp, #92	; 0x5c
 8009aac:	9317      	str	r3, [sp, #92]	; 0x5c
 8009aae:	f001 fe43 	bl	800b738 <__match>
 8009ab2:	b910      	cbnz	r0, 8009aba <_strtod_l+0x37a>
 8009ab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009aba:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009cec <_strtod_l+0x5ac>
 8009abe:	f04f 0a00 	mov.w	sl, #0
 8009ac2:	e681      	b.n	80097c8 <_strtod_l+0x88>
 8009ac4:	4886      	ldr	r0, [pc, #536]	; (8009ce0 <_strtod_l+0x5a0>)
 8009ac6:	f002 fe97 	bl	800c7f8 <nan>
 8009aca:	ec5b ab10 	vmov	sl, fp, d0
 8009ace:	e67b      	b.n	80097c8 <_strtod_l+0x88>
 8009ad0:	9b05      	ldr	r3, [sp, #20]
 8009ad2:	9807      	ldr	r0, [sp, #28]
 8009ad4:	1af3      	subs	r3, r6, r3
 8009ad6:	2f00      	cmp	r7, #0
 8009ad8:	bf08      	it	eq
 8009ada:	462f      	moveq	r7, r5
 8009adc:	2d10      	cmp	r5, #16
 8009ade:	9306      	str	r3, [sp, #24]
 8009ae0:	46a8      	mov	r8, r5
 8009ae2:	bfa8      	it	ge
 8009ae4:	f04f 0810 	movge.w	r8, #16
 8009ae8:	f7f6 fd14 	bl	8000514 <__aeabi_ui2d>
 8009aec:	2d09      	cmp	r5, #9
 8009aee:	4682      	mov	sl, r0
 8009af0:	468b      	mov	fp, r1
 8009af2:	dd13      	ble.n	8009b1c <_strtod_l+0x3dc>
 8009af4:	4b7b      	ldr	r3, [pc, #492]	; (8009ce4 <_strtod_l+0x5a4>)
 8009af6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009afa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009afe:	f7f6 fd83 	bl	8000608 <__aeabi_dmul>
 8009b02:	4682      	mov	sl, r0
 8009b04:	4648      	mov	r0, r9
 8009b06:	468b      	mov	fp, r1
 8009b08:	f7f6 fd04 	bl	8000514 <__aeabi_ui2d>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4650      	mov	r0, sl
 8009b12:	4659      	mov	r1, fp
 8009b14:	f7f6 fbc2 	bl	800029c <__adddf3>
 8009b18:	4682      	mov	sl, r0
 8009b1a:	468b      	mov	fp, r1
 8009b1c:	2d0f      	cmp	r5, #15
 8009b1e:	dc38      	bgt.n	8009b92 <_strtod_l+0x452>
 8009b20:	9b06      	ldr	r3, [sp, #24]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f43f ae50 	beq.w	80097c8 <_strtod_l+0x88>
 8009b28:	dd24      	ble.n	8009b74 <_strtod_l+0x434>
 8009b2a:	2b16      	cmp	r3, #22
 8009b2c:	dc0b      	bgt.n	8009b46 <_strtod_l+0x406>
 8009b2e:	496d      	ldr	r1, [pc, #436]	; (8009ce4 <_strtod_l+0x5a4>)
 8009b30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b38:	4652      	mov	r2, sl
 8009b3a:	465b      	mov	r3, fp
 8009b3c:	f7f6 fd64 	bl	8000608 <__aeabi_dmul>
 8009b40:	4682      	mov	sl, r0
 8009b42:	468b      	mov	fp, r1
 8009b44:	e640      	b.n	80097c8 <_strtod_l+0x88>
 8009b46:	9a06      	ldr	r2, [sp, #24]
 8009b48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	db20      	blt.n	8009b92 <_strtod_l+0x452>
 8009b50:	4c64      	ldr	r4, [pc, #400]	; (8009ce4 <_strtod_l+0x5a4>)
 8009b52:	f1c5 050f 	rsb	r5, r5, #15
 8009b56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009b5a:	4652      	mov	r2, sl
 8009b5c:	465b      	mov	r3, fp
 8009b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b62:	f7f6 fd51 	bl	8000608 <__aeabi_dmul>
 8009b66:	9b06      	ldr	r3, [sp, #24]
 8009b68:	1b5d      	subs	r5, r3, r5
 8009b6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009b6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b72:	e7e3      	b.n	8009b3c <_strtod_l+0x3fc>
 8009b74:	9b06      	ldr	r3, [sp, #24]
 8009b76:	3316      	adds	r3, #22
 8009b78:	db0b      	blt.n	8009b92 <_strtod_l+0x452>
 8009b7a:	9b05      	ldr	r3, [sp, #20]
 8009b7c:	1b9e      	subs	r6, r3, r6
 8009b7e:	4b59      	ldr	r3, [pc, #356]	; (8009ce4 <_strtod_l+0x5a4>)
 8009b80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009b84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b88:	4650      	mov	r0, sl
 8009b8a:	4659      	mov	r1, fp
 8009b8c:	f7f6 fe66 	bl	800085c <__aeabi_ddiv>
 8009b90:	e7d6      	b.n	8009b40 <_strtod_l+0x400>
 8009b92:	9b06      	ldr	r3, [sp, #24]
 8009b94:	eba5 0808 	sub.w	r8, r5, r8
 8009b98:	4498      	add	r8, r3
 8009b9a:	f1b8 0f00 	cmp.w	r8, #0
 8009b9e:	dd74      	ble.n	8009c8a <_strtod_l+0x54a>
 8009ba0:	f018 030f 	ands.w	r3, r8, #15
 8009ba4:	d00a      	beq.n	8009bbc <_strtod_l+0x47c>
 8009ba6:	494f      	ldr	r1, [pc, #316]	; (8009ce4 <_strtod_l+0x5a4>)
 8009ba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bac:	4652      	mov	r2, sl
 8009bae:	465b      	mov	r3, fp
 8009bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb4:	f7f6 fd28 	bl	8000608 <__aeabi_dmul>
 8009bb8:	4682      	mov	sl, r0
 8009bba:	468b      	mov	fp, r1
 8009bbc:	f038 080f 	bics.w	r8, r8, #15
 8009bc0:	d04f      	beq.n	8009c62 <_strtod_l+0x522>
 8009bc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009bc6:	dd22      	ble.n	8009c0e <_strtod_l+0x4ce>
 8009bc8:	2500      	movs	r5, #0
 8009bca:	462e      	mov	r6, r5
 8009bcc:	9507      	str	r5, [sp, #28]
 8009bce:	9505      	str	r5, [sp, #20]
 8009bd0:	2322      	movs	r3, #34	; 0x22
 8009bd2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009cec <_strtod_l+0x5ac>
 8009bd6:	6023      	str	r3, [r4, #0]
 8009bd8:	f04f 0a00 	mov.w	sl, #0
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f43f adf2 	beq.w	80097c8 <_strtod_l+0x88>
 8009be4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009be6:	4620      	mov	r0, r4
 8009be8:	f001 feb8 	bl	800b95c <_Bfree>
 8009bec:	9905      	ldr	r1, [sp, #20]
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f001 feb4 	bl	800b95c <_Bfree>
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f001 feb0 	bl	800b95c <_Bfree>
 8009bfc:	9907      	ldr	r1, [sp, #28]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f001 feac 	bl	800b95c <_Bfree>
 8009c04:	4629      	mov	r1, r5
 8009c06:	4620      	mov	r0, r4
 8009c08:	f001 fea8 	bl	800b95c <_Bfree>
 8009c0c:	e5dc      	b.n	80097c8 <_strtod_l+0x88>
 8009c0e:	4b36      	ldr	r3, [pc, #216]	; (8009ce8 <_strtod_l+0x5a8>)
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	2300      	movs	r3, #0
 8009c14:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009c18:	4650      	mov	r0, sl
 8009c1a:	4659      	mov	r1, fp
 8009c1c:	4699      	mov	r9, r3
 8009c1e:	f1b8 0f01 	cmp.w	r8, #1
 8009c22:	dc21      	bgt.n	8009c68 <_strtod_l+0x528>
 8009c24:	b10b      	cbz	r3, 8009c2a <_strtod_l+0x4ea>
 8009c26:	4682      	mov	sl, r0
 8009c28:	468b      	mov	fp, r1
 8009c2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ce8 <_strtod_l+0x5a8>)
 8009c2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009c34:	4652      	mov	r2, sl
 8009c36:	465b      	mov	r3, fp
 8009c38:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009c3c:	f7f6 fce4 	bl	8000608 <__aeabi_dmul>
 8009c40:	4b2a      	ldr	r3, [pc, #168]	; (8009cec <_strtod_l+0x5ac>)
 8009c42:	460a      	mov	r2, r1
 8009c44:	400b      	ands	r3, r1
 8009c46:	492a      	ldr	r1, [pc, #168]	; (8009cf0 <_strtod_l+0x5b0>)
 8009c48:	428b      	cmp	r3, r1
 8009c4a:	4682      	mov	sl, r0
 8009c4c:	d8bc      	bhi.n	8009bc8 <_strtod_l+0x488>
 8009c4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c52:	428b      	cmp	r3, r1
 8009c54:	bf86      	itte	hi
 8009c56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009cf4 <_strtod_l+0x5b4>
 8009c5a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8009c5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009c62:	2300      	movs	r3, #0
 8009c64:	9304      	str	r3, [sp, #16]
 8009c66:	e084      	b.n	8009d72 <_strtod_l+0x632>
 8009c68:	f018 0f01 	tst.w	r8, #1
 8009c6c:	d005      	beq.n	8009c7a <_strtod_l+0x53a>
 8009c6e:	9b04      	ldr	r3, [sp, #16]
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f7f6 fcc8 	bl	8000608 <__aeabi_dmul>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	9a04      	ldr	r2, [sp, #16]
 8009c7c:	3208      	adds	r2, #8
 8009c7e:	f109 0901 	add.w	r9, r9, #1
 8009c82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c86:	9204      	str	r2, [sp, #16]
 8009c88:	e7c9      	b.n	8009c1e <_strtod_l+0x4de>
 8009c8a:	d0ea      	beq.n	8009c62 <_strtod_l+0x522>
 8009c8c:	f1c8 0800 	rsb	r8, r8, #0
 8009c90:	f018 020f 	ands.w	r2, r8, #15
 8009c94:	d00a      	beq.n	8009cac <_strtod_l+0x56c>
 8009c96:	4b13      	ldr	r3, [pc, #76]	; (8009ce4 <_strtod_l+0x5a4>)
 8009c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c9c:	4650      	mov	r0, sl
 8009c9e:	4659      	mov	r1, fp
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	f7f6 fdda 	bl	800085c <__aeabi_ddiv>
 8009ca8:	4682      	mov	sl, r0
 8009caa:	468b      	mov	fp, r1
 8009cac:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009cb0:	d0d7      	beq.n	8009c62 <_strtod_l+0x522>
 8009cb2:	f1b8 0f1f 	cmp.w	r8, #31
 8009cb6:	dd1f      	ble.n	8009cf8 <_strtod_l+0x5b8>
 8009cb8:	2500      	movs	r5, #0
 8009cba:	462e      	mov	r6, r5
 8009cbc:	9507      	str	r5, [sp, #28]
 8009cbe:	9505      	str	r5, [sp, #20]
 8009cc0:	2322      	movs	r3, #34	; 0x22
 8009cc2:	f04f 0a00 	mov.w	sl, #0
 8009cc6:	f04f 0b00 	mov.w	fp, #0
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	e786      	b.n	8009bdc <_strtod_l+0x49c>
 8009cce:	bf00      	nop
 8009cd0:	0800d331 	.word	0x0800d331
 8009cd4:	0800d3e4 	.word	0x0800d3e4
 8009cd8:	0800d329 	.word	0x0800d329
 8009cdc:	0800d560 	.word	0x0800d560
 8009ce0:	0800d45b 	.word	0x0800d45b
 8009ce4:	0800d6d8 	.word	0x0800d6d8
 8009ce8:	0800d6b0 	.word	0x0800d6b0
 8009cec:	7ff00000 	.word	0x7ff00000
 8009cf0:	7ca00000 	.word	0x7ca00000
 8009cf4:	7fefffff 	.word	0x7fefffff
 8009cf8:	f018 0310 	ands.w	r3, r8, #16
 8009cfc:	bf18      	it	ne
 8009cfe:	236a      	movne	r3, #106	; 0x6a
 8009d00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a0b0 <_strtod_l+0x970>
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	4650      	mov	r0, sl
 8009d08:	4659      	mov	r1, fp
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f018 0f01 	tst.w	r8, #1
 8009d10:	d004      	beq.n	8009d1c <_strtod_l+0x5dc>
 8009d12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d16:	f7f6 fc77 	bl	8000608 <__aeabi_dmul>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009d20:	f109 0908 	add.w	r9, r9, #8
 8009d24:	d1f2      	bne.n	8009d0c <_strtod_l+0x5cc>
 8009d26:	b10b      	cbz	r3, 8009d2c <_strtod_l+0x5ec>
 8009d28:	4682      	mov	sl, r0
 8009d2a:	468b      	mov	fp, r1
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	b1c3      	cbz	r3, 8009d62 <_strtod_l+0x622>
 8009d30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	4659      	mov	r1, fp
 8009d3c:	dd11      	ble.n	8009d62 <_strtod_l+0x622>
 8009d3e:	2b1f      	cmp	r3, #31
 8009d40:	f340 8124 	ble.w	8009f8c <_strtod_l+0x84c>
 8009d44:	2b34      	cmp	r3, #52	; 0x34
 8009d46:	bfde      	ittt	le
 8009d48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d4c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009d50:	fa03 f202 	lslle.w	r2, r3, r2
 8009d54:	f04f 0a00 	mov.w	sl, #0
 8009d58:	bfcc      	ite	gt
 8009d5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009d5e:	ea02 0b01 	andle.w	fp, r2, r1
 8009d62:	2200      	movs	r2, #0
 8009d64:	2300      	movs	r3, #0
 8009d66:	4650      	mov	r0, sl
 8009d68:	4659      	mov	r1, fp
 8009d6a:	f7f6 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d1a2      	bne.n	8009cb8 <_strtod_l+0x578>
 8009d72:	9b07      	ldr	r3, [sp, #28]
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	9908      	ldr	r1, [sp, #32]
 8009d78:	462b      	mov	r3, r5
 8009d7a:	463a      	mov	r2, r7
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f001 fe55 	bl	800ba2c <__s2b>
 8009d82:	9007      	str	r0, [sp, #28]
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f43f af1f 	beq.w	8009bc8 <_strtod_l+0x488>
 8009d8a:	9b05      	ldr	r3, [sp, #20]
 8009d8c:	1b9e      	subs	r6, r3, r6
 8009d8e:	9b06      	ldr	r3, [sp, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	bfb4      	ite	lt
 8009d94:	4633      	movlt	r3, r6
 8009d96:	2300      	movge	r3, #0
 8009d98:	930c      	str	r3, [sp, #48]	; 0x30
 8009d9a:	9b06      	ldr	r3, [sp, #24]
 8009d9c:	2500      	movs	r5, #0
 8009d9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009da2:	9312      	str	r3, [sp, #72]	; 0x48
 8009da4:	462e      	mov	r6, r5
 8009da6:	9b07      	ldr	r3, [sp, #28]
 8009da8:	4620      	mov	r0, r4
 8009daa:	6859      	ldr	r1, [r3, #4]
 8009dac:	f001 fd96 	bl	800b8dc <_Balloc>
 8009db0:	9005      	str	r0, [sp, #20]
 8009db2:	2800      	cmp	r0, #0
 8009db4:	f43f af0c 	beq.w	8009bd0 <_strtod_l+0x490>
 8009db8:	9b07      	ldr	r3, [sp, #28]
 8009dba:	691a      	ldr	r2, [r3, #16]
 8009dbc:	3202      	adds	r2, #2
 8009dbe:	f103 010c 	add.w	r1, r3, #12
 8009dc2:	0092      	lsls	r2, r2, #2
 8009dc4:	300c      	adds	r0, #12
 8009dc6:	f7fe fc8b 	bl	80086e0 <memcpy>
 8009dca:	ec4b ab10 	vmov	d0, sl, fp
 8009dce:	aa1a      	add	r2, sp, #104	; 0x68
 8009dd0:	a919      	add	r1, sp, #100	; 0x64
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f002 f970 	bl	800c0b8 <__d2b>
 8009dd8:	ec4b ab18 	vmov	d8, sl, fp
 8009ddc:	9018      	str	r0, [sp, #96]	; 0x60
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f43f aef6 	beq.w	8009bd0 <_strtod_l+0x490>
 8009de4:	2101      	movs	r1, #1
 8009de6:	4620      	mov	r0, r4
 8009de8:	f001 feba 	bl	800bb60 <__i2b>
 8009dec:	4606      	mov	r6, r0
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f43f aeee 	beq.w	8009bd0 <_strtod_l+0x490>
 8009df4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009df6:	9904      	ldr	r1, [sp, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfab      	itete	ge
 8009dfc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009dfe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009e00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009e02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009e06:	bfac      	ite	ge
 8009e08:	eb03 0902 	addge.w	r9, r3, r2
 8009e0c:	1ad7      	sublt	r7, r2, r3
 8009e0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e10:	eba3 0801 	sub.w	r8, r3, r1
 8009e14:	4490      	add	r8, r2
 8009e16:	4ba1      	ldr	r3, [pc, #644]	; (800a09c <_strtod_l+0x95c>)
 8009e18:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009e1c:	4598      	cmp	r8, r3
 8009e1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e22:	f280 80c7 	bge.w	8009fb4 <_strtod_l+0x874>
 8009e26:	eba3 0308 	sub.w	r3, r3, r8
 8009e2a:	2b1f      	cmp	r3, #31
 8009e2c:	eba2 0203 	sub.w	r2, r2, r3
 8009e30:	f04f 0101 	mov.w	r1, #1
 8009e34:	f300 80b1 	bgt.w	8009f9a <_strtod_l+0x85a>
 8009e38:	fa01 f303 	lsl.w	r3, r1, r3
 8009e3c:	930d      	str	r3, [sp, #52]	; 0x34
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9308      	str	r3, [sp, #32]
 8009e42:	eb09 0802 	add.w	r8, r9, r2
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	45c1      	cmp	r9, r8
 8009e4a:	4417      	add	r7, r2
 8009e4c:	441f      	add	r7, r3
 8009e4e:	464b      	mov	r3, r9
 8009e50:	bfa8      	it	ge
 8009e52:	4643      	movge	r3, r8
 8009e54:	42bb      	cmp	r3, r7
 8009e56:	bfa8      	it	ge
 8009e58:	463b      	movge	r3, r7
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bfc2      	ittt	gt
 8009e5e:	eba8 0803 	subgt.w	r8, r8, r3
 8009e62:	1aff      	subgt	r7, r7, r3
 8009e64:	eba9 0903 	subgt.w	r9, r9, r3
 8009e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	dd17      	ble.n	8009e9e <_strtod_l+0x75e>
 8009e6e:	4631      	mov	r1, r6
 8009e70:	461a      	mov	r2, r3
 8009e72:	4620      	mov	r0, r4
 8009e74:	f001 ff34 	bl	800bce0 <__pow5mult>
 8009e78:	4606      	mov	r6, r0
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	f43f aea8 	beq.w	8009bd0 <_strtod_l+0x490>
 8009e80:	4601      	mov	r1, r0
 8009e82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e84:	4620      	mov	r0, r4
 8009e86:	f001 fe81 	bl	800bb8c <__multiply>
 8009e8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f43f ae9f 	beq.w	8009bd0 <_strtod_l+0x490>
 8009e92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e94:	4620      	mov	r0, r4
 8009e96:	f001 fd61 	bl	800b95c <_Bfree>
 8009e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e9c:	9318      	str	r3, [sp, #96]	; 0x60
 8009e9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ea2:	f300 808c 	bgt.w	8009fbe <_strtod_l+0x87e>
 8009ea6:	9b06      	ldr	r3, [sp, #24]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dd08      	ble.n	8009ebe <_strtod_l+0x77e>
 8009eac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009eae:	9905      	ldr	r1, [sp, #20]
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f001 ff15 	bl	800bce0 <__pow5mult>
 8009eb6:	9005      	str	r0, [sp, #20]
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	f43f ae89 	beq.w	8009bd0 <_strtod_l+0x490>
 8009ebe:	2f00      	cmp	r7, #0
 8009ec0:	dd08      	ble.n	8009ed4 <_strtod_l+0x794>
 8009ec2:	9905      	ldr	r1, [sp, #20]
 8009ec4:	463a      	mov	r2, r7
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f001 ff64 	bl	800bd94 <__lshift>
 8009ecc:	9005      	str	r0, [sp, #20]
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f43f ae7e 	beq.w	8009bd0 <_strtod_l+0x490>
 8009ed4:	f1b9 0f00 	cmp.w	r9, #0
 8009ed8:	dd08      	ble.n	8009eec <_strtod_l+0x7ac>
 8009eda:	4631      	mov	r1, r6
 8009edc:	464a      	mov	r2, r9
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f001 ff58 	bl	800bd94 <__lshift>
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	f43f ae72 	beq.w	8009bd0 <_strtod_l+0x490>
 8009eec:	9a05      	ldr	r2, [sp, #20]
 8009eee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f001 ffdb 	bl	800beac <__mdiff>
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	f43f ae69 	beq.w	8009bd0 <_strtod_l+0x490>
 8009efe:	68c3      	ldr	r3, [r0, #12]
 8009f00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f02:	2300      	movs	r3, #0
 8009f04:	60c3      	str	r3, [r0, #12]
 8009f06:	4631      	mov	r1, r6
 8009f08:	f001 ffb4 	bl	800be74 <__mcmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	da60      	bge.n	8009fd2 <_strtod_l+0x892>
 8009f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f12:	ea53 030a 	orrs.w	r3, r3, sl
 8009f16:	f040 8082 	bne.w	800a01e <_strtod_l+0x8de>
 8009f1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d17d      	bne.n	800a01e <_strtod_l+0x8de>
 8009f22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f26:	0d1b      	lsrs	r3, r3, #20
 8009f28:	051b      	lsls	r3, r3, #20
 8009f2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f2e:	d976      	bls.n	800a01e <_strtod_l+0x8de>
 8009f30:	696b      	ldr	r3, [r5, #20]
 8009f32:	b913      	cbnz	r3, 8009f3a <_strtod_l+0x7fa>
 8009f34:	692b      	ldr	r3, [r5, #16]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	dd71      	ble.n	800a01e <_strtod_l+0x8de>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f001 ff28 	bl	800bd94 <__lshift>
 8009f44:	4631      	mov	r1, r6
 8009f46:	4605      	mov	r5, r0
 8009f48:	f001 ff94 	bl	800be74 <__mcmp>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	dd66      	ble.n	800a01e <_strtod_l+0x8de>
 8009f50:	9904      	ldr	r1, [sp, #16]
 8009f52:	4a53      	ldr	r2, [pc, #332]	; (800a0a0 <_strtod_l+0x960>)
 8009f54:	465b      	mov	r3, fp
 8009f56:	2900      	cmp	r1, #0
 8009f58:	f000 8081 	beq.w	800a05e <_strtod_l+0x91e>
 8009f5c:	ea02 010b 	and.w	r1, r2, fp
 8009f60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f64:	dc7b      	bgt.n	800a05e <_strtod_l+0x91e>
 8009f66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f6a:	f77f aea9 	ble.w	8009cc0 <_strtod_l+0x580>
 8009f6e:	4b4d      	ldr	r3, [pc, #308]	; (800a0a4 <_strtod_l+0x964>)
 8009f70:	4650      	mov	r0, sl
 8009f72:	4659      	mov	r1, fp
 8009f74:	2200      	movs	r2, #0
 8009f76:	f7f6 fb47 	bl	8000608 <__aeabi_dmul>
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4303      	orrs	r3, r0
 8009f7e:	bf08      	it	eq
 8009f80:	2322      	moveq	r3, #34	; 0x22
 8009f82:	4682      	mov	sl, r0
 8009f84:	468b      	mov	fp, r1
 8009f86:	bf08      	it	eq
 8009f88:	6023      	streq	r3, [r4, #0]
 8009f8a:	e62b      	b.n	8009be4 <_strtod_l+0x4a4>
 8009f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f90:	fa02 f303 	lsl.w	r3, r2, r3
 8009f94:	ea03 0a0a 	and.w	sl, r3, sl
 8009f98:	e6e3      	b.n	8009d62 <_strtod_l+0x622>
 8009f9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009f9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009fa2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009fa6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009faa:	fa01 f308 	lsl.w	r3, r1, r8
 8009fae:	9308      	str	r3, [sp, #32]
 8009fb0:	910d      	str	r1, [sp, #52]	; 0x34
 8009fb2:	e746      	b.n	8009e42 <_strtod_l+0x702>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	9308      	str	r3, [sp, #32]
 8009fb8:	2301      	movs	r3, #1
 8009fba:	930d      	str	r3, [sp, #52]	; 0x34
 8009fbc:	e741      	b.n	8009e42 <_strtod_l+0x702>
 8009fbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f001 fee6 	bl	800bd94 <__lshift>
 8009fc8:	9018      	str	r0, [sp, #96]	; 0x60
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	f47f af6b 	bne.w	8009ea6 <_strtod_l+0x766>
 8009fd0:	e5fe      	b.n	8009bd0 <_strtod_l+0x490>
 8009fd2:	465f      	mov	r7, fp
 8009fd4:	d16e      	bne.n	800a0b4 <_strtod_l+0x974>
 8009fd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fdc:	b342      	cbz	r2, 800a030 <_strtod_l+0x8f0>
 8009fde:	4a32      	ldr	r2, [pc, #200]	; (800a0a8 <_strtod_l+0x968>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d128      	bne.n	800a036 <_strtod_l+0x8f6>
 8009fe4:	9b04      	ldr	r3, [sp, #16]
 8009fe6:	4651      	mov	r1, sl
 8009fe8:	b1eb      	cbz	r3, 800a026 <_strtod_l+0x8e6>
 8009fea:	4b2d      	ldr	r3, [pc, #180]	; (800a0a0 <_strtod_l+0x960>)
 8009fec:	403b      	ands	r3, r7
 8009fee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ff6:	d819      	bhi.n	800a02c <_strtod_l+0x8ec>
 8009ff8:	0d1b      	lsrs	r3, r3, #20
 8009ffa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	4299      	cmp	r1, r3
 800a004:	d117      	bne.n	800a036 <_strtod_l+0x8f6>
 800a006:	4b29      	ldr	r3, [pc, #164]	; (800a0ac <_strtod_l+0x96c>)
 800a008:	429f      	cmp	r7, r3
 800a00a:	d102      	bne.n	800a012 <_strtod_l+0x8d2>
 800a00c:	3101      	adds	r1, #1
 800a00e:	f43f addf 	beq.w	8009bd0 <_strtod_l+0x490>
 800a012:	4b23      	ldr	r3, [pc, #140]	; (800a0a0 <_strtod_l+0x960>)
 800a014:	403b      	ands	r3, r7
 800a016:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a01a:	f04f 0a00 	mov.w	sl, #0
 800a01e:	9b04      	ldr	r3, [sp, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1a4      	bne.n	8009f6e <_strtod_l+0x82e>
 800a024:	e5de      	b.n	8009be4 <_strtod_l+0x4a4>
 800a026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a02a:	e7ea      	b.n	800a002 <_strtod_l+0x8c2>
 800a02c:	4613      	mov	r3, r2
 800a02e:	e7e8      	b.n	800a002 <_strtod_l+0x8c2>
 800a030:	ea53 030a 	orrs.w	r3, r3, sl
 800a034:	d08c      	beq.n	8009f50 <_strtod_l+0x810>
 800a036:	9b08      	ldr	r3, [sp, #32]
 800a038:	b1db      	cbz	r3, 800a072 <_strtod_l+0x932>
 800a03a:	423b      	tst	r3, r7
 800a03c:	d0ef      	beq.n	800a01e <_strtod_l+0x8de>
 800a03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a040:	9a04      	ldr	r2, [sp, #16]
 800a042:	4650      	mov	r0, sl
 800a044:	4659      	mov	r1, fp
 800a046:	b1c3      	cbz	r3, 800a07a <_strtod_l+0x93a>
 800a048:	f7ff fb5c 	bl	8009704 <sulp>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	ec51 0b18 	vmov	r0, r1, d8
 800a054:	f7f6 f922 	bl	800029c <__adddf3>
 800a058:	4682      	mov	sl, r0
 800a05a:	468b      	mov	fp, r1
 800a05c:	e7df      	b.n	800a01e <_strtod_l+0x8de>
 800a05e:	4013      	ands	r3, r2
 800a060:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a064:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a068:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a06c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a070:	e7d5      	b.n	800a01e <_strtod_l+0x8de>
 800a072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a074:	ea13 0f0a 	tst.w	r3, sl
 800a078:	e7e0      	b.n	800a03c <_strtod_l+0x8fc>
 800a07a:	f7ff fb43 	bl	8009704 <sulp>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	ec51 0b18 	vmov	r0, r1, d8
 800a086:	f7f6 f907 	bl	8000298 <__aeabi_dsub>
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	4682      	mov	sl, r0
 800a090:	468b      	mov	fp, r1
 800a092:	f7f6 fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 800a096:	2800      	cmp	r0, #0
 800a098:	d0c1      	beq.n	800a01e <_strtod_l+0x8de>
 800a09a:	e611      	b.n	8009cc0 <_strtod_l+0x580>
 800a09c:	fffffc02 	.word	0xfffffc02
 800a0a0:	7ff00000 	.word	0x7ff00000
 800a0a4:	39500000 	.word	0x39500000
 800a0a8:	000fffff 	.word	0x000fffff
 800a0ac:	7fefffff 	.word	0x7fefffff
 800a0b0:	0800d3f8 	.word	0x0800d3f8
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f002 f85a 	bl	800c170 <__ratio>
 800a0bc:	ec59 8b10 	vmov	r8, r9, d0
 800a0c0:	ee10 0a10 	vmov	r0, s0
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f7f6 fd18 	bl	8000b00 <__aeabi_dcmple>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d07a      	beq.n	800a1ca <_strtod_l+0xa8a>
 800a0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d04a      	beq.n	800a170 <_strtod_l+0xa30>
 800a0da:	4b95      	ldr	r3, [pc, #596]	; (800a330 <_strtod_l+0xbf0>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a330 <_strtod_l+0xbf0>
 800a0e6:	f04f 0800 	mov.w	r8, #0
 800a0ea:	4b92      	ldr	r3, [pc, #584]	; (800a334 <_strtod_l+0xbf4>)
 800a0ec:	403b      	ands	r3, r7
 800a0ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a0f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0f2:	4b91      	ldr	r3, [pc, #580]	; (800a338 <_strtod_l+0xbf8>)
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	f040 80b0 	bne.w	800a25a <_strtod_l+0xb1a>
 800a0fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a102:	ec4b ab10 	vmov	d0, sl, fp
 800a106:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a10a:	f001 ff59 	bl	800bfc0 <__ulp>
 800a10e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a112:	ec53 2b10 	vmov	r2, r3, d0
 800a116:	f7f6 fa77 	bl	8000608 <__aeabi_dmul>
 800a11a:	4652      	mov	r2, sl
 800a11c:	465b      	mov	r3, fp
 800a11e:	f7f6 f8bd 	bl	800029c <__adddf3>
 800a122:	460b      	mov	r3, r1
 800a124:	4983      	ldr	r1, [pc, #524]	; (800a334 <_strtod_l+0xbf4>)
 800a126:	4a85      	ldr	r2, [pc, #532]	; (800a33c <_strtod_l+0xbfc>)
 800a128:	4019      	ands	r1, r3
 800a12a:	4291      	cmp	r1, r2
 800a12c:	4682      	mov	sl, r0
 800a12e:	d960      	bls.n	800a1f2 <_strtod_l+0xab2>
 800a130:	ee18 3a90 	vmov	r3, s17
 800a134:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a138:	4293      	cmp	r3, r2
 800a13a:	d104      	bne.n	800a146 <_strtod_l+0xa06>
 800a13c:	ee18 3a10 	vmov	r3, s16
 800a140:	3301      	adds	r3, #1
 800a142:	f43f ad45 	beq.w	8009bd0 <_strtod_l+0x490>
 800a146:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a348 <_strtod_l+0xc08>
 800a14a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a14e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a150:	4620      	mov	r0, r4
 800a152:	f001 fc03 	bl	800b95c <_Bfree>
 800a156:	9905      	ldr	r1, [sp, #20]
 800a158:	4620      	mov	r0, r4
 800a15a:	f001 fbff 	bl	800b95c <_Bfree>
 800a15e:	4631      	mov	r1, r6
 800a160:	4620      	mov	r0, r4
 800a162:	f001 fbfb 	bl	800b95c <_Bfree>
 800a166:	4629      	mov	r1, r5
 800a168:	4620      	mov	r0, r4
 800a16a:	f001 fbf7 	bl	800b95c <_Bfree>
 800a16e:	e61a      	b.n	8009da6 <_strtod_l+0x666>
 800a170:	f1ba 0f00 	cmp.w	sl, #0
 800a174:	d11b      	bne.n	800a1ae <_strtod_l+0xa6e>
 800a176:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a17a:	b9f3      	cbnz	r3, 800a1ba <_strtod_l+0xa7a>
 800a17c:	4b6c      	ldr	r3, [pc, #432]	; (800a330 <_strtod_l+0xbf0>)
 800a17e:	2200      	movs	r2, #0
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 fcb2 	bl	8000aec <__aeabi_dcmplt>
 800a188:	b9d0      	cbnz	r0, 800a1c0 <_strtod_l+0xa80>
 800a18a:	4640      	mov	r0, r8
 800a18c:	4649      	mov	r1, r9
 800a18e:	4b6c      	ldr	r3, [pc, #432]	; (800a340 <_strtod_l+0xc00>)
 800a190:	2200      	movs	r2, #0
 800a192:	f7f6 fa39 	bl	8000608 <__aeabi_dmul>
 800a196:	4680      	mov	r8, r0
 800a198:	4689      	mov	r9, r1
 800a19a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a19e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a1a2:	9315      	str	r3, [sp, #84]	; 0x54
 800a1a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a1a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1ac:	e79d      	b.n	800a0ea <_strtod_l+0x9aa>
 800a1ae:	f1ba 0f01 	cmp.w	sl, #1
 800a1b2:	d102      	bne.n	800a1ba <_strtod_l+0xa7a>
 800a1b4:	2f00      	cmp	r7, #0
 800a1b6:	f43f ad83 	beq.w	8009cc0 <_strtod_l+0x580>
 800a1ba:	4b62      	ldr	r3, [pc, #392]	; (800a344 <_strtod_l+0xc04>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	e78e      	b.n	800a0de <_strtod_l+0x99e>
 800a1c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a340 <_strtod_l+0xc00>
 800a1c4:	f04f 0800 	mov.w	r8, #0
 800a1c8:	e7e7      	b.n	800a19a <_strtod_l+0xa5a>
 800a1ca:	4b5d      	ldr	r3, [pc, #372]	; (800a340 <_strtod_l+0xc00>)
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f7f6 fa19 	bl	8000608 <__aeabi_dmul>
 800a1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d8:	4680      	mov	r8, r0
 800a1da:	4689      	mov	r9, r1
 800a1dc:	b933      	cbnz	r3, 800a1ec <_strtod_l+0xaac>
 800a1de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1e2:	900e      	str	r0, [sp, #56]	; 0x38
 800a1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a1ea:	e7dd      	b.n	800a1a8 <_strtod_l+0xa68>
 800a1ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a1f0:	e7f9      	b.n	800a1e6 <_strtod_l+0xaa6>
 800a1f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a1f6:	9b04      	ldr	r3, [sp, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1a8      	bne.n	800a14e <_strtod_l+0xa0e>
 800a1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a202:	0d1b      	lsrs	r3, r3, #20
 800a204:	051b      	lsls	r3, r3, #20
 800a206:	429a      	cmp	r2, r3
 800a208:	d1a1      	bne.n	800a14e <_strtod_l+0xa0e>
 800a20a:	4640      	mov	r0, r8
 800a20c:	4649      	mov	r1, r9
 800a20e:	f7f6 fd5b 	bl	8000cc8 <__aeabi_d2lz>
 800a212:	f7f6 f9cb 	bl	80005ac <__aeabi_l2d>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	f7f6 f83b 	bl	8000298 <__aeabi_dsub>
 800a222:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a224:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a228:	ea43 030a 	orr.w	r3, r3, sl
 800a22c:	4313      	orrs	r3, r2
 800a22e:	4680      	mov	r8, r0
 800a230:	4689      	mov	r9, r1
 800a232:	d055      	beq.n	800a2e0 <_strtod_l+0xba0>
 800a234:	a336      	add	r3, pc, #216	; (adr r3, 800a310 <_strtod_l+0xbd0>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	f7f6 fc57 	bl	8000aec <__aeabi_dcmplt>
 800a23e:	2800      	cmp	r0, #0
 800a240:	f47f acd0 	bne.w	8009be4 <_strtod_l+0x4a4>
 800a244:	a334      	add	r3, pc, #208	; (adr r3, 800a318 <_strtod_l+0xbd8>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	4640      	mov	r0, r8
 800a24c:	4649      	mov	r1, r9
 800a24e:	f7f6 fc6b 	bl	8000b28 <__aeabi_dcmpgt>
 800a252:	2800      	cmp	r0, #0
 800a254:	f43f af7b 	beq.w	800a14e <_strtod_l+0xa0e>
 800a258:	e4c4      	b.n	8009be4 <_strtod_l+0x4a4>
 800a25a:	9b04      	ldr	r3, [sp, #16]
 800a25c:	b333      	cbz	r3, 800a2ac <_strtod_l+0xb6c>
 800a25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a260:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a264:	d822      	bhi.n	800a2ac <_strtod_l+0xb6c>
 800a266:	a32e      	add	r3, pc, #184	; (adr r3, 800a320 <_strtod_l+0xbe0>)
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	4640      	mov	r0, r8
 800a26e:	4649      	mov	r1, r9
 800a270:	f7f6 fc46 	bl	8000b00 <__aeabi_dcmple>
 800a274:	b1a0      	cbz	r0, 800a2a0 <_strtod_l+0xb60>
 800a276:	4649      	mov	r1, r9
 800a278:	4640      	mov	r0, r8
 800a27a:	f7f6 fc9d 	bl	8000bb8 <__aeabi_d2uiz>
 800a27e:	2801      	cmp	r0, #1
 800a280:	bf38      	it	cc
 800a282:	2001      	movcc	r0, #1
 800a284:	f7f6 f946 	bl	8000514 <__aeabi_ui2d>
 800a288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a28a:	4680      	mov	r8, r0
 800a28c:	4689      	mov	r9, r1
 800a28e:	bb23      	cbnz	r3, 800a2da <_strtod_l+0xb9a>
 800a290:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a294:	9010      	str	r0, [sp, #64]	; 0x40
 800a296:	9311      	str	r3, [sp, #68]	; 0x44
 800a298:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a29c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a2a8:	1a9b      	subs	r3, r3, r2
 800a2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a2b4:	eef0 0a68 	vmov.f32	s1, s17
 800a2b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2bc:	f001 fe80 	bl	800bfc0 <__ulp>
 800a2c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2c4:	ec53 2b10 	vmov	r2, r3, d0
 800a2c8:	f7f6 f99e 	bl	8000608 <__aeabi_dmul>
 800a2cc:	ec53 2b18 	vmov	r2, r3, d8
 800a2d0:	f7f5 ffe4 	bl	800029c <__adddf3>
 800a2d4:	4682      	mov	sl, r0
 800a2d6:	468b      	mov	fp, r1
 800a2d8:	e78d      	b.n	800a1f6 <_strtod_l+0xab6>
 800a2da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a2de:	e7db      	b.n	800a298 <_strtod_l+0xb58>
 800a2e0:	a311      	add	r3, pc, #68	; (adr r3, 800a328 <_strtod_l+0xbe8>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f7f6 fc01 	bl	8000aec <__aeabi_dcmplt>
 800a2ea:	e7b2      	b.n	800a252 <_strtod_l+0xb12>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a2f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2f4:	6013      	str	r3, [r2, #0]
 800a2f6:	f7ff ba6b 	b.w	80097d0 <_strtod_l+0x90>
 800a2fa:	2a65      	cmp	r2, #101	; 0x65
 800a2fc:	f43f ab5f 	beq.w	80099be <_strtod_l+0x27e>
 800a300:	2a45      	cmp	r2, #69	; 0x45
 800a302:	f43f ab5c 	beq.w	80099be <_strtod_l+0x27e>
 800a306:	2301      	movs	r3, #1
 800a308:	f7ff bb94 	b.w	8009a34 <_strtod_l+0x2f4>
 800a30c:	f3af 8000 	nop.w
 800a310:	94a03595 	.word	0x94a03595
 800a314:	3fdfffff 	.word	0x3fdfffff
 800a318:	35afe535 	.word	0x35afe535
 800a31c:	3fe00000 	.word	0x3fe00000
 800a320:	ffc00000 	.word	0xffc00000
 800a324:	41dfffff 	.word	0x41dfffff
 800a328:	94a03595 	.word	0x94a03595
 800a32c:	3fcfffff 	.word	0x3fcfffff
 800a330:	3ff00000 	.word	0x3ff00000
 800a334:	7ff00000 	.word	0x7ff00000
 800a338:	7fe00000 	.word	0x7fe00000
 800a33c:	7c9fffff 	.word	0x7c9fffff
 800a340:	3fe00000 	.word	0x3fe00000
 800a344:	bff00000 	.word	0xbff00000
 800a348:	7fefffff 	.word	0x7fefffff

0800a34c <_strtod_r>:
 800a34c:	4b01      	ldr	r3, [pc, #4]	; (800a354 <_strtod_r+0x8>)
 800a34e:	f7ff b9f7 	b.w	8009740 <_strtod_l>
 800a352:	bf00      	nop
 800a354:	20000078 	.word	0x20000078

0800a358 <_strtol_l.constprop.0>:
 800a358:	2b01      	cmp	r3, #1
 800a35a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a35e:	d001      	beq.n	800a364 <_strtol_l.constprop.0+0xc>
 800a360:	2b24      	cmp	r3, #36	; 0x24
 800a362:	d906      	bls.n	800a372 <_strtol_l.constprop.0+0x1a>
 800a364:	f7fe f98a 	bl	800867c <__errno>
 800a368:	2316      	movs	r3, #22
 800a36a:	6003      	str	r3, [r0, #0]
 800a36c:	2000      	movs	r0, #0
 800a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a372:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a458 <_strtol_l.constprop.0+0x100>
 800a376:	460d      	mov	r5, r1
 800a378:	462e      	mov	r6, r5
 800a37a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a37e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a382:	f017 0708 	ands.w	r7, r7, #8
 800a386:	d1f7      	bne.n	800a378 <_strtol_l.constprop.0+0x20>
 800a388:	2c2d      	cmp	r4, #45	; 0x2d
 800a38a:	d132      	bne.n	800a3f2 <_strtol_l.constprop.0+0x9a>
 800a38c:	782c      	ldrb	r4, [r5, #0]
 800a38e:	2701      	movs	r7, #1
 800a390:	1cb5      	adds	r5, r6, #2
 800a392:	2b00      	cmp	r3, #0
 800a394:	d05b      	beq.n	800a44e <_strtol_l.constprop.0+0xf6>
 800a396:	2b10      	cmp	r3, #16
 800a398:	d109      	bne.n	800a3ae <_strtol_l.constprop.0+0x56>
 800a39a:	2c30      	cmp	r4, #48	; 0x30
 800a39c:	d107      	bne.n	800a3ae <_strtol_l.constprop.0+0x56>
 800a39e:	782c      	ldrb	r4, [r5, #0]
 800a3a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a3a4:	2c58      	cmp	r4, #88	; 0x58
 800a3a6:	d14d      	bne.n	800a444 <_strtol_l.constprop.0+0xec>
 800a3a8:	786c      	ldrb	r4, [r5, #1]
 800a3aa:	2310      	movs	r3, #16
 800a3ac:	3502      	adds	r5, #2
 800a3ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a3b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a3b6:	f04f 0c00 	mov.w	ip, #0
 800a3ba:	fbb8 f9f3 	udiv	r9, r8, r3
 800a3be:	4666      	mov	r6, ip
 800a3c0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a3c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a3c8:	f1be 0f09 	cmp.w	lr, #9
 800a3cc:	d816      	bhi.n	800a3fc <_strtol_l.constprop.0+0xa4>
 800a3ce:	4674      	mov	r4, lr
 800a3d0:	42a3      	cmp	r3, r4
 800a3d2:	dd24      	ble.n	800a41e <_strtol_l.constprop.0+0xc6>
 800a3d4:	f1bc 0f00 	cmp.w	ip, #0
 800a3d8:	db1e      	blt.n	800a418 <_strtol_l.constprop.0+0xc0>
 800a3da:	45b1      	cmp	r9, r6
 800a3dc:	d31c      	bcc.n	800a418 <_strtol_l.constprop.0+0xc0>
 800a3de:	d101      	bne.n	800a3e4 <_strtol_l.constprop.0+0x8c>
 800a3e0:	45a2      	cmp	sl, r4
 800a3e2:	db19      	blt.n	800a418 <_strtol_l.constprop.0+0xc0>
 800a3e4:	fb06 4603 	mla	r6, r6, r3, r4
 800a3e8:	f04f 0c01 	mov.w	ip, #1
 800a3ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3f0:	e7e8      	b.n	800a3c4 <_strtol_l.constprop.0+0x6c>
 800a3f2:	2c2b      	cmp	r4, #43	; 0x2b
 800a3f4:	bf04      	itt	eq
 800a3f6:	782c      	ldrbeq	r4, [r5, #0]
 800a3f8:	1cb5      	addeq	r5, r6, #2
 800a3fa:	e7ca      	b.n	800a392 <_strtol_l.constprop.0+0x3a>
 800a3fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a400:	f1be 0f19 	cmp.w	lr, #25
 800a404:	d801      	bhi.n	800a40a <_strtol_l.constprop.0+0xb2>
 800a406:	3c37      	subs	r4, #55	; 0x37
 800a408:	e7e2      	b.n	800a3d0 <_strtol_l.constprop.0+0x78>
 800a40a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a40e:	f1be 0f19 	cmp.w	lr, #25
 800a412:	d804      	bhi.n	800a41e <_strtol_l.constprop.0+0xc6>
 800a414:	3c57      	subs	r4, #87	; 0x57
 800a416:	e7db      	b.n	800a3d0 <_strtol_l.constprop.0+0x78>
 800a418:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a41c:	e7e6      	b.n	800a3ec <_strtol_l.constprop.0+0x94>
 800a41e:	f1bc 0f00 	cmp.w	ip, #0
 800a422:	da05      	bge.n	800a430 <_strtol_l.constprop.0+0xd8>
 800a424:	2322      	movs	r3, #34	; 0x22
 800a426:	6003      	str	r3, [r0, #0]
 800a428:	4646      	mov	r6, r8
 800a42a:	b942      	cbnz	r2, 800a43e <_strtol_l.constprop.0+0xe6>
 800a42c:	4630      	mov	r0, r6
 800a42e:	e79e      	b.n	800a36e <_strtol_l.constprop.0+0x16>
 800a430:	b107      	cbz	r7, 800a434 <_strtol_l.constprop.0+0xdc>
 800a432:	4276      	negs	r6, r6
 800a434:	2a00      	cmp	r2, #0
 800a436:	d0f9      	beq.n	800a42c <_strtol_l.constprop.0+0xd4>
 800a438:	f1bc 0f00 	cmp.w	ip, #0
 800a43c:	d000      	beq.n	800a440 <_strtol_l.constprop.0+0xe8>
 800a43e:	1e69      	subs	r1, r5, #1
 800a440:	6011      	str	r1, [r2, #0]
 800a442:	e7f3      	b.n	800a42c <_strtol_l.constprop.0+0xd4>
 800a444:	2430      	movs	r4, #48	; 0x30
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1b1      	bne.n	800a3ae <_strtol_l.constprop.0+0x56>
 800a44a:	2308      	movs	r3, #8
 800a44c:	e7af      	b.n	800a3ae <_strtol_l.constprop.0+0x56>
 800a44e:	2c30      	cmp	r4, #48	; 0x30
 800a450:	d0a5      	beq.n	800a39e <_strtol_l.constprop.0+0x46>
 800a452:	230a      	movs	r3, #10
 800a454:	e7ab      	b.n	800a3ae <_strtol_l.constprop.0+0x56>
 800a456:	bf00      	nop
 800a458:	0800d45d 	.word	0x0800d45d

0800a45c <_strtol_r>:
 800a45c:	f7ff bf7c 	b.w	800a358 <_strtol_l.constprop.0>

0800a460 <__assert_func>:
 800a460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a462:	4614      	mov	r4, r2
 800a464:	461a      	mov	r2, r3
 800a466:	4b09      	ldr	r3, [pc, #36]	; (800a48c <__assert_func+0x2c>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4605      	mov	r5, r0
 800a46c:	68d8      	ldr	r0, [r3, #12]
 800a46e:	b14c      	cbz	r4, 800a484 <__assert_func+0x24>
 800a470:	4b07      	ldr	r3, [pc, #28]	; (800a490 <__assert_func+0x30>)
 800a472:	9100      	str	r1, [sp, #0]
 800a474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a478:	4906      	ldr	r1, [pc, #24]	; (800a494 <__assert_func+0x34>)
 800a47a:	462b      	mov	r3, r5
 800a47c:	f000 fe8a 	bl	800b194 <fiprintf>
 800a480:	f002 faa4 	bl	800c9cc <abort>
 800a484:	4b04      	ldr	r3, [pc, #16]	; (800a498 <__assert_func+0x38>)
 800a486:	461c      	mov	r4, r3
 800a488:	e7f3      	b.n	800a472 <__assert_func+0x12>
 800a48a:	bf00      	nop
 800a48c:	20000010 	.word	0x20000010
 800a490:	0800d420 	.word	0x0800d420
 800a494:	0800d42d 	.word	0x0800d42d
 800a498:	0800d45b 	.word	0x0800d45b

0800a49c <quorem>:
 800a49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	6903      	ldr	r3, [r0, #16]
 800a4a2:	690c      	ldr	r4, [r1, #16]
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	4607      	mov	r7, r0
 800a4a8:	f2c0 8081 	blt.w	800a5ae <quorem+0x112>
 800a4ac:	3c01      	subs	r4, #1
 800a4ae:	f101 0814 	add.w	r8, r1, #20
 800a4b2:	f100 0514 	add.w	r5, r0, #20
 800a4b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4d4:	d331      	bcc.n	800a53a <quorem+0x9e>
 800a4d6:	f04f 0e00 	mov.w	lr, #0
 800a4da:	4640      	mov	r0, r8
 800a4dc:	46ac      	mov	ip, r5
 800a4de:	46f2      	mov	sl, lr
 800a4e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4e4:	b293      	uxth	r3, r2
 800a4e6:	fb06 e303 	mla	r3, r6, r3, lr
 800a4ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	ebaa 0303 	sub.w	r3, sl, r3
 800a4f4:	f8dc a000 	ldr.w	sl, [ip]
 800a4f8:	0c12      	lsrs	r2, r2, #16
 800a4fa:	fa13 f38a 	uxtah	r3, r3, sl
 800a4fe:	fb06 e202 	mla	r2, r6, r2, lr
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	9b00      	ldr	r3, [sp, #0]
 800a506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a50a:	b292      	uxth	r2, r2
 800a50c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a514:	f8bd 3000 	ldrh.w	r3, [sp]
 800a518:	4581      	cmp	r9, r0
 800a51a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a51e:	f84c 3b04 	str.w	r3, [ip], #4
 800a522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a526:	d2db      	bcs.n	800a4e0 <quorem+0x44>
 800a528:	f855 300b 	ldr.w	r3, [r5, fp]
 800a52c:	b92b      	cbnz	r3, 800a53a <quorem+0x9e>
 800a52e:	9b01      	ldr	r3, [sp, #4]
 800a530:	3b04      	subs	r3, #4
 800a532:	429d      	cmp	r5, r3
 800a534:	461a      	mov	r2, r3
 800a536:	d32e      	bcc.n	800a596 <quorem+0xfa>
 800a538:	613c      	str	r4, [r7, #16]
 800a53a:	4638      	mov	r0, r7
 800a53c:	f001 fc9a 	bl	800be74 <__mcmp>
 800a540:	2800      	cmp	r0, #0
 800a542:	db24      	blt.n	800a58e <quorem+0xf2>
 800a544:	3601      	adds	r6, #1
 800a546:	4628      	mov	r0, r5
 800a548:	f04f 0c00 	mov.w	ip, #0
 800a54c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a550:	f8d0 e000 	ldr.w	lr, [r0]
 800a554:	b293      	uxth	r3, r2
 800a556:	ebac 0303 	sub.w	r3, ip, r3
 800a55a:	0c12      	lsrs	r2, r2, #16
 800a55c:	fa13 f38e 	uxtah	r3, r3, lr
 800a560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a568:	b29b      	uxth	r3, r3
 800a56a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a56e:	45c1      	cmp	r9, r8
 800a570:	f840 3b04 	str.w	r3, [r0], #4
 800a574:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a578:	d2e8      	bcs.n	800a54c <quorem+0xb0>
 800a57a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a57e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a582:	b922      	cbnz	r2, 800a58e <quorem+0xf2>
 800a584:	3b04      	subs	r3, #4
 800a586:	429d      	cmp	r5, r3
 800a588:	461a      	mov	r2, r3
 800a58a:	d30a      	bcc.n	800a5a2 <quorem+0x106>
 800a58c:	613c      	str	r4, [r7, #16]
 800a58e:	4630      	mov	r0, r6
 800a590:	b003      	add	sp, #12
 800a592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	3b04      	subs	r3, #4
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	d1cc      	bne.n	800a538 <quorem+0x9c>
 800a59e:	3c01      	subs	r4, #1
 800a5a0:	e7c7      	b.n	800a532 <quorem+0x96>
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	3b04      	subs	r3, #4
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	d1f0      	bne.n	800a58c <quorem+0xf0>
 800a5aa:	3c01      	subs	r4, #1
 800a5ac:	e7eb      	b.n	800a586 <quorem+0xea>
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	e7ee      	b.n	800a590 <quorem+0xf4>
 800a5b2:	0000      	movs	r0, r0
 800a5b4:	0000      	movs	r0, r0
	...

0800a5b8 <_dtoa_r>:
 800a5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	ed2d 8b04 	vpush	{d8-d9}
 800a5c0:	ec57 6b10 	vmov	r6, r7, d0
 800a5c4:	b093      	sub	sp, #76	; 0x4c
 800a5c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5cc:	9106      	str	r1, [sp, #24]
 800a5ce:	ee10 aa10 	vmov	sl, s0
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5d8:	46bb      	mov	fp, r7
 800a5da:	b975      	cbnz	r5, 800a5fa <_dtoa_r+0x42>
 800a5dc:	2010      	movs	r0, #16
 800a5de:	f7fe f877 	bl	80086d0 <malloc>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5e6:	b920      	cbnz	r0, 800a5f2 <_dtoa_r+0x3a>
 800a5e8:	4ba7      	ldr	r3, [pc, #668]	; (800a888 <_dtoa_r+0x2d0>)
 800a5ea:	21ea      	movs	r1, #234	; 0xea
 800a5ec:	48a7      	ldr	r0, [pc, #668]	; (800a88c <_dtoa_r+0x2d4>)
 800a5ee:	f7ff ff37 	bl	800a460 <__assert_func>
 800a5f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5f6:	6005      	str	r5, [r0, #0]
 800a5f8:	60c5      	str	r5, [r0, #12]
 800a5fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5fc:	6819      	ldr	r1, [r3, #0]
 800a5fe:	b151      	cbz	r1, 800a616 <_dtoa_r+0x5e>
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	604a      	str	r2, [r1, #4]
 800a604:	2301      	movs	r3, #1
 800a606:	4093      	lsls	r3, r2
 800a608:	608b      	str	r3, [r1, #8]
 800a60a:	4620      	mov	r0, r4
 800a60c:	f001 f9a6 	bl	800b95c <_Bfree>
 800a610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a612:	2200      	movs	r2, #0
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	1e3b      	subs	r3, r7, #0
 800a618:	bfaa      	itet	ge
 800a61a:	2300      	movge	r3, #0
 800a61c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a620:	f8c8 3000 	strge.w	r3, [r8]
 800a624:	4b9a      	ldr	r3, [pc, #616]	; (800a890 <_dtoa_r+0x2d8>)
 800a626:	bfbc      	itt	lt
 800a628:	2201      	movlt	r2, #1
 800a62a:	f8c8 2000 	strlt.w	r2, [r8]
 800a62e:	ea33 030b 	bics.w	r3, r3, fp
 800a632:	d11b      	bne.n	800a66c <_dtoa_r+0xb4>
 800a634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a636:	f242 730f 	movw	r3, #9999	; 0x270f
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a640:	4333      	orrs	r3, r6
 800a642:	f000 8592 	beq.w	800b16a <_dtoa_r+0xbb2>
 800a646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a648:	b963      	cbnz	r3, 800a664 <_dtoa_r+0xac>
 800a64a:	4b92      	ldr	r3, [pc, #584]	; (800a894 <_dtoa_r+0x2dc>)
 800a64c:	e022      	b.n	800a694 <_dtoa_r+0xdc>
 800a64e:	4b92      	ldr	r3, [pc, #584]	; (800a898 <_dtoa_r+0x2e0>)
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	3308      	adds	r3, #8
 800a654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a656:	6013      	str	r3, [r2, #0]
 800a658:	9801      	ldr	r0, [sp, #4]
 800a65a:	b013      	add	sp, #76	; 0x4c
 800a65c:	ecbd 8b04 	vpop	{d8-d9}
 800a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a664:	4b8b      	ldr	r3, [pc, #556]	; (800a894 <_dtoa_r+0x2dc>)
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	3303      	adds	r3, #3
 800a66a:	e7f3      	b.n	800a654 <_dtoa_r+0x9c>
 800a66c:	2200      	movs	r2, #0
 800a66e:	2300      	movs	r3, #0
 800a670:	4650      	mov	r0, sl
 800a672:	4659      	mov	r1, fp
 800a674:	f7f6 fa30 	bl	8000ad8 <__aeabi_dcmpeq>
 800a678:	ec4b ab19 	vmov	d9, sl, fp
 800a67c:	4680      	mov	r8, r0
 800a67e:	b158      	cbz	r0, 800a698 <_dtoa_r+0xe0>
 800a680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a682:	2301      	movs	r3, #1
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 856b 	beq.w	800b164 <_dtoa_r+0xbac>
 800a68e:	4883      	ldr	r0, [pc, #524]	; (800a89c <_dtoa_r+0x2e4>)
 800a690:	6018      	str	r0, [r3, #0]
 800a692:	1e43      	subs	r3, r0, #1
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	e7df      	b.n	800a658 <_dtoa_r+0xa0>
 800a698:	ec4b ab10 	vmov	d0, sl, fp
 800a69c:	aa10      	add	r2, sp, #64	; 0x40
 800a69e:	a911      	add	r1, sp, #68	; 0x44
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f001 fd09 	bl	800c0b8 <__d2b>
 800a6a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a6aa:	ee08 0a10 	vmov	s16, r0
 800a6ae:	2d00      	cmp	r5, #0
 800a6b0:	f000 8084 	beq.w	800a7bc <_dtoa_r+0x204>
 800a6b4:	ee19 3a90 	vmov	r3, s19
 800a6b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a6c0:	4656      	mov	r6, sl
 800a6c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a6c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a6ce:	4b74      	ldr	r3, [pc, #464]	; (800a8a0 <_dtoa_r+0x2e8>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	f7f5 fddf 	bl	8000298 <__aeabi_dsub>
 800a6da:	a365      	add	r3, pc, #404	; (adr r3, 800a870 <_dtoa_r+0x2b8>)
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	f7f5 ff92 	bl	8000608 <__aeabi_dmul>
 800a6e4:	a364      	add	r3, pc, #400	; (adr r3, 800a878 <_dtoa_r+0x2c0>)
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	f7f5 fdd7 	bl	800029c <__adddf3>
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	460f      	mov	r7, r1
 800a6f4:	f7f5 ff1e 	bl	8000534 <__aeabi_i2d>
 800a6f8:	a361      	add	r3, pc, #388	; (adr r3, 800a880 <_dtoa_r+0x2c8>)
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	f7f5 ff83 	bl	8000608 <__aeabi_dmul>
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
 800a706:	4630      	mov	r0, r6
 800a708:	4639      	mov	r1, r7
 800a70a:	f7f5 fdc7 	bl	800029c <__adddf3>
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1
 800a712:	f7f6 fa29 	bl	8000b68 <__aeabi_d2iz>
 800a716:	2200      	movs	r2, #0
 800a718:	9000      	str	r0, [sp, #0]
 800a71a:	2300      	movs	r3, #0
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	f7f6 f9e4 	bl	8000aec <__aeabi_dcmplt>
 800a724:	b150      	cbz	r0, 800a73c <_dtoa_r+0x184>
 800a726:	9800      	ldr	r0, [sp, #0]
 800a728:	f7f5 ff04 	bl	8000534 <__aeabi_i2d>
 800a72c:	4632      	mov	r2, r6
 800a72e:	463b      	mov	r3, r7
 800a730:	f7f6 f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a734:	b910      	cbnz	r0, 800a73c <_dtoa_r+0x184>
 800a736:	9b00      	ldr	r3, [sp, #0]
 800a738:	3b01      	subs	r3, #1
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	9b00      	ldr	r3, [sp, #0]
 800a73e:	2b16      	cmp	r3, #22
 800a740:	d85a      	bhi.n	800a7f8 <_dtoa_r+0x240>
 800a742:	9a00      	ldr	r2, [sp, #0]
 800a744:	4b57      	ldr	r3, [pc, #348]	; (800a8a4 <_dtoa_r+0x2ec>)
 800a746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	ec51 0b19 	vmov	r0, r1, d9
 800a752:	f7f6 f9cb 	bl	8000aec <__aeabi_dcmplt>
 800a756:	2800      	cmp	r0, #0
 800a758:	d050      	beq.n	800a7fc <_dtoa_r+0x244>
 800a75a:	9b00      	ldr	r3, [sp, #0]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	2300      	movs	r3, #0
 800a762:	930b      	str	r3, [sp, #44]	; 0x2c
 800a764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a766:	1b5d      	subs	r5, r3, r5
 800a768:	1e6b      	subs	r3, r5, #1
 800a76a:	9305      	str	r3, [sp, #20]
 800a76c:	bf45      	ittet	mi
 800a76e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a772:	9304      	strmi	r3, [sp, #16]
 800a774:	2300      	movpl	r3, #0
 800a776:	2300      	movmi	r3, #0
 800a778:	bf4c      	ite	mi
 800a77a:	9305      	strmi	r3, [sp, #20]
 800a77c:	9304      	strpl	r3, [sp, #16]
 800a77e:	9b00      	ldr	r3, [sp, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	db3d      	blt.n	800a800 <_dtoa_r+0x248>
 800a784:	9b05      	ldr	r3, [sp, #20]
 800a786:	9a00      	ldr	r2, [sp, #0]
 800a788:	920a      	str	r2, [sp, #40]	; 0x28
 800a78a:	4413      	add	r3, r2
 800a78c:	9305      	str	r3, [sp, #20]
 800a78e:	2300      	movs	r3, #0
 800a790:	9307      	str	r3, [sp, #28]
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	2b09      	cmp	r3, #9
 800a796:	f200 8089 	bhi.w	800a8ac <_dtoa_r+0x2f4>
 800a79a:	2b05      	cmp	r3, #5
 800a79c:	bfc4      	itt	gt
 800a79e:	3b04      	subgt	r3, #4
 800a7a0:	9306      	strgt	r3, [sp, #24]
 800a7a2:	9b06      	ldr	r3, [sp, #24]
 800a7a4:	f1a3 0302 	sub.w	r3, r3, #2
 800a7a8:	bfcc      	ite	gt
 800a7aa:	2500      	movgt	r5, #0
 800a7ac:	2501      	movle	r5, #1
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	f200 8087 	bhi.w	800a8c2 <_dtoa_r+0x30a>
 800a7b4:	e8df f003 	tbb	[pc, r3]
 800a7b8:	59383a2d 	.word	0x59383a2d
 800a7bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7c0:	441d      	add	r5, r3
 800a7c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	bfc1      	itttt	gt
 800a7ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a7d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7da:	bfda      	itte	le
 800a7dc:	f1c3 0320 	rsble	r3, r3, #32
 800a7e0:	fa06 f003 	lslle.w	r0, r6, r3
 800a7e4:	4318      	orrgt	r0, r3
 800a7e6:	f7f5 fe95 	bl	8000514 <__aeabi_ui2d>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7f2:	3d01      	subs	r5, #1
 800a7f4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7f6:	e76a      	b.n	800a6ce <_dtoa_r+0x116>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e7b2      	b.n	800a762 <_dtoa_r+0x1aa>
 800a7fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7fe:	e7b1      	b.n	800a764 <_dtoa_r+0x1ac>
 800a800:	9b04      	ldr	r3, [sp, #16]
 800a802:	9a00      	ldr	r2, [sp, #0]
 800a804:	1a9b      	subs	r3, r3, r2
 800a806:	9304      	str	r3, [sp, #16]
 800a808:	4253      	negs	r3, r2
 800a80a:	9307      	str	r3, [sp, #28]
 800a80c:	2300      	movs	r3, #0
 800a80e:	930a      	str	r3, [sp, #40]	; 0x28
 800a810:	e7bf      	b.n	800a792 <_dtoa_r+0x1da>
 800a812:	2300      	movs	r3, #0
 800a814:	9308      	str	r3, [sp, #32]
 800a816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dc55      	bgt.n	800a8c8 <_dtoa_r+0x310>
 800a81c:	2301      	movs	r3, #1
 800a81e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a822:	461a      	mov	r2, r3
 800a824:	9209      	str	r2, [sp, #36]	; 0x24
 800a826:	e00c      	b.n	800a842 <_dtoa_r+0x28a>
 800a828:	2301      	movs	r3, #1
 800a82a:	e7f3      	b.n	800a814 <_dtoa_r+0x25c>
 800a82c:	2300      	movs	r3, #0
 800a82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a830:	9308      	str	r3, [sp, #32]
 800a832:	9b00      	ldr	r3, [sp, #0]
 800a834:	4413      	add	r3, r2
 800a836:	9302      	str	r3, [sp, #8]
 800a838:	3301      	adds	r3, #1
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	bfb8      	it	lt
 800a840:	2301      	movlt	r3, #1
 800a842:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a844:	2200      	movs	r2, #0
 800a846:	6042      	str	r2, [r0, #4]
 800a848:	2204      	movs	r2, #4
 800a84a:	f102 0614 	add.w	r6, r2, #20
 800a84e:	429e      	cmp	r6, r3
 800a850:	6841      	ldr	r1, [r0, #4]
 800a852:	d93d      	bls.n	800a8d0 <_dtoa_r+0x318>
 800a854:	4620      	mov	r0, r4
 800a856:	f001 f841 	bl	800b8dc <_Balloc>
 800a85a:	9001      	str	r0, [sp, #4]
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d13b      	bne.n	800a8d8 <_dtoa_r+0x320>
 800a860:	4b11      	ldr	r3, [pc, #68]	; (800a8a8 <_dtoa_r+0x2f0>)
 800a862:	4602      	mov	r2, r0
 800a864:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a868:	e6c0      	b.n	800a5ec <_dtoa_r+0x34>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e7df      	b.n	800a82e <_dtoa_r+0x276>
 800a86e:	bf00      	nop
 800a870:	636f4361 	.word	0x636f4361
 800a874:	3fd287a7 	.word	0x3fd287a7
 800a878:	8b60c8b3 	.word	0x8b60c8b3
 800a87c:	3fc68a28 	.word	0x3fc68a28
 800a880:	509f79fb 	.word	0x509f79fb
 800a884:	3fd34413 	.word	0x3fd34413
 800a888:	0800d35d 	.word	0x0800d35d
 800a88c:	0800d56a 	.word	0x0800d56a
 800a890:	7ff00000 	.word	0x7ff00000
 800a894:	0800d566 	.word	0x0800d566
 800a898:	0800d55d 	.word	0x0800d55d
 800a89c:	0800d335 	.word	0x0800d335
 800a8a0:	3ff80000 	.word	0x3ff80000
 800a8a4:	0800d6d8 	.word	0x0800d6d8
 800a8a8:	0800d5c5 	.word	0x0800d5c5
 800a8ac:	2501      	movs	r5, #1
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	9306      	str	r3, [sp, #24]
 800a8b2:	9508      	str	r5, [sp, #32]
 800a8b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2312      	movs	r3, #18
 800a8c0:	e7b0      	b.n	800a824 <_dtoa_r+0x26c>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	9308      	str	r3, [sp, #32]
 800a8c6:	e7f5      	b.n	800a8b4 <_dtoa_r+0x2fc>
 800a8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8ce:	e7b8      	b.n	800a842 <_dtoa_r+0x28a>
 800a8d0:	3101      	adds	r1, #1
 800a8d2:	6041      	str	r1, [r0, #4]
 800a8d4:	0052      	lsls	r2, r2, #1
 800a8d6:	e7b8      	b.n	800a84a <_dtoa_r+0x292>
 800a8d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8da:	9a01      	ldr	r2, [sp, #4]
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	9b03      	ldr	r3, [sp, #12]
 800a8e0:	2b0e      	cmp	r3, #14
 800a8e2:	f200 809d 	bhi.w	800aa20 <_dtoa_r+0x468>
 800a8e6:	2d00      	cmp	r5, #0
 800a8e8:	f000 809a 	beq.w	800aa20 <_dtoa_r+0x468>
 800a8ec:	9b00      	ldr	r3, [sp, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	dd32      	ble.n	800a958 <_dtoa_r+0x3a0>
 800a8f2:	4ab7      	ldr	r2, [pc, #732]	; (800abd0 <_dtoa_r+0x618>)
 800a8f4:	f003 030f 	and.w	r3, r3, #15
 800a8f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a900:	9b00      	ldr	r3, [sp, #0]
 800a902:	05d8      	lsls	r0, r3, #23
 800a904:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a908:	d516      	bpl.n	800a938 <_dtoa_r+0x380>
 800a90a:	4bb2      	ldr	r3, [pc, #712]	; (800abd4 <_dtoa_r+0x61c>)
 800a90c:	ec51 0b19 	vmov	r0, r1, d9
 800a910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a914:	f7f5 ffa2 	bl	800085c <__aeabi_ddiv>
 800a918:	f007 070f 	and.w	r7, r7, #15
 800a91c:	4682      	mov	sl, r0
 800a91e:	468b      	mov	fp, r1
 800a920:	2503      	movs	r5, #3
 800a922:	4eac      	ldr	r6, [pc, #688]	; (800abd4 <_dtoa_r+0x61c>)
 800a924:	b957      	cbnz	r7, 800a93c <_dtoa_r+0x384>
 800a926:	4642      	mov	r2, r8
 800a928:	464b      	mov	r3, r9
 800a92a:	4650      	mov	r0, sl
 800a92c:	4659      	mov	r1, fp
 800a92e:	f7f5 ff95 	bl	800085c <__aeabi_ddiv>
 800a932:	4682      	mov	sl, r0
 800a934:	468b      	mov	fp, r1
 800a936:	e028      	b.n	800a98a <_dtoa_r+0x3d2>
 800a938:	2502      	movs	r5, #2
 800a93a:	e7f2      	b.n	800a922 <_dtoa_r+0x36a>
 800a93c:	07f9      	lsls	r1, r7, #31
 800a93e:	d508      	bpl.n	800a952 <_dtoa_r+0x39a>
 800a940:	4640      	mov	r0, r8
 800a942:	4649      	mov	r1, r9
 800a944:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a948:	f7f5 fe5e 	bl	8000608 <__aeabi_dmul>
 800a94c:	3501      	adds	r5, #1
 800a94e:	4680      	mov	r8, r0
 800a950:	4689      	mov	r9, r1
 800a952:	107f      	asrs	r7, r7, #1
 800a954:	3608      	adds	r6, #8
 800a956:	e7e5      	b.n	800a924 <_dtoa_r+0x36c>
 800a958:	f000 809b 	beq.w	800aa92 <_dtoa_r+0x4da>
 800a95c:	9b00      	ldr	r3, [sp, #0]
 800a95e:	4f9d      	ldr	r7, [pc, #628]	; (800abd4 <_dtoa_r+0x61c>)
 800a960:	425e      	negs	r6, r3
 800a962:	4b9b      	ldr	r3, [pc, #620]	; (800abd0 <_dtoa_r+0x618>)
 800a964:	f006 020f 	and.w	r2, r6, #15
 800a968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	ec51 0b19 	vmov	r0, r1, d9
 800a974:	f7f5 fe48 	bl	8000608 <__aeabi_dmul>
 800a978:	1136      	asrs	r6, r6, #4
 800a97a:	4682      	mov	sl, r0
 800a97c:	468b      	mov	fp, r1
 800a97e:	2300      	movs	r3, #0
 800a980:	2502      	movs	r5, #2
 800a982:	2e00      	cmp	r6, #0
 800a984:	d17a      	bne.n	800aa7c <_dtoa_r+0x4c4>
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1d3      	bne.n	800a932 <_dtoa_r+0x37a>
 800a98a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 8082 	beq.w	800aa96 <_dtoa_r+0x4de>
 800a992:	4b91      	ldr	r3, [pc, #580]	; (800abd8 <_dtoa_r+0x620>)
 800a994:	2200      	movs	r2, #0
 800a996:	4650      	mov	r0, sl
 800a998:	4659      	mov	r1, fp
 800a99a:	f7f6 f8a7 	bl	8000aec <__aeabi_dcmplt>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d079      	beq.n	800aa96 <_dtoa_r+0x4de>
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d076      	beq.n	800aa96 <_dtoa_r+0x4de>
 800a9a8:	9b02      	ldr	r3, [sp, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	dd36      	ble.n	800aa1c <_dtoa_r+0x464>
 800a9ae:	9b00      	ldr	r3, [sp, #0]
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	4659      	mov	r1, fp
 800a9b4:	1e5f      	subs	r7, r3, #1
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4b88      	ldr	r3, [pc, #544]	; (800abdc <_dtoa_r+0x624>)
 800a9ba:	f7f5 fe25 	bl	8000608 <__aeabi_dmul>
 800a9be:	9e02      	ldr	r6, [sp, #8]
 800a9c0:	4682      	mov	sl, r0
 800a9c2:	468b      	mov	fp, r1
 800a9c4:	3501      	adds	r5, #1
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f7f5 fdb4 	bl	8000534 <__aeabi_i2d>
 800a9cc:	4652      	mov	r2, sl
 800a9ce:	465b      	mov	r3, fp
 800a9d0:	f7f5 fe1a 	bl	8000608 <__aeabi_dmul>
 800a9d4:	4b82      	ldr	r3, [pc, #520]	; (800abe0 <_dtoa_r+0x628>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f7f5 fc60 	bl	800029c <__adddf3>
 800a9dc:	46d0      	mov	r8, sl
 800a9de:	46d9      	mov	r9, fp
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a9e6:	2e00      	cmp	r6, #0
 800a9e8:	d158      	bne.n	800aa9c <_dtoa_r+0x4e4>
 800a9ea:	4b7e      	ldr	r3, [pc, #504]	; (800abe4 <_dtoa_r+0x62c>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	4640      	mov	r0, r8
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	f7f5 fc51 	bl	8000298 <__aeabi_dsub>
 800a9f6:	4652      	mov	r2, sl
 800a9f8:	465b      	mov	r3, fp
 800a9fa:	4680      	mov	r8, r0
 800a9fc:	4689      	mov	r9, r1
 800a9fe:	f7f6 f893 	bl	8000b28 <__aeabi_dcmpgt>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	f040 8295 	bne.w	800af32 <_dtoa_r+0x97a>
 800aa08:	4652      	mov	r2, sl
 800aa0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	f7f6 f86b 	bl	8000aec <__aeabi_dcmplt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	f040 8289 	bne.w	800af2e <_dtoa_r+0x976>
 800aa1c:	ec5b ab19 	vmov	sl, fp, d9
 800aa20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f2c0 8148 	blt.w	800acb8 <_dtoa_r+0x700>
 800aa28:	9a00      	ldr	r2, [sp, #0]
 800aa2a:	2a0e      	cmp	r2, #14
 800aa2c:	f300 8144 	bgt.w	800acb8 <_dtoa_r+0x700>
 800aa30:	4b67      	ldr	r3, [pc, #412]	; (800abd0 <_dtoa_r+0x618>)
 800aa32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa36:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f280 80d5 	bge.w	800abec <_dtoa_r+0x634>
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f300 80d1 	bgt.w	800abec <_dtoa_r+0x634>
 800aa4a:	f040 826f 	bne.w	800af2c <_dtoa_r+0x974>
 800aa4e:	4b65      	ldr	r3, [pc, #404]	; (800abe4 <_dtoa_r+0x62c>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	4640      	mov	r0, r8
 800aa54:	4649      	mov	r1, r9
 800aa56:	f7f5 fdd7 	bl	8000608 <__aeabi_dmul>
 800aa5a:	4652      	mov	r2, sl
 800aa5c:	465b      	mov	r3, fp
 800aa5e:	f7f6 f859 	bl	8000b14 <__aeabi_dcmpge>
 800aa62:	9e03      	ldr	r6, [sp, #12]
 800aa64:	4637      	mov	r7, r6
 800aa66:	2800      	cmp	r0, #0
 800aa68:	f040 8245 	bne.w	800aef6 <_dtoa_r+0x93e>
 800aa6c:	9d01      	ldr	r5, [sp, #4]
 800aa6e:	2331      	movs	r3, #49	; 0x31
 800aa70:	f805 3b01 	strb.w	r3, [r5], #1
 800aa74:	9b00      	ldr	r3, [sp, #0]
 800aa76:	3301      	adds	r3, #1
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	e240      	b.n	800aefe <_dtoa_r+0x946>
 800aa7c:	07f2      	lsls	r2, r6, #31
 800aa7e:	d505      	bpl.n	800aa8c <_dtoa_r+0x4d4>
 800aa80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa84:	f7f5 fdc0 	bl	8000608 <__aeabi_dmul>
 800aa88:	3501      	adds	r5, #1
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	1076      	asrs	r6, r6, #1
 800aa8e:	3708      	adds	r7, #8
 800aa90:	e777      	b.n	800a982 <_dtoa_r+0x3ca>
 800aa92:	2502      	movs	r5, #2
 800aa94:	e779      	b.n	800a98a <_dtoa_r+0x3d2>
 800aa96:	9f00      	ldr	r7, [sp, #0]
 800aa98:	9e03      	ldr	r6, [sp, #12]
 800aa9a:	e794      	b.n	800a9c6 <_dtoa_r+0x40e>
 800aa9c:	9901      	ldr	r1, [sp, #4]
 800aa9e:	4b4c      	ldr	r3, [pc, #304]	; (800abd0 <_dtoa_r+0x618>)
 800aaa0:	4431      	add	r1, r6
 800aaa2:	910d      	str	r1, [sp, #52]	; 0x34
 800aaa4:	9908      	ldr	r1, [sp, #32]
 800aaa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aaaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aaae:	2900      	cmp	r1, #0
 800aab0:	d043      	beq.n	800ab3a <_dtoa_r+0x582>
 800aab2:	494d      	ldr	r1, [pc, #308]	; (800abe8 <_dtoa_r+0x630>)
 800aab4:	2000      	movs	r0, #0
 800aab6:	f7f5 fed1 	bl	800085c <__aeabi_ddiv>
 800aaba:	4652      	mov	r2, sl
 800aabc:	465b      	mov	r3, fp
 800aabe:	f7f5 fbeb 	bl	8000298 <__aeabi_dsub>
 800aac2:	9d01      	ldr	r5, [sp, #4]
 800aac4:	4682      	mov	sl, r0
 800aac6:	468b      	mov	fp, r1
 800aac8:	4649      	mov	r1, r9
 800aaca:	4640      	mov	r0, r8
 800aacc:	f7f6 f84c 	bl	8000b68 <__aeabi_d2iz>
 800aad0:	4606      	mov	r6, r0
 800aad2:	f7f5 fd2f 	bl	8000534 <__aeabi_i2d>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4640      	mov	r0, r8
 800aadc:	4649      	mov	r1, r9
 800aade:	f7f5 fbdb 	bl	8000298 <__aeabi_dsub>
 800aae2:	3630      	adds	r6, #48	; 0x30
 800aae4:	f805 6b01 	strb.w	r6, [r5], #1
 800aae8:	4652      	mov	r2, sl
 800aaea:	465b      	mov	r3, fp
 800aaec:	4680      	mov	r8, r0
 800aaee:	4689      	mov	r9, r1
 800aaf0:	f7f5 fffc 	bl	8000aec <__aeabi_dcmplt>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d163      	bne.n	800abc0 <_dtoa_r+0x608>
 800aaf8:	4642      	mov	r2, r8
 800aafa:	464b      	mov	r3, r9
 800aafc:	4936      	ldr	r1, [pc, #216]	; (800abd8 <_dtoa_r+0x620>)
 800aafe:	2000      	movs	r0, #0
 800ab00:	f7f5 fbca 	bl	8000298 <__aeabi_dsub>
 800ab04:	4652      	mov	r2, sl
 800ab06:	465b      	mov	r3, fp
 800ab08:	f7f5 fff0 	bl	8000aec <__aeabi_dcmplt>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	f040 80b5 	bne.w	800ac7c <_dtoa_r+0x6c4>
 800ab12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab14:	429d      	cmp	r5, r3
 800ab16:	d081      	beq.n	800aa1c <_dtoa_r+0x464>
 800ab18:	4b30      	ldr	r3, [pc, #192]	; (800abdc <_dtoa_r+0x624>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	4650      	mov	r0, sl
 800ab1e:	4659      	mov	r1, fp
 800ab20:	f7f5 fd72 	bl	8000608 <__aeabi_dmul>
 800ab24:	4b2d      	ldr	r3, [pc, #180]	; (800abdc <_dtoa_r+0x624>)
 800ab26:	4682      	mov	sl, r0
 800ab28:	468b      	mov	fp, r1
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f7f5 fd6a 	bl	8000608 <__aeabi_dmul>
 800ab34:	4680      	mov	r8, r0
 800ab36:	4689      	mov	r9, r1
 800ab38:	e7c6      	b.n	800aac8 <_dtoa_r+0x510>
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	4659      	mov	r1, fp
 800ab3e:	f7f5 fd63 	bl	8000608 <__aeabi_dmul>
 800ab42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab44:	9d01      	ldr	r5, [sp, #4]
 800ab46:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab48:	4682      	mov	sl, r0
 800ab4a:	468b      	mov	fp, r1
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	4640      	mov	r0, r8
 800ab50:	f7f6 f80a 	bl	8000b68 <__aeabi_d2iz>
 800ab54:	4606      	mov	r6, r0
 800ab56:	f7f5 fced 	bl	8000534 <__aeabi_i2d>
 800ab5a:	3630      	adds	r6, #48	; 0x30
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	4640      	mov	r0, r8
 800ab62:	4649      	mov	r1, r9
 800ab64:	f7f5 fb98 	bl	8000298 <__aeabi_dsub>
 800ab68:	f805 6b01 	strb.w	r6, [r5], #1
 800ab6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab6e:	429d      	cmp	r5, r3
 800ab70:	4680      	mov	r8, r0
 800ab72:	4689      	mov	r9, r1
 800ab74:	f04f 0200 	mov.w	r2, #0
 800ab78:	d124      	bne.n	800abc4 <_dtoa_r+0x60c>
 800ab7a:	4b1b      	ldr	r3, [pc, #108]	; (800abe8 <_dtoa_r+0x630>)
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	4659      	mov	r1, fp
 800ab80:	f7f5 fb8c 	bl	800029c <__adddf3>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4640      	mov	r0, r8
 800ab8a:	4649      	mov	r1, r9
 800ab8c:	f7f5 ffcc 	bl	8000b28 <__aeabi_dcmpgt>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d173      	bne.n	800ac7c <_dtoa_r+0x6c4>
 800ab94:	4652      	mov	r2, sl
 800ab96:	465b      	mov	r3, fp
 800ab98:	4913      	ldr	r1, [pc, #76]	; (800abe8 <_dtoa_r+0x630>)
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	f7f5 fb7c 	bl	8000298 <__aeabi_dsub>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4640      	mov	r0, r8
 800aba6:	4649      	mov	r1, r9
 800aba8:	f7f5 ffa0 	bl	8000aec <__aeabi_dcmplt>
 800abac:	2800      	cmp	r0, #0
 800abae:	f43f af35 	beq.w	800aa1c <_dtoa_r+0x464>
 800abb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800abb4:	1e6b      	subs	r3, r5, #1
 800abb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800abb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abbc:	2b30      	cmp	r3, #48	; 0x30
 800abbe:	d0f8      	beq.n	800abb2 <_dtoa_r+0x5fa>
 800abc0:	9700      	str	r7, [sp, #0]
 800abc2:	e049      	b.n	800ac58 <_dtoa_r+0x6a0>
 800abc4:	4b05      	ldr	r3, [pc, #20]	; (800abdc <_dtoa_r+0x624>)
 800abc6:	f7f5 fd1f 	bl	8000608 <__aeabi_dmul>
 800abca:	4680      	mov	r8, r0
 800abcc:	4689      	mov	r9, r1
 800abce:	e7bd      	b.n	800ab4c <_dtoa_r+0x594>
 800abd0:	0800d6d8 	.word	0x0800d6d8
 800abd4:	0800d6b0 	.word	0x0800d6b0
 800abd8:	3ff00000 	.word	0x3ff00000
 800abdc:	40240000 	.word	0x40240000
 800abe0:	401c0000 	.word	0x401c0000
 800abe4:	40140000 	.word	0x40140000
 800abe8:	3fe00000 	.word	0x3fe00000
 800abec:	9d01      	ldr	r5, [sp, #4]
 800abee:	4656      	mov	r6, sl
 800abf0:	465f      	mov	r7, fp
 800abf2:	4642      	mov	r2, r8
 800abf4:	464b      	mov	r3, r9
 800abf6:	4630      	mov	r0, r6
 800abf8:	4639      	mov	r1, r7
 800abfa:	f7f5 fe2f 	bl	800085c <__aeabi_ddiv>
 800abfe:	f7f5 ffb3 	bl	8000b68 <__aeabi_d2iz>
 800ac02:	4682      	mov	sl, r0
 800ac04:	f7f5 fc96 	bl	8000534 <__aeabi_i2d>
 800ac08:	4642      	mov	r2, r8
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	f7f5 fcfc 	bl	8000608 <__aeabi_dmul>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4630      	mov	r0, r6
 800ac16:	4639      	mov	r1, r7
 800ac18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac1c:	f7f5 fb3c 	bl	8000298 <__aeabi_dsub>
 800ac20:	f805 6b01 	strb.w	r6, [r5], #1
 800ac24:	9e01      	ldr	r6, [sp, #4]
 800ac26:	9f03      	ldr	r7, [sp, #12]
 800ac28:	1bae      	subs	r6, r5, r6
 800ac2a:	42b7      	cmp	r7, r6
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	d135      	bne.n	800ac9e <_dtoa_r+0x6e6>
 800ac32:	f7f5 fb33 	bl	800029c <__adddf3>
 800ac36:	4642      	mov	r2, r8
 800ac38:	464b      	mov	r3, r9
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	f7f5 ff73 	bl	8000b28 <__aeabi_dcmpgt>
 800ac42:	b9d0      	cbnz	r0, 800ac7a <_dtoa_r+0x6c2>
 800ac44:	4642      	mov	r2, r8
 800ac46:	464b      	mov	r3, r9
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f7f5 ff44 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac50:	b110      	cbz	r0, 800ac58 <_dtoa_r+0x6a0>
 800ac52:	f01a 0f01 	tst.w	sl, #1
 800ac56:	d110      	bne.n	800ac7a <_dtoa_r+0x6c2>
 800ac58:	4620      	mov	r0, r4
 800ac5a:	ee18 1a10 	vmov	r1, s16
 800ac5e:	f000 fe7d 	bl	800b95c <_Bfree>
 800ac62:	2300      	movs	r3, #0
 800ac64:	9800      	ldr	r0, [sp, #0]
 800ac66:	702b      	strb	r3, [r5, #0]
 800ac68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	6018      	str	r0, [r3, #0]
 800ac6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f43f acf1 	beq.w	800a658 <_dtoa_r+0xa0>
 800ac76:	601d      	str	r5, [r3, #0]
 800ac78:	e4ee      	b.n	800a658 <_dtoa_r+0xa0>
 800ac7a:	9f00      	ldr	r7, [sp, #0]
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	461d      	mov	r5, r3
 800ac80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac84:	2a39      	cmp	r2, #57	; 0x39
 800ac86:	d106      	bne.n	800ac96 <_dtoa_r+0x6de>
 800ac88:	9a01      	ldr	r2, [sp, #4]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d1f7      	bne.n	800ac7e <_dtoa_r+0x6c6>
 800ac8e:	9901      	ldr	r1, [sp, #4]
 800ac90:	2230      	movs	r2, #48	; 0x30
 800ac92:	3701      	adds	r7, #1
 800ac94:	700a      	strb	r2, [r1, #0]
 800ac96:	781a      	ldrb	r2, [r3, #0]
 800ac98:	3201      	adds	r2, #1
 800ac9a:	701a      	strb	r2, [r3, #0]
 800ac9c:	e790      	b.n	800abc0 <_dtoa_r+0x608>
 800ac9e:	4ba6      	ldr	r3, [pc, #664]	; (800af38 <_dtoa_r+0x980>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	f7f5 fcb1 	bl	8000608 <__aeabi_dmul>
 800aca6:	2200      	movs	r2, #0
 800aca8:	2300      	movs	r3, #0
 800acaa:	4606      	mov	r6, r0
 800acac:	460f      	mov	r7, r1
 800acae:	f7f5 ff13 	bl	8000ad8 <__aeabi_dcmpeq>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d09d      	beq.n	800abf2 <_dtoa_r+0x63a>
 800acb6:	e7cf      	b.n	800ac58 <_dtoa_r+0x6a0>
 800acb8:	9a08      	ldr	r2, [sp, #32]
 800acba:	2a00      	cmp	r2, #0
 800acbc:	f000 80d7 	beq.w	800ae6e <_dtoa_r+0x8b6>
 800acc0:	9a06      	ldr	r2, [sp, #24]
 800acc2:	2a01      	cmp	r2, #1
 800acc4:	f300 80ba 	bgt.w	800ae3c <_dtoa_r+0x884>
 800acc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acca:	2a00      	cmp	r2, #0
 800accc:	f000 80b2 	beq.w	800ae34 <_dtoa_r+0x87c>
 800acd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acd4:	9e07      	ldr	r6, [sp, #28]
 800acd6:	9d04      	ldr	r5, [sp, #16]
 800acd8:	9a04      	ldr	r2, [sp, #16]
 800acda:	441a      	add	r2, r3
 800acdc:	9204      	str	r2, [sp, #16]
 800acde:	9a05      	ldr	r2, [sp, #20]
 800ace0:	2101      	movs	r1, #1
 800ace2:	441a      	add	r2, r3
 800ace4:	4620      	mov	r0, r4
 800ace6:	9205      	str	r2, [sp, #20]
 800ace8:	f000 ff3a 	bl	800bb60 <__i2b>
 800acec:	4607      	mov	r7, r0
 800acee:	2d00      	cmp	r5, #0
 800acf0:	dd0c      	ble.n	800ad0c <_dtoa_r+0x754>
 800acf2:	9b05      	ldr	r3, [sp, #20]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dd09      	ble.n	800ad0c <_dtoa_r+0x754>
 800acf8:	42ab      	cmp	r3, r5
 800acfa:	9a04      	ldr	r2, [sp, #16]
 800acfc:	bfa8      	it	ge
 800acfe:	462b      	movge	r3, r5
 800ad00:	1ad2      	subs	r2, r2, r3
 800ad02:	9204      	str	r2, [sp, #16]
 800ad04:	9a05      	ldr	r2, [sp, #20]
 800ad06:	1aed      	subs	r5, r5, r3
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	9305      	str	r3, [sp, #20]
 800ad0c:	9b07      	ldr	r3, [sp, #28]
 800ad0e:	b31b      	cbz	r3, 800ad58 <_dtoa_r+0x7a0>
 800ad10:	9b08      	ldr	r3, [sp, #32]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f000 80af 	beq.w	800ae76 <_dtoa_r+0x8be>
 800ad18:	2e00      	cmp	r6, #0
 800ad1a:	dd13      	ble.n	800ad44 <_dtoa_r+0x78c>
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	4632      	mov	r2, r6
 800ad20:	4620      	mov	r0, r4
 800ad22:	f000 ffdd 	bl	800bce0 <__pow5mult>
 800ad26:	ee18 2a10 	vmov	r2, s16
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 ff2c 	bl	800bb8c <__multiply>
 800ad34:	ee18 1a10 	vmov	r1, s16
 800ad38:	4680      	mov	r8, r0
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 fe0e 	bl	800b95c <_Bfree>
 800ad40:	ee08 8a10 	vmov	s16, r8
 800ad44:	9b07      	ldr	r3, [sp, #28]
 800ad46:	1b9a      	subs	r2, r3, r6
 800ad48:	d006      	beq.n	800ad58 <_dtoa_r+0x7a0>
 800ad4a:	ee18 1a10 	vmov	r1, s16
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f000 ffc6 	bl	800bce0 <__pow5mult>
 800ad54:	ee08 0a10 	vmov	s16, r0
 800ad58:	2101      	movs	r1, #1
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 ff00 	bl	800bb60 <__i2b>
 800ad60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	4606      	mov	r6, r0
 800ad66:	f340 8088 	ble.w	800ae7a <_dtoa_r+0x8c2>
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	4601      	mov	r1, r0
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 ffb6 	bl	800bce0 <__pow5mult>
 800ad74:	9b06      	ldr	r3, [sp, #24]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	4606      	mov	r6, r0
 800ad7a:	f340 8081 	ble.w	800ae80 <_dtoa_r+0x8c8>
 800ad7e:	f04f 0800 	mov.w	r8, #0
 800ad82:	6933      	ldr	r3, [r6, #16]
 800ad84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad88:	6918      	ldr	r0, [r3, #16]
 800ad8a:	f000 fe99 	bl	800bac0 <__hi0bits>
 800ad8e:	f1c0 0020 	rsb	r0, r0, #32
 800ad92:	9b05      	ldr	r3, [sp, #20]
 800ad94:	4418      	add	r0, r3
 800ad96:	f010 001f 	ands.w	r0, r0, #31
 800ad9a:	f000 8092 	beq.w	800aec2 <_dtoa_r+0x90a>
 800ad9e:	f1c0 0320 	rsb	r3, r0, #32
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	f340 808a 	ble.w	800aebc <_dtoa_r+0x904>
 800ada8:	f1c0 001c 	rsb	r0, r0, #28
 800adac:	9b04      	ldr	r3, [sp, #16]
 800adae:	4403      	add	r3, r0
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	9b05      	ldr	r3, [sp, #20]
 800adb4:	4403      	add	r3, r0
 800adb6:	4405      	add	r5, r0
 800adb8:	9305      	str	r3, [sp, #20]
 800adba:	9b04      	ldr	r3, [sp, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dd07      	ble.n	800add0 <_dtoa_r+0x818>
 800adc0:	ee18 1a10 	vmov	r1, s16
 800adc4:	461a      	mov	r2, r3
 800adc6:	4620      	mov	r0, r4
 800adc8:	f000 ffe4 	bl	800bd94 <__lshift>
 800adcc:	ee08 0a10 	vmov	s16, r0
 800add0:	9b05      	ldr	r3, [sp, #20]
 800add2:	2b00      	cmp	r3, #0
 800add4:	dd05      	ble.n	800ade2 <_dtoa_r+0x82a>
 800add6:	4631      	mov	r1, r6
 800add8:	461a      	mov	r2, r3
 800adda:	4620      	mov	r0, r4
 800addc:	f000 ffda 	bl	800bd94 <__lshift>
 800ade0:	4606      	mov	r6, r0
 800ade2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d06e      	beq.n	800aec6 <_dtoa_r+0x90e>
 800ade8:	ee18 0a10 	vmov	r0, s16
 800adec:	4631      	mov	r1, r6
 800adee:	f001 f841 	bl	800be74 <__mcmp>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	da67      	bge.n	800aec6 <_dtoa_r+0x90e>
 800adf6:	9b00      	ldr	r3, [sp, #0]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	ee18 1a10 	vmov	r1, s16
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	220a      	movs	r2, #10
 800ae02:	2300      	movs	r3, #0
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 fdcb 	bl	800b9a0 <__multadd>
 800ae0a:	9b08      	ldr	r3, [sp, #32]
 800ae0c:	ee08 0a10 	vmov	s16, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 81b1 	beq.w	800b178 <_dtoa_r+0xbc0>
 800ae16:	2300      	movs	r3, #0
 800ae18:	4639      	mov	r1, r7
 800ae1a:	220a      	movs	r2, #10
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f000 fdbf 	bl	800b9a0 <__multadd>
 800ae22:	9b02      	ldr	r3, [sp, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	4607      	mov	r7, r0
 800ae28:	f300 808e 	bgt.w	800af48 <_dtoa_r+0x990>
 800ae2c:	9b06      	ldr	r3, [sp, #24]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	dc51      	bgt.n	800aed6 <_dtoa_r+0x91e>
 800ae32:	e089      	b.n	800af48 <_dtoa_r+0x990>
 800ae34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae3a:	e74b      	b.n	800acd4 <_dtoa_r+0x71c>
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	1e5e      	subs	r6, r3, #1
 800ae40:	9b07      	ldr	r3, [sp, #28]
 800ae42:	42b3      	cmp	r3, r6
 800ae44:	bfbf      	itttt	lt
 800ae46:	9b07      	ldrlt	r3, [sp, #28]
 800ae48:	9607      	strlt	r6, [sp, #28]
 800ae4a:	1af2      	sublt	r2, r6, r3
 800ae4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae4e:	bfb6      	itet	lt
 800ae50:	189b      	addlt	r3, r3, r2
 800ae52:	1b9e      	subge	r6, r3, r6
 800ae54:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	bfb8      	it	lt
 800ae5a:	2600      	movlt	r6, #0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	bfb7      	itett	lt
 800ae60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae68:	1a9d      	sublt	r5, r3, r2
 800ae6a:	2300      	movlt	r3, #0
 800ae6c:	e734      	b.n	800acd8 <_dtoa_r+0x720>
 800ae6e:	9e07      	ldr	r6, [sp, #28]
 800ae70:	9d04      	ldr	r5, [sp, #16]
 800ae72:	9f08      	ldr	r7, [sp, #32]
 800ae74:	e73b      	b.n	800acee <_dtoa_r+0x736>
 800ae76:	9a07      	ldr	r2, [sp, #28]
 800ae78:	e767      	b.n	800ad4a <_dtoa_r+0x792>
 800ae7a:	9b06      	ldr	r3, [sp, #24]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	dc18      	bgt.n	800aeb2 <_dtoa_r+0x8fa>
 800ae80:	f1ba 0f00 	cmp.w	sl, #0
 800ae84:	d115      	bne.n	800aeb2 <_dtoa_r+0x8fa>
 800ae86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae8a:	b993      	cbnz	r3, 800aeb2 <_dtoa_r+0x8fa>
 800ae8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae90:	0d1b      	lsrs	r3, r3, #20
 800ae92:	051b      	lsls	r3, r3, #20
 800ae94:	b183      	cbz	r3, 800aeb8 <_dtoa_r+0x900>
 800ae96:	9b04      	ldr	r3, [sp, #16]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	9b05      	ldr	r3, [sp, #20]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	9305      	str	r3, [sp, #20]
 800aea2:	f04f 0801 	mov.w	r8, #1
 800aea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f47f af6a 	bne.w	800ad82 <_dtoa_r+0x7ca>
 800aeae:	2001      	movs	r0, #1
 800aeb0:	e76f      	b.n	800ad92 <_dtoa_r+0x7da>
 800aeb2:	f04f 0800 	mov.w	r8, #0
 800aeb6:	e7f6      	b.n	800aea6 <_dtoa_r+0x8ee>
 800aeb8:	4698      	mov	r8, r3
 800aeba:	e7f4      	b.n	800aea6 <_dtoa_r+0x8ee>
 800aebc:	f43f af7d 	beq.w	800adba <_dtoa_r+0x802>
 800aec0:	4618      	mov	r0, r3
 800aec2:	301c      	adds	r0, #28
 800aec4:	e772      	b.n	800adac <_dtoa_r+0x7f4>
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	dc37      	bgt.n	800af3c <_dtoa_r+0x984>
 800aecc:	9b06      	ldr	r3, [sp, #24]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	dd34      	ble.n	800af3c <_dtoa_r+0x984>
 800aed2:	9b03      	ldr	r3, [sp, #12]
 800aed4:	9302      	str	r3, [sp, #8]
 800aed6:	9b02      	ldr	r3, [sp, #8]
 800aed8:	b96b      	cbnz	r3, 800aef6 <_dtoa_r+0x93e>
 800aeda:	4631      	mov	r1, r6
 800aedc:	2205      	movs	r2, #5
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 fd5e 	bl	800b9a0 <__multadd>
 800aee4:	4601      	mov	r1, r0
 800aee6:	4606      	mov	r6, r0
 800aee8:	ee18 0a10 	vmov	r0, s16
 800aeec:	f000 ffc2 	bl	800be74 <__mcmp>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	f73f adbb 	bgt.w	800aa6c <_dtoa_r+0x4b4>
 800aef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef8:	9d01      	ldr	r5, [sp, #4]
 800aefa:	43db      	mvns	r3, r3
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	f04f 0800 	mov.w	r8, #0
 800af02:	4631      	mov	r1, r6
 800af04:	4620      	mov	r0, r4
 800af06:	f000 fd29 	bl	800b95c <_Bfree>
 800af0a:	2f00      	cmp	r7, #0
 800af0c:	f43f aea4 	beq.w	800ac58 <_dtoa_r+0x6a0>
 800af10:	f1b8 0f00 	cmp.w	r8, #0
 800af14:	d005      	beq.n	800af22 <_dtoa_r+0x96a>
 800af16:	45b8      	cmp	r8, r7
 800af18:	d003      	beq.n	800af22 <_dtoa_r+0x96a>
 800af1a:	4641      	mov	r1, r8
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 fd1d 	bl	800b95c <_Bfree>
 800af22:	4639      	mov	r1, r7
 800af24:	4620      	mov	r0, r4
 800af26:	f000 fd19 	bl	800b95c <_Bfree>
 800af2a:	e695      	b.n	800ac58 <_dtoa_r+0x6a0>
 800af2c:	2600      	movs	r6, #0
 800af2e:	4637      	mov	r7, r6
 800af30:	e7e1      	b.n	800aef6 <_dtoa_r+0x93e>
 800af32:	9700      	str	r7, [sp, #0]
 800af34:	4637      	mov	r7, r6
 800af36:	e599      	b.n	800aa6c <_dtoa_r+0x4b4>
 800af38:	40240000 	.word	0x40240000
 800af3c:	9b08      	ldr	r3, [sp, #32]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 80ca 	beq.w	800b0d8 <_dtoa_r+0xb20>
 800af44:	9b03      	ldr	r3, [sp, #12]
 800af46:	9302      	str	r3, [sp, #8]
 800af48:	2d00      	cmp	r5, #0
 800af4a:	dd05      	ble.n	800af58 <_dtoa_r+0x9a0>
 800af4c:	4639      	mov	r1, r7
 800af4e:	462a      	mov	r2, r5
 800af50:	4620      	mov	r0, r4
 800af52:	f000 ff1f 	bl	800bd94 <__lshift>
 800af56:	4607      	mov	r7, r0
 800af58:	f1b8 0f00 	cmp.w	r8, #0
 800af5c:	d05b      	beq.n	800b016 <_dtoa_r+0xa5e>
 800af5e:	6879      	ldr	r1, [r7, #4]
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fcbb 	bl	800b8dc <_Balloc>
 800af66:	4605      	mov	r5, r0
 800af68:	b928      	cbnz	r0, 800af76 <_dtoa_r+0x9be>
 800af6a:	4b87      	ldr	r3, [pc, #540]	; (800b188 <_dtoa_r+0xbd0>)
 800af6c:	4602      	mov	r2, r0
 800af6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af72:	f7ff bb3b 	b.w	800a5ec <_dtoa_r+0x34>
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	3202      	adds	r2, #2
 800af7a:	0092      	lsls	r2, r2, #2
 800af7c:	f107 010c 	add.w	r1, r7, #12
 800af80:	300c      	adds	r0, #12
 800af82:	f7fd fbad 	bl	80086e0 <memcpy>
 800af86:	2201      	movs	r2, #1
 800af88:	4629      	mov	r1, r5
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 ff02 	bl	800bd94 <__lshift>
 800af90:	9b01      	ldr	r3, [sp, #4]
 800af92:	f103 0901 	add.w	r9, r3, #1
 800af96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af9a:	4413      	add	r3, r2
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	f00a 0301 	and.w	r3, sl, #1
 800afa2:	46b8      	mov	r8, r7
 800afa4:	9304      	str	r3, [sp, #16]
 800afa6:	4607      	mov	r7, r0
 800afa8:	4631      	mov	r1, r6
 800afaa:	ee18 0a10 	vmov	r0, s16
 800afae:	f7ff fa75 	bl	800a49c <quorem>
 800afb2:	4641      	mov	r1, r8
 800afb4:	9002      	str	r0, [sp, #8]
 800afb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800afba:	ee18 0a10 	vmov	r0, s16
 800afbe:	f000 ff59 	bl	800be74 <__mcmp>
 800afc2:	463a      	mov	r2, r7
 800afc4:	9003      	str	r0, [sp, #12]
 800afc6:	4631      	mov	r1, r6
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 ff6f 	bl	800beac <__mdiff>
 800afce:	68c2      	ldr	r2, [r0, #12]
 800afd0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800afd4:	4605      	mov	r5, r0
 800afd6:	bb02      	cbnz	r2, 800b01a <_dtoa_r+0xa62>
 800afd8:	4601      	mov	r1, r0
 800afda:	ee18 0a10 	vmov	r0, s16
 800afde:	f000 ff49 	bl	800be74 <__mcmp>
 800afe2:	4602      	mov	r2, r0
 800afe4:	4629      	mov	r1, r5
 800afe6:	4620      	mov	r0, r4
 800afe8:	9207      	str	r2, [sp, #28]
 800afea:	f000 fcb7 	bl	800b95c <_Bfree>
 800afee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aff2:	ea43 0102 	orr.w	r1, r3, r2
 800aff6:	9b04      	ldr	r3, [sp, #16]
 800aff8:	430b      	orrs	r3, r1
 800affa:	464d      	mov	r5, r9
 800affc:	d10f      	bne.n	800b01e <_dtoa_r+0xa66>
 800affe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b002:	d02a      	beq.n	800b05a <_dtoa_r+0xaa2>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	dd02      	ble.n	800b010 <_dtoa_r+0xa58>
 800b00a:	9b02      	ldr	r3, [sp, #8]
 800b00c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b010:	f88b a000 	strb.w	sl, [fp]
 800b014:	e775      	b.n	800af02 <_dtoa_r+0x94a>
 800b016:	4638      	mov	r0, r7
 800b018:	e7ba      	b.n	800af90 <_dtoa_r+0x9d8>
 800b01a:	2201      	movs	r2, #1
 800b01c:	e7e2      	b.n	800afe4 <_dtoa_r+0xa2c>
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	2b00      	cmp	r3, #0
 800b022:	db04      	blt.n	800b02e <_dtoa_r+0xa76>
 800b024:	9906      	ldr	r1, [sp, #24]
 800b026:	430b      	orrs	r3, r1
 800b028:	9904      	ldr	r1, [sp, #16]
 800b02a:	430b      	orrs	r3, r1
 800b02c:	d122      	bne.n	800b074 <_dtoa_r+0xabc>
 800b02e:	2a00      	cmp	r2, #0
 800b030:	ddee      	ble.n	800b010 <_dtoa_r+0xa58>
 800b032:	ee18 1a10 	vmov	r1, s16
 800b036:	2201      	movs	r2, #1
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 feab 	bl	800bd94 <__lshift>
 800b03e:	4631      	mov	r1, r6
 800b040:	ee08 0a10 	vmov	s16, r0
 800b044:	f000 ff16 	bl	800be74 <__mcmp>
 800b048:	2800      	cmp	r0, #0
 800b04a:	dc03      	bgt.n	800b054 <_dtoa_r+0xa9c>
 800b04c:	d1e0      	bne.n	800b010 <_dtoa_r+0xa58>
 800b04e:	f01a 0f01 	tst.w	sl, #1
 800b052:	d0dd      	beq.n	800b010 <_dtoa_r+0xa58>
 800b054:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b058:	d1d7      	bne.n	800b00a <_dtoa_r+0xa52>
 800b05a:	2339      	movs	r3, #57	; 0x39
 800b05c:	f88b 3000 	strb.w	r3, [fp]
 800b060:	462b      	mov	r3, r5
 800b062:	461d      	mov	r5, r3
 800b064:	3b01      	subs	r3, #1
 800b066:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b06a:	2a39      	cmp	r2, #57	; 0x39
 800b06c:	d071      	beq.n	800b152 <_dtoa_r+0xb9a>
 800b06e:	3201      	adds	r2, #1
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	e746      	b.n	800af02 <_dtoa_r+0x94a>
 800b074:	2a00      	cmp	r2, #0
 800b076:	dd07      	ble.n	800b088 <_dtoa_r+0xad0>
 800b078:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b07c:	d0ed      	beq.n	800b05a <_dtoa_r+0xaa2>
 800b07e:	f10a 0301 	add.w	r3, sl, #1
 800b082:	f88b 3000 	strb.w	r3, [fp]
 800b086:	e73c      	b.n	800af02 <_dtoa_r+0x94a>
 800b088:	9b05      	ldr	r3, [sp, #20]
 800b08a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b08e:	4599      	cmp	r9, r3
 800b090:	d047      	beq.n	800b122 <_dtoa_r+0xb6a>
 800b092:	ee18 1a10 	vmov	r1, s16
 800b096:	2300      	movs	r3, #0
 800b098:	220a      	movs	r2, #10
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 fc80 	bl	800b9a0 <__multadd>
 800b0a0:	45b8      	cmp	r8, r7
 800b0a2:	ee08 0a10 	vmov	s16, r0
 800b0a6:	f04f 0300 	mov.w	r3, #0
 800b0aa:	f04f 020a 	mov.w	r2, #10
 800b0ae:	4641      	mov	r1, r8
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	d106      	bne.n	800b0c2 <_dtoa_r+0xb0a>
 800b0b4:	f000 fc74 	bl	800b9a0 <__multadd>
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	f109 0901 	add.w	r9, r9, #1
 800b0c0:	e772      	b.n	800afa8 <_dtoa_r+0x9f0>
 800b0c2:	f000 fc6d 	bl	800b9a0 <__multadd>
 800b0c6:	4639      	mov	r1, r7
 800b0c8:	4680      	mov	r8, r0
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	220a      	movs	r2, #10
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f000 fc66 	bl	800b9a0 <__multadd>
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	e7f1      	b.n	800b0bc <_dtoa_r+0xb04>
 800b0d8:	9b03      	ldr	r3, [sp, #12]
 800b0da:	9302      	str	r3, [sp, #8]
 800b0dc:	9d01      	ldr	r5, [sp, #4]
 800b0de:	ee18 0a10 	vmov	r0, s16
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	f7ff f9da 	bl	800a49c <quorem>
 800b0e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0ec:	9b01      	ldr	r3, [sp, #4]
 800b0ee:	f805 ab01 	strb.w	sl, [r5], #1
 800b0f2:	1aea      	subs	r2, r5, r3
 800b0f4:	9b02      	ldr	r3, [sp, #8]
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	dd09      	ble.n	800b10e <_dtoa_r+0xb56>
 800b0fa:	ee18 1a10 	vmov	r1, s16
 800b0fe:	2300      	movs	r3, #0
 800b100:	220a      	movs	r2, #10
 800b102:	4620      	mov	r0, r4
 800b104:	f000 fc4c 	bl	800b9a0 <__multadd>
 800b108:	ee08 0a10 	vmov	s16, r0
 800b10c:	e7e7      	b.n	800b0de <_dtoa_r+0xb26>
 800b10e:	9b02      	ldr	r3, [sp, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	bfc8      	it	gt
 800b114:	461d      	movgt	r5, r3
 800b116:	9b01      	ldr	r3, [sp, #4]
 800b118:	bfd8      	it	le
 800b11a:	2501      	movle	r5, #1
 800b11c:	441d      	add	r5, r3
 800b11e:	f04f 0800 	mov.w	r8, #0
 800b122:	ee18 1a10 	vmov	r1, s16
 800b126:	2201      	movs	r2, #1
 800b128:	4620      	mov	r0, r4
 800b12a:	f000 fe33 	bl	800bd94 <__lshift>
 800b12e:	4631      	mov	r1, r6
 800b130:	ee08 0a10 	vmov	s16, r0
 800b134:	f000 fe9e 	bl	800be74 <__mcmp>
 800b138:	2800      	cmp	r0, #0
 800b13a:	dc91      	bgt.n	800b060 <_dtoa_r+0xaa8>
 800b13c:	d102      	bne.n	800b144 <_dtoa_r+0xb8c>
 800b13e:	f01a 0f01 	tst.w	sl, #1
 800b142:	d18d      	bne.n	800b060 <_dtoa_r+0xaa8>
 800b144:	462b      	mov	r3, r5
 800b146:	461d      	mov	r5, r3
 800b148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b14c:	2a30      	cmp	r2, #48	; 0x30
 800b14e:	d0fa      	beq.n	800b146 <_dtoa_r+0xb8e>
 800b150:	e6d7      	b.n	800af02 <_dtoa_r+0x94a>
 800b152:	9a01      	ldr	r2, [sp, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d184      	bne.n	800b062 <_dtoa_r+0xaaa>
 800b158:	9b00      	ldr	r3, [sp, #0]
 800b15a:	3301      	adds	r3, #1
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	2331      	movs	r3, #49	; 0x31
 800b160:	7013      	strb	r3, [r2, #0]
 800b162:	e6ce      	b.n	800af02 <_dtoa_r+0x94a>
 800b164:	4b09      	ldr	r3, [pc, #36]	; (800b18c <_dtoa_r+0xbd4>)
 800b166:	f7ff ba95 	b.w	800a694 <_dtoa_r+0xdc>
 800b16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f47f aa6e 	bne.w	800a64e <_dtoa_r+0x96>
 800b172:	4b07      	ldr	r3, [pc, #28]	; (800b190 <_dtoa_r+0xbd8>)
 800b174:	f7ff ba8e 	b.w	800a694 <_dtoa_r+0xdc>
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	dcae      	bgt.n	800b0dc <_dtoa_r+0xb24>
 800b17e:	9b06      	ldr	r3, [sp, #24]
 800b180:	2b02      	cmp	r3, #2
 800b182:	f73f aea8 	bgt.w	800aed6 <_dtoa_r+0x91e>
 800b186:	e7a9      	b.n	800b0dc <_dtoa_r+0xb24>
 800b188:	0800d5c5 	.word	0x0800d5c5
 800b18c:	0800d334 	.word	0x0800d334
 800b190:	0800d55d 	.word	0x0800d55d

0800b194 <fiprintf>:
 800b194:	b40e      	push	{r1, r2, r3}
 800b196:	b503      	push	{r0, r1, lr}
 800b198:	4601      	mov	r1, r0
 800b19a:	ab03      	add	r3, sp, #12
 800b19c:	4805      	ldr	r0, [pc, #20]	; (800b1b4 <fiprintf+0x20>)
 800b19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a2:	6800      	ldr	r0, [r0, #0]
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	f001 f9f5 	bl	800c594 <_vfiprintf_r>
 800b1aa:	b002      	add	sp, #8
 800b1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1b0:	b003      	add	sp, #12
 800b1b2:	4770      	bx	lr
 800b1b4:	20000010 	.word	0x20000010

0800b1b8 <rshift>:
 800b1b8:	6903      	ldr	r3, [r0, #16]
 800b1ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1c6:	f100 0414 	add.w	r4, r0, #20
 800b1ca:	dd45      	ble.n	800b258 <rshift+0xa0>
 800b1cc:	f011 011f 	ands.w	r1, r1, #31
 800b1d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1d8:	d10c      	bne.n	800b1f4 <rshift+0x3c>
 800b1da:	f100 0710 	add.w	r7, r0, #16
 800b1de:	4629      	mov	r1, r5
 800b1e0:	42b1      	cmp	r1, r6
 800b1e2:	d334      	bcc.n	800b24e <rshift+0x96>
 800b1e4:	1a9b      	subs	r3, r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	1eea      	subs	r2, r5, #3
 800b1ea:	4296      	cmp	r6, r2
 800b1ec:	bf38      	it	cc
 800b1ee:	2300      	movcc	r3, #0
 800b1f0:	4423      	add	r3, r4
 800b1f2:	e015      	b.n	800b220 <rshift+0x68>
 800b1f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1f8:	f1c1 0820 	rsb	r8, r1, #32
 800b1fc:	40cf      	lsrs	r7, r1
 800b1fe:	f105 0e04 	add.w	lr, r5, #4
 800b202:	46a1      	mov	r9, r4
 800b204:	4576      	cmp	r6, lr
 800b206:	46f4      	mov	ip, lr
 800b208:	d815      	bhi.n	800b236 <rshift+0x7e>
 800b20a:	1a9a      	subs	r2, r3, r2
 800b20c:	0092      	lsls	r2, r2, #2
 800b20e:	3a04      	subs	r2, #4
 800b210:	3501      	adds	r5, #1
 800b212:	42ae      	cmp	r6, r5
 800b214:	bf38      	it	cc
 800b216:	2200      	movcc	r2, #0
 800b218:	18a3      	adds	r3, r4, r2
 800b21a:	50a7      	str	r7, [r4, r2]
 800b21c:	b107      	cbz	r7, 800b220 <rshift+0x68>
 800b21e:	3304      	adds	r3, #4
 800b220:	1b1a      	subs	r2, r3, r4
 800b222:	42a3      	cmp	r3, r4
 800b224:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b228:	bf08      	it	eq
 800b22a:	2300      	moveq	r3, #0
 800b22c:	6102      	str	r2, [r0, #16]
 800b22e:	bf08      	it	eq
 800b230:	6143      	streq	r3, [r0, #20]
 800b232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b236:	f8dc c000 	ldr.w	ip, [ip]
 800b23a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b23e:	ea4c 0707 	orr.w	r7, ip, r7
 800b242:	f849 7b04 	str.w	r7, [r9], #4
 800b246:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b24a:	40cf      	lsrs	r7, r1
 800b24c:	e7da      	b.n	800b204 <rshift+0x4c>
 800b24e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b252:	f847 cf04 	str.w	ip, [r7, #4]!
 800b256:	e7c3      	b.n	800b1e0 <rshift+0x28>
 800b258:	4623      	mov	r3, r4
 800b25a:	e7e1      	b.n	800b220 <rshift+0x68>

0800b25c <__hexdig_fun>:
 800b25c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b260:	2b09      	cmp	r3, #9
 800b262:	d802      	bhi.n	800b26a <__hexdig_fun+0xe>
 800b264:	3820      	subs	r0, #32
 800b266:	b2c0      	uxtb	r0, r0
 800b268:	4770      	bx	lr
 800b26a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b26e:	2b05      	cmp	r3, #5
 800b270:	d801      	bhi.n	800b276 <__hexdig_fun+0x1a>
 800b272:	3847      	subs	r0, #71	; 0x47
 800b274:	e7f7      	b.n	800b266 <__hexdig_fun+0xa>
 800b276:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b27a:	2b05      	cmp	r3, #5
 800b27c:	d801      	bhi.n	800b282 <__hexdig_fun+0x26>
 800b27e:	3827      	subs	r0, #39	; 0x27
 800b280:	e7f1      	b.n	800b266 <__hexdig_fun+0xa>
 800b282:	2000      	movs	r0, #0
 800b284:	4770      	bx	lr
	...

0800b288 <__gethex>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	ed2d 8b02 	vpush	{d8}
 800b290:	b089      	sub	sp, #36	; 0x24
 800b292:	ee08 0a10 	vmov	s16, r0
 800b296:	9304      	str	r3, [sp, #16]
 800b298:	4bb4      	ldr	r3, [pc, #720]	; (800b56c <__gethex+0x2e4>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	468b      	mov	fp, r1
 800b2a2:	4690      	mov	r8, r2
 800b2a4:	f7f4 ff9c 	bl	80001e0 <strlen>
 800b2a8:	9b01      	ldr	r3, [sp, #4]
 800b2aa:	f8db 2000 	ldr.w	r2, [fp]
 800b2ae:	4403      	add	r3, r0
 800b2b0:	4682      	mov	sl, r0
 800b2b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b2b6:	9305      	str	r3, [sp, #20]
 800b2b8:	1c93      	adds	r3, r2, #2
 800b2ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2c2:	32fe      	adds	r2, #254	; 0xfe
 800b2c4:	18d1      	adds	r1, r2, r3
 800b2c6:	461f      	mov	r7, r3
 800b2c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2cc:	9100      	str	r1, [sp, #0]
 800b2ce:	2830      	cmp	r0, #48	; 0x30
 800b2d0:	d0f8      	beq.n	800b2c4 <__gethex+0x3c>
 800b2d2:	f7ff ffc3 	bl	800b25c <__hexdig_fun>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d13a      	bne.n	800b352 <__gethex+0xca>
 800b2dc:	9901      	ldr	r1, [sp, #4]
 800b2de:	4652      	mov	r2, sl
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	f001 fa91 	bl	800c808 <strncmp>
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d168      	bne.n	800b3be <__gethex+0x136>
 800b2ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b2f0:	eb07 060a 	add.w	r6, r7, sl
 800b2f4:	f7ff ffb2 	bl	800b25c <__hexdig_fun>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d062      	beq.n	800b3c2 <__gethex+0x13a>
 800b2fc:	4633      	mov	r3, r6
 800b2fe:	7818      	ldrb	r0, [r3, #0]
 800b300:	2830      	cmp	r0, #48	; 0x30
 800b302:	461f      	mov	r7, r3
 800b304:	f103 0301 	add.w	r3, r3, #1
 800b308:	d0f9      	beq.n	800b2fe <__gethex+0x76>
 800b30a:	f7ff ffa7 	bl	800b25c <__hexdig_fun>
 800b30e:	2301      	movs	r3, #1
 800b310:	fab0 f480 	clz	r4, r0
 800b314:	0964      	lsrs	r4, r4, #5
 800b316:	4635      	mov	r5, r6
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	463a      	mov	r2, r7
 800b31c:	4616      	mov	r6, r2
 800b31e:	3201      	adds	r2, #1
 800b320:	7830      	ldrb	r0, [r6, #0]
 800b322:	f7ff ff9b 	bl	800b25c <__hexdig_fun>
 800b326:	2800      	cmp	r0, #0
 800b328:	d1f8      	bne.n	800b31c <__gethex+0x94>
 800b32a:	9901      	ldr	r1, [sp, #4]
 800b32c:	4652      	mov	r2, sl
 800b32e:	4630      	mov	r0, r6
 800b330:	f001 fa6a 	bl	800c808 <strncmp>
 800b334:	b980      	cbnz	r0, 800b358 <__gethex+0xd0>
 800b336:	b94d      	cbnz	r5, 800b34c <__gethex+0xc4>
 800b338:	eb06 050a 	add.w	r5, r6, sl
 800b33c:	462a      	mov	r2, r5
 800b33e:	4616      	mov	r6, r2
 800b340:	3201      	adds	r2, #1
 800b342:	7830      	ldrb	r0, [r6, #0]
 800b344:	f7ff ff8a 	bl	800b25c <__hexdig_fun>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d1f8      	bne.n	800b33e <__gethex+0xb6>
 800b34c:	1bad      	subs	r5, r5, r6
 800b34e:	00ad      	lsls	r5, r5, #2
 800b350:	e004      	b.n	800b35c <__gethex+0xd4>
 800b352:	2400      	movs	r4, #0
 800b354:	4625      	mov	r5, r4
 800b356:	e7e0      	b.n	800b31a <__gethex+0x92>
 800b358:	2d00      	cmp	r5, #0
 800b35a:	d1f7      	bne.n	800b34c <__gethex+0xc4>
 800b35c:	7833      	ldrb	r3, [r6, #0]
 800b35e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b362:	2b50      	cmp	r3, #80	; 0x50
 800b364:	d13b      	bne.n	800b3de <__gethex+0x156>
 800b366:	7873      	ldrb	r3, [r6, #1]
 800b368:	2b2b      	cmp	r3, #43	; 0x2b
 800b36a:	d02c      	beq.n	800b3c6 <__gethex+0x13e>
 800b36c:	2b2d      	cmp	r3, #45	; 0x2d
 800b36e:	d02e      	beq.n	800b3ce <__gethex+0x146>
 800b370:	1c71      	adds	r1, r6, #1
 800b372:	f04f 0900 	mov.w	r9, #0
 800b376:	7808      	ldrb	r0, [r1, #0]
 800b378:	f7ff ff70 	bl	800b25c <__hexdig_fun>
 800b37c:	1e43      	subs	r3, r0, #1
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b18      	cmp	r3, #24
 800b382:	d82c      	bhi.n	800b3de <__gethex+0x156>
 800b384:	f1a0 0210 	sub.w	r2, r0, #16
 800b388:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b38c:	f7ff ff66 	bl	800b25c <__hexdig_fun>
 800b390:	1e43      	subs	r3, r0, #1
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b18      	cmp	r3, #24
 800b396:	d91d      	bls.n	800b3d4 <__gethex+0x14c>
 800b398:	f1b9 0f00 	cmp.w	r9, #0
 800b39c:	d000      	beq.n	800b3a0 <__gethex+0x118>
 800b39e:	4252      	negs	r2, r2
 800b3a0:	4415      	add	r5, r2
 800b3a2:	f8cb 1000 	str.w	r1, [fp]
 800b3a6:	b1e4      	cbz	r4, 800b3e2 <__gethex+0x15a>
 800b3a8:	9b00      	ldr	r3, [sp, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	bf14      	ite	ne
 800b3ae:	2700      	movne	r7, #0
 800b3b0:	2706      	moveq	r7, #6
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	b009      	add	sp, #36	; 0x24
 800b3b6:	ecbd 8b02 	vpop	{d8}
 800b3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3be:	463e      	mov	r6, r7
 800b3c0:	4625      	mov	r5, r4
 800b3c2:	2401      	movs	r4, #1
 800b3c4:	e7ca      	b.n	800b35c <__gethex+0xd4>
 800b3c6:	f04f 0900 	mov.w	r9, #0
 800b3ca:	1cb1      	adds	r1, r6, #2
 800b3cc:	e7d3      	b.n	800b376 <__gethex+0xee>
 800b3ce:	f04f 0901 	mov.w	r9, #1
 800b3d2:	e7fa      	b.n	800b3ca <__gethex+0x142>
 800b3d4:	230a      	movs	r3, #10
 800b3d6:	fb03 0202 	mla	r2, r3, r2, r0
 800b3da:	3a10      	subs	r2, #16
 800b3dc:	e7d4      	b.n	800b388 <__gethex+0x100>
 800b3de:	4631      	mov	r1, r6
 800b3e0:	e7df      	b.n	800b3a2 <__gethex+0x11a>
 800b3e2:	1bf3      	subs	r3, r6, r7
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	2b07      	cmp	r3, #7
 800b3ea:	dc0b      	bgt.n	800b404 <__gethex+0x17c>
 800b3ec:	ee18 0a10 	vmov	r0, s16
 800b3f0:	f000 fa74 	bl	800b8dc <_Balloc>
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	b940      	cbnz	r0, 800b40a <__gethex+0x182>
 800b3f8:	4b5d      	ldr	r3, [pc, #372]	; (800b570 <__gethex+0x2e8>)
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	21de      	movs	r1, #222	; 0xde
 800b3fe:	485d      	ldr	r0, [pc, #372]	; (800b574 <__gethex+0x2ec>)
 800b400:	f7ff f82e 	bl	800a460 <__assert_func>
 800b404:	3101      	adds	r1, #1
 800b406:	105b      	asrs	r3, r3, #1
 800b408:	e7ee      	b.n	800b3e8 <__gethex+0x160>
 800b40a:	f100 0914 	add.w	r9, r0, #20
 800b40e:	f04f 0b00 	mov.w	fp, #0
 800b412:	f1ca 0301 	rsb	r3, sl, #1
 800b416:	f8cd 9008 	str.w	r9, [sp, #8]
 800b41a:	f8cd b000 	str.w	fp, [sp]
 800b41e:	9306      	str	r3, [sp, #24]
 800b420:	42b7      	cmp	r7, r6
 800b422:	d340      	bcc.n	800b4a6 <__gethex+0x21e>
 800b424:	9802      	ldr	r0, [sp, #8]
 800b426:	9b00      	ldr	r3, [sp, #0]
 800b428:	f840 3b04 	str.w	r3, [r0], #4
 800b42c:	eba0 0009 	sub.w	r0, r0, r9
 800b430:	1080      	asrs	r0, r0, #2
 800b432:	0146      	lsls	r6, r0, #5
 800b434:	6120      	str	r0, [r4, #16]
 800b436:	4618      	mov	r0, r3
 800b438:	f000 fb42 	bl	800bac0 <__hi0bits>
 800b43c:	1a30      	subs	r0, r6, r0
 800b43e:	f8d8 6000 	ldr.w	r6, [r8]
 800b442:	42b0      	cmp	r0, r6
 800b444:	dd63      	ble.n	800b50e <__gethex+0x286>
 800b446:	1b87      	subs	r7, r0, r6
 800b448:	4639      	mov	r1, r7
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 fee6 	bl	800c21c <__any_on>
 800b450:	4682      	mov	sl, r0
 800b452:	b1a8      	cbz	r0, 800b480 <__gethex+0x1f8>
 800b454:	1e7b      	subs	r3, r7, #1
 800b456:	1159      	asrs	r1, r3, #5
 800b458:	f003 021f 	and.w	r2, r3, #31
 800b45c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b460:	f04f 0a01 	mov.w	sl, #1
 800b464:	fa0a f202 	lsl.w	r2, sl, r2
 800b468:	420a      	tst	r2, r1
 800b46a:	d009      	beq.n	800b480 <__gethex+0x1f8>
 800b46c:	4553      	cmp	r3, sl
 800b46e:	dd05      	ble.n	800b47c <__gethex+0x1f4>
 800b470:	1eb9      	subs	r1, r7, #2
 800b472:	4620      	mov	r0, r4
 800b474:	f000 fed2 	bl	800c21c <__any_on>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d145      	bne.n	800b508 <__gethex+0x280>
 800b47c:	f04f 0a02 	mov.w	sl, #2
 800b480:	4639      	mov	r1, r7
 800b482:	4620      	mov	r0, r4
 800b484:	f7ff fe98 	bl	800b1b8 <rshift>
 800b488:	443d      	add	r5, r7
 800b48a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b48e:	42ab      	cmp	r3, r5
 800b490:	da4c      	bge.n	800b52c <__gethex+0x2a4>
 800b492:	ee18 0a10 	vmov	r0, s16
 800b496:	4621      	mov	r1, r4
 800b498:	f000 fa60 	bl	800b95c <_Bfree>
 800b49c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b49e:	2300      	movs	r3, #0
 800b4a0:	6013      	str	r3, [r2, #0]
 800b4a2:	27a3      	movs	r7, #163	; 0xa3
 800b4a4:	e785      	b.n	800b3b2 <__gethex+0x12a>
 800b4a6:	1e73      	subs	r3, r6, #1
 800b4a8:	9a05      	ldr	r2, [sp, #20]
 800b4aa:	9303      	str	r3, [sp, #12]
 800b4ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d019      	beq.n	800b4e8 <__gethex+0x260>
 800b4b4:	f1bb 0f20 	cmp.w	fp, #32
 800b4b8:	d107      	bne.n	800b4ca <__gethex+0x242>
 800b4ba:	9b02      	ldr	r3, [sp, #8]
 800b4bc:	9a00      	ldr	r2, [sp, #0]
 800b4be:	f843 2b04 	str.w	r2, [r3], #4
 800b4c2:	9302      	str	r3, [sp, #8]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	469b      	mov	fp, r3
 800b4ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b4ce:	f7ff fec5 	bl	800b25c <__hexdig_fun>
 800b4d2:	9b00      	ldr	r3, [sp, #0]
 800b4d4:	f000 000f 	and.w	r0, r0, #15
 800b4d8:	fa00 f00b 	lsl.w	r0, r0, fp
 800b4dc:	4303      	orrs	r3, r0
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	f10b 0b04 	add.w	fp, fp, #4
 800b4e4:	9b03      	ldr	r3, [sp, #12]
 800b4e6:	e00d      	b.n	800b504 <__gethex+0x27c>
 800b4e8:	9b03      	ldr	r3, [sp, #12]
 800b4ea:	9a06      	ldr	r2, [sp, #24]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	42bb      	cmp	r3, r7
 800b4f0:	d3e0      	bcc.n	800b4b4 <__gethex+0x22c>
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	9901      	ldr	r1, [sp, #4]
 800b4f6:	9307      	str	r3, [sp, #28]
 800b4f8:	4652      	mov	r2, sl
 800b4fa:	f001 f985 	bl	800c808 <strncmp>
 800b4fe:	9b07      	ldr	r3, [sp, #28]
 800b500:	2800      	cmp	r0, #0
 800b502:	d1d7      	bne.n	800b4b4 <__gethex+0x22c>
 800b504:	461e      	mov	r6, r3
 800b506:	e78b      	b.n	800b420 <__gethex+0x198>
 800b508:	f04f 0a03 	mov.w	sl, #3
 800b50c:	e7b8      	b.n	800b480 <__gethex+0x1f8>
 800b50e:	da0a      	bge.n	800b526 <__gethex+0x29e>
 800b510:	1a37      	subs	r7, r6, r0
 800b512:	4621      	mov	r1, r4
 800b514:	ee18 0a10 	vmov	r0, s16
 800b518:	463a      	mov	r2, r7
 800b51a:	f000 fc3b 	bl	800bd94 <__lshift>
 800b51e:	1bed      	subs	r5, r5, r7
 800b520:	4604      	mov	r4, r0
 800b522:	f100 0914 	add.w	r9, r0, #20
 800b526:	f04f 0a00 	mov.w	sl, #0
 800b52a:	e7ae      	b.n	800b48a <__gethex+0x202>
 800b52c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b530:	42a8      	cmp	r0, r5
 800b532:	dd72      	ble.n	800b61a <__gethex+0x392>
 800b534:	1b45      	subs	r5, r0, r5
 800b536:	42ae      	cmp	r6, r5
 800b538:	dc36      	bgt.n	800b5a8 <__gethex+0x320>
 800b53a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d02a      	beq.n	800b598 <__gethex+0x310>
 800b542:	2b03      	cmp	r3, #3
 800b544:	d02c      	beq.n	800b5a0 <__gethex+0x318>
 800b546:	2b01      	cmp	r3, #1
 800b548:	d11c      	bne.n	800b584 <__gethex+0x2fc>
 800b54a:	42ae      	cmp	r6, r5
 800b54c:	d11a      	bne.n	800b584 <__gethex+0x2fc>
 800b54e:	2e01      	cmp	r6, #1
 800b550:	d112      	bne.n	800b578 <__gethex+0x2f0>
 800b552:	9a04      	ldr	r2, [sp, #16]
 800b554:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b558:	6013      	str	r3, [r2, #0]
 800b55a:	2301      	movs	r3, #1
 800b55c:	6123      	str	r3, [r4, #16]
 800b55e:	f8c9 3000 	str.w	r3, [r9]
 800b562:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b564:	2762      	movs	r7, #98	; 0x62
 800b566:	601c      	str	r4, [r3, #0]
 800b568:	e723      	b.n	800b3b2 <__gethex+0x12a>
 800b56a:	bf00      	nop
 800b56c:	0800d63c 	.word	0x0800d63c
 800b570:	0800d5c5 	.word	0x0800d5c5
 800b574:	0800d5d6 	.word	0x0800d5d6
 800b578:	1e71      	subs	r1, r6, #1
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 fe4e 	bl	800c21c <__any_on>
 800b580:	2800      	cmp	r0, #0
 800b582:	d1e6      	bne.n	800b552 <__gethex+0x2ca>
 800b584:	ee18 0a10 	vmov	r0, s16
 800b588:	4621      	mov	r1, r4
 800b58a:	f000 f9e7 	bl	800b95c <_Bfree>
 800b58e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b590:	2300      	movs	r3, #0
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	2750      	movs	r7, #80	; 0x50
 800b596:	e70c      	b.n	800b3b2 <__gethex+0x12a>
 800b598:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1f2      	bne.n	800b584 <__gethex+0x2fc>
 800b59e:	e7d8      	b.n	800b552 <__gethex+0x2ca>
 800b5a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1d5      	bne.n	800b552 <__gethex+0x2ca>
 800b5a6:	e7ed      	b.n	800b584 <__gethex+0x2fc>
 800b5a8:	1e6f      	subs	r7, r5, #1
 800b5aa:	f1ba 0f00 	cmp.w	sl, #0
 800b5ae:	d131      	bne.n	800b614 <__gethex+0x38c>
 800b5b0:	b127      	cbz	r7, 800b5bc <__gethex+0x334>
 800b5b2:	4639      	mov	r1, r7
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f000 fe31 	bl	800c21c <__any_on>
 800b5ba:	4682      	mov	sl, r0
 800b5bc:	117b      	asrs	r3, r7, #5
 800b5be:	2101      	movs	r1, #1
 800b5c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b5c4:	f007 071f 	and.w	r7, r7, #31
 800b5c8:	fa01 f707 	lsl.w	r7, r1, r7
 800b5cc:	421f      	tst	r7, r3
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	bf18      	it	ne
 800b5d4:	f04a 0a02 	orrne.w	sl, sl, #2
 800b5d8:	1b76      	subs	r6, r6, r5
 800b5da:	f7ff fded 	bl	800b1b8 <rshift>
 800b5de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5e2:	2702      	movs	r7, #2
 800b5e4:	f1ba 0f00 	cmp.w	sl, #0
 800b5e8:	d048      	beq.n	800b67c <__gethex+0x3f4>
 800b5ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d015      	beq.n	800b61e <__gethex+0x396>
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d017      	beq.n	800b626 <__gethex+0x39e>
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d109      	bne.n	800b60e <__gethex+0x386>
 800b5fa:	f01a 0f02 	tst.w	sl, #2
 800b5fe:	d006      	beq.n	800b60e <__gethex+0x386>
 800b600:	f8d9 0000 	ldr.w	r0, [r9]
 800b604:	ea4a 0a00 	orr.w	sl, sl, r0
 800b608:	f01a 0f01 	tst.w	sl, #1
 800b60c:	d10e      	bne.n	800b62c <__gethex+0x3a4>
 800b60e:	f047 0710 	orr.w	r7, r7, #16
 800b612:	e033      	b.n	800b67c <__gethex+0x3f4>
 800b614:	f04f 0a01 	mov.w	sl, #1
 800b618:	e7d0      	b.n	800b5bc <__gethex+0x334>
 800b61a:	2701      	movs	r7, #1
 800b61c:	e7e2      	b.n	800b5e4 <__gethex+0x35c>
 800b61e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b620:	f1c3 0301 	rsb	r3, r3, #1
 800b624:	9315      	str	r3, [sp, #84]	; 0x54
 800b626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0f0      	beq.n	800b60e <__gethex+0x386>
 800b62c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b630:	f104 0314 	add.w	r3, r4, #20
 800b634:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b638:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b63c:	f04f 0c00 	mov.w	ip, #0
 800b640:	4618      	mov	r0, r3
 800b642:	f853 2b04 	ldr.w	r2, [r3], #4
 800b646:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b64a:	d01c      	beq.n	800b686 <__gethex+0x3fe>
 800b64c:	3201      	adds	r2, #1
 800b64e:	6002      	str	r2, [r0, #0]
 800b650:	2f02      	cmp	r7, #2
 800b652:	f104 0314 	add.w	r3, r4, #20
 800b656:	d13f      	bne.n	800b6d8 <__gethex+0x450>
 800b658:	f8d8 2000 	ldr.w	r2, [r8]
 800b65c:	3a01      	subs	r2, #1
 800b65e:	42b2      	cmp	r2, r6
 800b660:	d10a      	bne.n	800b678 <__gethex+0x3f0>
 800b662:	1171      	asrs	r1, r6, #5
 800b664:	2201      	movs	r2, #1
 800b666:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b66a:	f006 061f 	and.w	r6, r6, #31
 800b66e:	fa02 f606 	lsl.w	r6, r2, r6
 800b672:	421e      	tst	r6, r3
 800b674:	bf18      	it	ne
 800b676:	4617      	movne	r7, r2
 800b678:	f047 0720 	orr.w	r7, r7, #32
 800b67c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b67e:	601c      	str	r4, [r3, #0]
 800b680:	9b04      	ldr	r3, [sp, #16]
 800b682:	601d      	str	r5, [r3, #0]
 800b684:	e695      	b.n	800b3b2 <__gethex+0x12a>
 800b686:	4299      	cmp	r1, r3
 800b688:	f843 cc04 	str.w	ip, [r3, #-4]
 800b68c:	d8d8      	bhi.n	800b640 <__gethex+0x3b8>
 800b68e:	68a3      	ldr	r3, [r4, #8]
 800b690:	459b      	cmp	fp, r3
 800b692:	db19      	blt.n	800b6c8 <__gethex+0x440>
 800b694:	6861      	ldr	r1, [r4, #4]
 800b696:	ee18 0a10 	vmov	r0, s16
 800b69a:	3101      	adds	r1, #1
 800b69c:	f000 f91e 	bl	800b8dc <_Balloc>
 800b6a0:	4681      	mov	r9, r0
 800b6a2:	b918      	cbnz	r0, 800b6ac <__gethex+0x424>
 800b6a4:	4b1a      	ldr	r3, [pc, #104]	; (800b710 <__gethex+0x488>)
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	2184      	movs	r1, #132	; 0x84
 800b6aa:	e6a8      	b.n	800b3fe <__gethex+0x176>
 800b6ac:	6922      	ldr	r2, [r4, #16]
 800b6ae:	3202      	adds	r2, #2
 800b6b0:	f104 010c 	add.w	r1, r4, #12
 800b6b4:	0092      	lsls	r2, r2, #2
 800b6b6:	300c      	adds	r0, #12
 800b6b8:	f7fd f812 	bl	80086e0 <memcpy>
 800b6bc:	4621      	mov	r1, r4
 800b6be:	ee18 0a10 	vmov	r0, s16
 800b6c2:	f000 f94b 	bl	800b95c <_Bfree>
 800b6c6:	464c      	mov	r4, r9
 800b6c8:	6923      	ldr	r3, [r4, #16]
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6d0:	6122      	str	r2, [r4, #16]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	615a      	str	r2, [r3, #20]
 800b6d6:	e7bb      	b.n	800b650 <__gethex+0x3c8>
 800b6d8:	6922      	ldr	r2, [r4, #16]
 800b6da:	455a      	cmp	r2, fp
 800b6dc:	dd0b      	ble.n	800b6f6 <__gethex+0x46e>
 800b6de:	2101      	movs	r1, #1
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f7ff fd69 	bl	800b1b8 <rshift>
 800b6e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6ea:	3501      	adds	r5, #1
 800b6ec:	42ab      	cmp	r3, r5
 800b6ee:	f6ff aed0 	blt.w	800b492 <__gethex+0x20a>
 800b6f2:	2701      	movs	r7, #1
 800b6f4:	e7c0      	b.n	800b678 <__gethex+0x3f0>
 800b6f6:	f016 061f 	ands.w	r6, r6, #31
 800b6fa:	d0fa      	beq.n	800b6f2 <__gethex+0x46a>
 800b6fc:	4453      	add	r3, sl
 800b6fe:	f1c6 0620 	rsb	r6, r6, #32
 800b702:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b706:	f000 f9db 	bl	800bac0 <__hi0bits>
 800b70a:	42b0      	cmp	r0, r6
 800b70c:	dbe7      	blt.n	800b6de <__gethex+0x456>
 800b70e:	e7f0      	b.n	800b6f2 <__gethex+0x46a>
 800b710:	0800d5c5 	.word	0x0800d5c5

0800b714 <L_shift>:
 800b714:	f1c2 0208 	rsb	r2, r2, #8
 800b718:	0092      	lsls	r2, r2, #2
 800b71a:	b570      	push	{r4, r5, r6, lr}
 800b71c:	f1c2 0620 	rsb	r6, r2, #32
 800b720:	6843      	ldr	r3, [r0, #4]
 800b722:	6804      	ldr	r4, [r0, #0]
 800b724:	fa03 f506 	lsl.w	r5, r3, r6
 800b728:	432c      	orrs	r4, r5
 800b72a:	40d3      	lsrs	r3, r2
 800b72c:	6004      	str	r4, [r0, #0]
 800b72e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b732:	4288      	cmp	r0, r1
 800b734:	d3f4      	bcc.n	800b720 <L_shift+0xc>
 800b736:	bd70      	pop	{r4, r5, r6, pc}

0800b738 <__match>:
 800b738:	b530      	push	{r4, r5, lr}
 800b73a:	6803      	ldr	r3, [r0, #0]
 800b73c:	3301      	adds	r3, #1
 800b73e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b742:	b914      	cbnz	r4, 800b74a <__match+0x12>
 800b744:	6003      	str	r3, [r0, #0]
 800b746:	2001      	movs	r0, #1
 800b748:	bd30      	pop	{r4, r5, pc}
 800b74a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b74e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b752:	2d19      	cmp	r5, #25
 800b754:	bf98      	it	ls
 800b756:	3220      	addls	r2, #32
 800b758:	42a2      	cmp	r2, r4
 800b75a:	d0f0      	beq.n	800b73e <__match+0x6>
 800b75c:	2000      	movs	r0, #0
 800b75e:	e7f3      	b.n	800b748 <__match+0x10>

0800b760 <__hexnan>:
 800b760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	680b      	ldr	r3, [r1, #0]
 800b766:	115e      	asrs	r6, r3, #5
 800b768:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b76c:	f013 031f 	ands.w	r3, r3, #31
 800b770:	b087      	sub	sp, #28
 800b772:	bf18      	it	ne
 800b774:	3604      	addne	r6, #4
 800b776:	2500      	movs	r5, #0
 800b778:	1f37      	subs	r7, r6, #4
 800b77a:	4690      	mov	r8, r2
 800b77c:	6802      	ldr	r2, [r0, #0]
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	4682      	mov	sl, r0
 800b782:	f846 5c04 	str.w	r5, [r6, #-4]
 800b786:	46b9      	mov	r9, r7
 800b788:	463c      	mov	r4, r7
 800b78a:	9502      	str	r5, [sp, #8]
 800b78c:	46ab      	mov	fp, r5
 800b78e:	7851      	ldrb	r1, [r2, #1]
 800b790:	1c53      	adds	r3, r2, #1
 800b792:	9303      	str	r3, [sp, #12]
 800b794:	b341      	cbz	r1, 800b7e8 <__hexnan+0x88>
 800b796:	4608      	mov	r0, r1
 800b798:	9205      	str	r2, [sp, #20]
 800b79a:	9104      	str	r1, [sp, #16]
 800b79c:	f7ff fd5e 	bl	800b25c <__hexdig_fun>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d14f      	bne.n	800b844 <__hexnan+0xe4>
 800b7a4:	9904      	ldr	r1, [sp, #16]
 800b7a6:	9a05      	ldr	r2, [sp, #20]
 800b7a8:	2920      	cmp	r1, #32
 800b7aa:	d818      	bhi.n	800b7de <__hexnan+0x7e>
 800b7ac:	9b02      	ldr	r3, [sp, #8]
 800b7ae:	459b      	cmp	fp, r3
 800b7b0:	dd13      	ble.n	800b7da <__hexnan+0x7a>
 800b7b2:	454c      	cmp	r4, r9
 800b7b4:	d206      	bcs.n	800b7c4 <__hexnan+0x64>
 800b7b6:	2d07      	cmp	r5, #7
 800b7b8:	dc04      	bgt.n	800b7c4 <__hexnan+0x64>
 800b7ba:	462a      	mov	r2, r5
 800b7bc:	4649      	mov	r1, r9
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f7ff ffa8 	bl	800b714 <L_shift>
 800b7c4:	4544      	cmp	r4, r8
 800b7c6:	d950      	bls.n	800b86a <__hexnan+0x10a>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f1a4 0904 	sub.w	r9, r4, #4
 800b7ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7d2:	f8cd b008 	str.w	fp, [sp, #8]
 800b7d6:	464c      	mov	r4, r9
 800b7d8:	461d      	mov	r5, r3
 800b7da:	9a03      	ldr	r2, [sp, #12]
 800b7dc:	e7d7      	b.n	800b78e <__hexnan+0x2e>
 800b7de:	2929      	cmp	r1, #41	; 0x29
 800b7e0:	d156      	bne.n	800b890 <__hexnan+0x130>
 800b7e2:	3202      	adds	r2, #2
 800b7e4:	f8ca 2000 	str.w	r2, [sl]
 800b7e8:	f1bb 0f00 	cmp.w	fp, #0
 800b7ec:	d050      	beq.n	800b890 <__hexnan+0x130>
 800b7ee:	454c      	cmp	r4, r9
 800b7f0:	d206      	bcs.n	800b800 <__hexnan+0xa0>
 800b7f2:	2d07      	cmp	r5, #7
 800b7f4:	dc04      	bgt.n	800b800 <__hexnan+0xa0>
 800b7f6:	462a      	mov	r2, r5
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f7ff ff8a 	bl	800b714 <L_shift>
 800b800:	4544      	cmp	r4, r8
 800b802:	d934      	bls.n	800b86e <__hexnan+0x10e>
 800b804:	f1a8 0204 	sub.w	r2, r8, #4
 800b808:	4623      	mov	r3, r4
 800b80a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b80e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b812:	429f      	cmp	r7, r3
 800b814:	d2f9      	bcs.n	800b80a <__hexnan+0xaa>
 800b816:	1b3b      	subs	r3, r7, r4
 800b818:	f023 0303 	bic.w	r3, r3, #3
 800b81c:	3304      	adds	r3, #4
 800b81e:	3401      	adds	r4, #1
 800b820:	3e03      	subs	r6, #3
 800b822:	42b4      	cmp	r4, r6
 800b824:	bf88      	it	hi
 800b826:	2304      	movhi	r3, #4
 800b828:	4443      	add	r3, r8
 800b82a:	2200      	movs	r2, #0
 800b82c:	f843 2b04 	str.w	r2, [r3], #4
 800b830:	429f      	cmp	r7, r3
 800b832:	d2fb      	bcs.n	800b82c <__hexnan+0xcc>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	b91b      	cbnz	r3, 800b840 <__hexnan+0xe0>
 800b838:	4547      	cmp	r7, r8
 800b83a:	d127      	bne.n	800b88c <__hexnan+0x12c>
 800b83c:	2301      	movs	r3, #1
 800b83e:	603b      	str	r3, [r7, #0]
 800b840:	2005      	movs	r0, #5
 800b842:	e026      	b.n	800b892 <__hexnan+0x132>
 800b844:	3501      	adds	r5, #1
 800b846:	2d08      	cmp	r5, #8
 800b848:	f10b 0b01 	add.w	fp, fp, #1
 800b84c:	dd06      	ble.n	800b85c <__hexnan+0xfc>
 800b84e:	4544      	cmp	r4, r8
 800b850:	d9c3      	bls.n	800b7da <__hexnan+0x7a>
 800b852:	2300      	movs	r3, #0
 800b854:	f844 3c04 	str.w	r3, [r4, #-4]
 800b858:	2501      	movs	r5, #1
 800b85a:	3c04      	subs	r4, #4
 800b85c:	6822      	ldr	r2, [r4, #0]
 800b85e:	f000 000f 	and.w	r0, r0, #15
 800b862:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b866:	6022      	str	r2, [r4, #0]
 800b868:	e7b7      	b.n	800b7da <__hexnan+0x7a>
 800b86a:	2508      	movs	r5, #8
 800b86c:	e7b5      	b.n	800b7da <__hexnan+0x7a>
 800b86e:	9b01      	ldr	r3, [sp, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d0df      	beq.n	800b834 <__hexnan+0xd4>
 800b874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b878:	f1c3 0320 	rsb	r3, r3, #32
 800b87c:	fa22 f303 	lsr.w	r3, r2, r3
 800b880:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b884:	401a      	ands	r2, r3
 800b886:	f846 2c04 	str.w	r2, [r6, #-4]
 800b88a:	e7d3      	b.n	800b834 <__hexnan+0xd4>
 800b88c:	3f04      	subs	r7, #4
 800b88e:	e7d1      	b.n	800b834 <__hexnan+0xd4>
 800b890:	2004      	movs	r0, #4
 800b892:	b007      	add	sp, #28
 800b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b898 <_localeconv_r>:
 800b898:	4800      	ldr	r0, [pc, #0]	; (800b89c <_localeconv_r+0x4>)
 800b89a:	4770      	bx	lr
 800b89c:	20000168 	.word	0x20000168

0800b8a0 <__ascii_mbtowc>:
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	b901      	cbnz	r1, 800b8a6 <__ascii_mbtowc+0x6>
 800b8a4:	a901      	add	r1, sp, #4
 800b8a6:	b142      	cbz	r2, 800b8ba <__ascii_mbtowc+0x1a>
 800b8a8:	b14b      	cbz	r3, 800b8be <__ascii_mbtowc+0x1e>
 800b8aa:	7813      	ldrb	r3, [r2, #0]
 800b8ac:	600b      	str	r3, [r1, #0]
 800b8ae:	7812      	ldrb	r2, [r2, #0]
 800b8b0:	1e10      	subs	r0, r2, #0
 800b8b2:	bf18      	it	ne
 800b8b4:	2001      	movne	r0, #1
 800b8b6:	b002      	add	sp, #8
 800b8b8:	4770      	bx	lr
 800b8ba:	4610      	mov	r0, r2
 800b8bc:	e7fb      	b.n	800b8b6 <__ascii_mbtowc+0x16>
 800b8be:	f06f 0001 	mvn.w	r0, #1
 800b8c2:	e7f8      	b.n	800b8b6 <__ascii_mbtowc+0x16>

0800b8c4 <__malloc_lock>:
 800b8c4:	4801      	ldr	r0, [pc, #4]	; (800b8cc <__malloc_lock+0x8>)
 800b8c6:	f001 ba41 	b.w	800cd4c <__retarget_lock_acquire_recursive>
 800b8ca:	bf00      	nop
 800b8cc:	20004d1c 	.word	0x20004d1c

0800b8d0 <__malloc_unlock>:
 800b8d0:	4801      	ldr	r0, [pc, #4]	; (800b8d8 <__malloc_unlock+0x8>)
 800b8d2:	f001 ba3c 	b.w	800cd4e <__retarget_lock_release_recursive>
 800b8d6:	bf00      	nop
 800b8d8:	20004d1c 	.word	0x20004d1c

0800b8dc <_Balloc>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	460d      	mov	r5, r1
 800b8e4:	b976      	cbnz	r6, 800b904 <_Balloc+0x28>
 800b8e6:	2010      	movs	r0, #16
 800b8e8:	f7fc fef2 	bl	80086d0 <malloc>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	6260      	str	r0, [r4, #36]	; 0x24
 800b8f0:	b920      	cbnz	r0, 800b8fc <_Balloc+0x20>
 800b8f2:	4b18      	ldr	r3, [pc, #96]	; (800b954 <_Balloc+0x78>)
 800b8f4:	4818      	ldr	r0, [pc, #96]	; (800b958 <_Balloc+0x7c>)
 800b8f6:	2166      	movs	r1, #102	; 0x66
 800b8f8:	f7fe fdb2 	bl	800a460 <__assert_func>
 800b8fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b900:	6006      	str	r6, [r0, #0]
 800b902:	60c6      	str	r6, [r0, #12]
 800b904:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b906:	68f3      	ldr	r3, [r6, #12]
 800b908:	b183      	cbz	r3, 800b92c <_Balloc+0x50>
 800b90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b912:	b9b8      	cbnz	r0, 800b944 <_Balloc+0x68>
 800b914:	2101      	movs	r1, #1
 800b916:	fa01 f605 	lsl.w	r6, r1, r5
 800b91a:	1d72      	adds	r2, r6, #5
 800b91c:	0092      	lsls	r2, r2, #2
 800b91e:	4620      	mov	r0, r4
 800b920:	f000 fc9d 	bl	800c25e <_calloc_r>
 800b924:	b160      	cbz	r0, 800b940 <_Balloc+0x64>
 800b926:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b92a:	e00e      	b.n	800b94a <_Balloc+0x6e>
 800b92c:	2221      	movs	r2, #33	; 0x21
 800b92e:	2104      	movs	r1, #4
 800b930:	4620      	mov	r0, r4
 800b932:	f000 fc94 	bl	800c25e <_calloc_r>
 800b936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b938:	60f0      	str	r0, [r6, #12]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e4      	bne.n	800b90a <_Balloc+0x2e>
 800b940:	2000      	movs	r0, #0
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	6802      	ldr	r2, [r0, #0]
 800b946:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b94a:	2300      	movs	r3, #0
 800b94c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b950:	e7f7      	b.n	800b942 <_Balloc+0x66>
 800b952:	bf00      	nop
 800b954:	0800d35d 	.word	0x0800d35d
 800b958:	0800d650 	.word	0x0800d650

0800b95c <_Bfree>:
 800b95c:	b570      	push	{r4, r5, r6, lr}
 800b95e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b960:	4605      	mov	r5, r0
 800b962:	460c      	mov	r4, r1
 800b964:	b976      	cbnz	r6, 800b984 <_Bfree+0x28>
 800b966:	2010      	movs	r0, #16
 800b968:	f7fc feb2 	bl	80086d0 <malloc>
 800b96c:	4602      	mov	r2, r0
 800b96e:	6268      	str	r0, [r5, #36]	; 0x24
 800b970:	b920      	cbnz	r0, 800b97c <_Bfree+0x20>
 800b972:	4b09      	ldr	r3, [pc, #36]	; (800b998 <_Bfree+0x3c>)
 800b974:	4809      	ldr	r0, [pc, #36]	; (800b99c <_Bfree+0x40>)
 800b976:	218a      	movs	r1, #138	; 0x8a
 800b978:	f7fe fd72 	bl	800a460 <__assert_func>
 800b97c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b980:	6006      	str	r6, [r0, #0]
 800b982:	60c6      	str	r6, [r0, #12]
 800b984:	b13c      	cbz	r4, 800b996 <_Bfree+0x3a>
 800b986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b988:	6862      	ldr	r2, [r4, #4]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b990:	6021      	str	r1, [r4, #0]
 800b992:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b996:	bd70      	pop	{r4, r5, r6, pc}
 800b998:	0800d35d 	.word	0x0800d35d
 800b99c:	0800d650 	.word	0x0800d650

0800b9a0 <__multadd>:
 800b9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a4:	690d      	ldr	r5, [r1, #16]
 800b9a6:	4607      	mov	r7, r0
 800b9a8:	460c      	mov	r4, r1
 800b9aa:	461e      	mov	r6, r3
 800b9ac:	f101 0c14 	add.w	ip, r1, #20
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	f8dc 3000 	ldr.w	r3, [ip]
 800b9b6:	b299      	uxth	r1, r3
 800b9b8:	fb02 6101 	mla	r1, r2, r1, r6
 800b9bc:	0c1e      	lsrs	r6, r3, #16
 800b9be:	0c0b      	lsrs	r3, r1, #16
 800b9c0:	fb02 3306 	mla	r3, r2, r6, r3
 800b9c4:	b289      	uxth	r1, r1
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9cc:	4285      	cmp	r5, r0
 800b9ce:	f84c 1b04 	str.w	r1, [ip], #4
 800b9d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9d6:	dcec      	bgt.n	800b9b2 <__multadd+0x12>
 800b9d8:	b30e      	cbz	r6, 800ba1e <__multadd+0x7e>
 800b9da:	68a3      	ldr	r3, [r4, #8]
 800b9dc:	42ab      	cmp	r3, r5
 800b9de:	dc19      	bgt.n	800ba14 <__multadd+0x74>
 800b9e0:	6861      	ldr	r1, [r4, #4]
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	3101      	adds	r1, #1
 800b9e6:	f7ff ff79 	bl	800b8dc <_Balloc>
 800b9ea:	4680      	mov	r8, r0
 800b9ec:	b928      	cbnz	r0, 800b9fa <__multadd+0x5a>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	4b0c      	ldr	r3, [pc, #48]	; (800ba24 <__multadd+0x84>)
 800b9f2:	480d      	ldr	r0, [pc, #52]	; (800ba28 <__multadd+0x88>)
 800b9f4:	21b5      	movs	r1, #181	; 0xb5
 800b9f6:	f7fe fd33 	bl	800a460 <__assert_func>
 800b9fa:	6922      	ldr	r2, [r4, #16]
 800b9fc:	3202      	adds	r2, #2
 800b9fe:	f104 010c 	add.w	r1, r4, #12
 800ba02:	0092      	lsls	r2, r2, #2
 800ba04:	300c      	adds	r0, #12
 800ba06:	f7fc fe6b 	bl	80086e0 <memcpy>
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f7ff ffa5 	bl	800b95c <_Bfree>
 800ba12:	4644      	mov	r4, r8
 800ba14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba18:	3501      	adds	r5, #1
 800ba1a:	615e      	str	r6, [r3, #20]
 800ba1c:	6125      	str	r5, [r4, #16]
 800ba1e:	4620      	mov	r0, r4
 800ba20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba24:	0800d5c5 	.word	0x0800d5c5
 800ba28:	0800d650 	.word	0x0800d650

0800ba2c <__s2b>:
 800ba2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba30:	460c      	mov	r4, r1
 800ba32:	4615      	mov	r5, r2
 800ba34:	461f      	mov	r7, r3
 800ba36:	2209      	movs	r2, #9
 800ba38:	3308      	adds	r3, #8
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba40:	2100      	movs	r1, #0
 800ba42:	2201      	movs	r2, #1
 800ba44:	429a      	cmp	r2, r3
 800ba46:	db09      	blt.n	800ba5c <__s2b+0x30>
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f7ff ff47 	bl	800b8dc <_Balloc>
 800ba4e:	b940      	cbnz	r0, 800ba62 <__s2b+0x36>
 800ba50:	4602      	mov	r2, r0
 800ba52:	4b19      	ldr	r3, [pc, #100]	; (800bab8 <__s2b+0x8c>)
 800ba54:	4819      	ldr	r0, [pc, #100]	; (800babc <__s2b+0x90>)
 800ba56:	21ce      	movs	r1, #206	; 0xce
 800ba58:	f7fe fd02 	bl	800a460 <__assert_func>
 800ba5c:	0052      	lsls	r2, r2, #1
 800ba5e:	3101      	adds	r1, #1
 800ba60:	e7f0      	b.n	800ba44 <__s2b+0x18>
 800ba62:	9b08      	ldr	r3, [sp, #32]
 800ba64:	6143      	str	r3, [r0, #20]
 800ba66:	2d09      	cmp	r5, #9
 800ba68:	f04f 0301 	mov.w	r3, #1
 800ba6c:	6103      	str	r3, [r0, #16]
 800ba6e:	dd16      	ble.n	800ba9e <__s2b+0x72>
 800ba70:	f104 0909 	add.w	r9, r4, #9
 800ba74:	46c8      	mov	r8, r9
 800ba76:	442c      	add	r4, r5
 800ba78:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba7c:	4601      	mov	r1, r0
 800ba7e:	3b30      	subs	r3, #48	; 0x30
 800ba80:	220a      	movs	r2, #10
 800ba82:	4630      	mov	r0, r6
 800ba84:	f7ff ff8c 	bl	800b9a0 <__multadd>
 800ba88:	45a0      	cmp	r8, r4
 800ba8a:	d1f5      	bne.n	800ba78 <__s2b+0x4c>
 800ba8c:	f1a5 0408 	sub.w	r4, r5, #8
 800ba90:	444c      	add	r4, r9
 800ba92:	1b2d      	subs	r5, r5, r4
 800ba94:	1963      	adds	r3, r4, r5
 800ba96:	42bb      	cmp	r3, r7
 800ba98:	db04      	blt.n	800baa4 <__s2b+0x78>
 800ba9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba9e:	340a      	adds	r4, #10
 800baa0:	2509      	movs	r5, #9
 800baa2:	e7f6      	b.n	800ba92 <__s2b+0x66>
 800baa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800baa8:	4601      	mov	r1, r0
 800baaa:	3b30      	subs	r3, #48	; 0x30
 800baac:	220a      	movs	r2, #10
 800baae:	4630      	mov	r0, r6
 800bab0:	f7ff ff76 	bl	800b9a0 <__multadd>
 800bab4:	e7ee      	b.n	800ba94 <__s2b+0x68>
 800bab6:	bf00      	nop
 800bab8:	0800d5c5 	.word	0x0800d5c5
 800babc:	0800d650 	.word	0x0800d650

0800bac0 <__hi0bits>:
 800bac0:	0c03      	lsrs	r3, r0, #16
 800bac2:	041b      	lsls	r3, r3, #16
 800bac4:	b9d3      	cbnz	r3, 800bafc <__hi0bits+0x3c>
 800bac6:	0400      	lsls	r0, r0, #16
 800bac8:	2310      	movs	r3, #16
 800baca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bace:	bf04      	itt	eq
 800bad0:	0200      	lsleq	r0, r0, #8
 800bad2:	3308      	addeq	r3, #8
 800bad4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bad8:	bf04      	itt	eq
 800bada:	0100      	lsleq	r0, r0, #4
 800badc:	3304      	addeq	r3, #4
 800bade:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bae2:	bf04      	itt	eq
 800bae4:	0080      	lsleq	r0, r0, #2
 800bae6:	3302      	addeq	r3, #2
 800bae8:	2800      	cmp	r0, #0
 800baea:	db05      	blt.n	800baf8 <__hi0bits+0x38>
 800baec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800baf0:	f103 0301 	add.w	r3, r3, #1
 800baf4:	bf08      	it	eq
 800baf6:	2320      	moveq	r3, #32
 800baf8:	4618      	mov	r0, r3
 800bafa:	4770      	bx	lr
 800bafc:	2300      	movs	r3, #0
 800bafe:	e7e4      	b.n	800baca <__hi0bits+0xa>

0800bb00 <__lo0bits>:
 800bb00:	6803      	ldr	r3, [r0, #0]
 800bb02:	f013 0207 	ands.w	r2, r3, #7
 800bb06:	4601      	mov	r1, r0
 800bb08:	d00b      	beq.n	800bb22 <__lo0bits+0x22>
 800bb0a:	07da      	lsls	r2, r3, #31
 800bb0c:	d423      	bmi.n	800bb56 <__lo0bits+0x56>
 800bb0e:	0798      	lsls	r0, r3, #30
 800bb10:	bf49      	itett	mi
 800bb12:	085b      	lsrmi	r3, r3, #1
 800bb14:	089b      	lsrpl	r3, r3, #2
 800bb16:	2001      	movmi	r0, #1
 800bb18:	600b      	strmi	r3, [r1, #0]
 800bb1a:	bf5c      	itt	pl
 800bb1c:	600b      	strpl	r3, [r1, #0]
 800bb1e:	2002      	movpl	r0, #2
 800bb20:	4770      	bx	lr
 800bb22:	b298      	uxth	r0, r3
 800bb24:	b9a8      	cbnz	r0, 800bb52 <__lo0bits+0x52>
 800bb26:	0c1b      	lsrs	r3, r3, #16
 800bb28:	2010      	movs	r0, #16
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	b90a      	cbnz	r2, 800bb32 <__lo0bits+0x32>
 800bb2e:	3008      	adds	r0, #8
 800bb30:	0a1b      	lsrs	r3, r3, #8
 800bb32:	071a      	lsls	r2, r3, #28
 800bb34:	bf04      	itt	eq
 800bb36:	091b      	lsreq	r3, r3, #4
 800bb38:	3004      	addeq	r0, #4
 800bb3a:	079a      	lsls	r2, r3, #30
 800bb3c:	bf04      	itt	eq
 800bb3e:	089b      	lsreq	r3, r3, #2
 800bb40:	3002      	addeq	r0, #2
 800bb42:	07da      	lsls	r2, r3, #31
 800bb44:	d403      	bmi.n	800bb4e <__lo0bits+0x4e>
 800bb46:	085b      	lsrs	r3, r3, #1
 800bb48:	f100 0001 	add.w	r0, r0, #1
 800bb4c:	d005      	beq.n	800bb5a <__lo0bits+0x5a>
 800bb4e:	600b      	str	r3, [r1, #0]
 800bb50:	4770      	bx	lr
 800bb52:	4610      	mov	r0, r2
 800bb54:	e7e9      	b.n	800bb2a <__lo0bits+0x2a>
 800bb56:	2000      	movs	r0, #0
 800bb58:	4770      	bx	lr
 800bb5a:	2020      	movs	r0, #32
 800bb5c:	4770      	bx	lr
	...

0800bb60 <__i2b>:
 800bb60:	b510      	push	{r4, lr}
 800bb62:	460c      	mov	r4, r1
 800bb64:	2101      	movs	r1, #1
 800bb66:	f7ff feb9 	bl	800b8dc <_Balloc>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	b928      	cbnz	r0, 800bb7a <__i2b+0x1a>
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <__i2b+0x24>)
 800bb70:	4805      	ldr	r0, [pc, #20]	; (800bb88 <__i2b+0x28>)
 800bb72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb76:	f7fe fc73 	bl	800a460 <__assert_func>
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	6144      	str	r4, [r0, #20]
 800bb7e:	6103      	str	r3, [r0, #16]
 800bb80:	bd10      	pop	{r4, pc}
 800bb82:	bf00      	nop
 800bb84:	0800d5c5 	.word	0x0800d5c5
 800bb88:	0800d650 	.word	0x0800d650

0800bb8c <__multiply>:
 800bb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb90:	4691      	mov	r9, r2
 800bb92:	690a      	ldr	r2, [r1, #16]
 800bb94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	bfb8      	it	lt
 800bb9c:	460b      	movlt	r3, r1
 800bb9e:	460c      	mov	r4, r1
 800bba0:	bfbc      	itt	lt
 800bba2:	464c      	movlt	r4, r9
 800bba4:	4699      	movlt	r9, r3
 800bba6:	6927      	ldr	r7, [r4, #16]
 800bba8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbac:	68a3      	ldr	r3, [r4, #8]
 800bbae:	6861      	ldr	r1, [r4, #4]
 800bbb0:	eb07 060a 	add.w	r6, r7, sl
 800bbb4:	42b3      	cmp	r3, r6
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	bfb8      	it	lt
 800bbba:	3101      	addlt	r1, #1
 800bbbc:	f7ff fe8e 	bl	800b8dc <_Balloc>
 800bbc0:	b930      	cbnz	r0, 800bbd0 <__multiply+0x44>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	4b44      	ldr	r3, [pc, #272]	; (800bcd8 <__multiply+0x14c>)
 800bbc6:	4845      	ldr	r0, [pc, #276]	; (800bcdc <__multiply+0x150>)
 800bbc8:	f240 115d 	movw	r1, #349	; 0x15d
 800bbcc:	f7fe fc48 	bl	800a460 <__assert_func>
 800bbd0:	f100 0514 	add.w	r5, r0, #20
 800bbd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bbd8:	462b      	mov	r3, r5
 800bbda:	2200      	movs	r2, #0
 800bbdc:	4543      	cmp	r3, r8
 800bbde:	d321      	bcc.n	800bc24 <__multiply+0x98>
 800bbe0:	f104 0314 	add.w	r3, r4, #20
 800bbe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bbe8:	f109 0314 	add.w	r3, r9, #20
 800bbec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bbf0:	9202      	str	r2, [sp, #8]
 800bbf2:	1b3a      	subs	r2, r7, r4
 800bbf4:	3a15      	subs	r2, #21
 800bbf6:	f022 0203 	bic.w	r2, r2, #3
 800bbfa:	3204      	adds	r2, #4
 800bbfc:	f104 0115 	add.w	r1, r4, #21
 800bc00:	428f      	cmp	r7, r1
 800bc02:	bf38      	it	cc
 800bc04:	2204      	movcc	r2, #4
 800bc06:	9201      	str	r2, [sp, #4]
 800bc08:	9a02      	ldr	r2, [sp, #8]
 800bc0a:	9303      	str	r3, [sp, #12]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d80c      	bhi.n	800bc2a <__multiply+0x9e>
 800bc10:	2e00      	cmp	r6, #0
 800bc12:	dd03      	ble.n	800bc1c <__multiply+0x90>
 800bc14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d05a      	beq.n	800bcd2 <__multiply+0x146>
 800bc1c:	6106      	str	r6, [r0, #16]
 800bc1e:	b005      	add	sp, #20
 800bc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc24:	f843 2b04 	str.w	r2, [r3], #4
 800bc28:	e7d8      	b.n	800bbdc <__multiply+0x50>
 800bc2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc2e:	f1ba 0f00 	cmp.w	sl, #0
 800bc32:	d024      	beq.n	800bc7e <__multiply+0xf2>
 800bc34:	f104 0e14 	add.w	lr, r4, #20
 800bc38:	46a9      	mov	r9, r5
 800bc3a:	f04f 0c00 	mov.w	ip, #0
 800bc3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc42:	f8d9 1000 	ldr.w	r1, [r9]
 800bc46:	fa1f fb82 	uxth.w	fp, r2
 800bc4a:	b289      	uxth	r1, r1
 800bc4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc54:	f8d9 2000 	ldr.w	r2, [r9]
 800bc58:	4461      	add	r1, ip
 800bc5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc66:	b289      	uxth	r1, r1
 800bc68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc6c:	4577      	cmp	r7, lr
 800bc6e:	f849 1b04 	str.w	r1, [r9], #4
 800bc72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc76:	d8e2      	bhi.n	800bc3e <__multiply+0xb2>
 800bc78:	9a01      	ldr	r2, [sp, #4]
 800bc7a:	f845 c002 	str.w	ip, [r5, r2]
 800bc7e:	9a03      	ldr	r2, [sp, #12]
 800bc80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc84:	3304      	adds	r3, #4
 800bc86:	f1b9 0f00 	cmp.w	r9, #0
 800bc8a:	d020      	beq.n	800bcce <__multiply+0x142>
 800bc8c:	6829      	ldr	r1, [r5, #0]
 800bc8e:	f104 0c14 	add.w	ip, r4, #20
 800bc92:	46ae      	mov	lr, r5
 800bc94:	f04f 0a00 	mov.w	sl, #0
 800bc98:	f8bc b000 	ldrh.w	fp, [ip]
 800bc9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bca0:	fb09 220b 	mla	r2, r9, fp, r2
 800bca4:	4492      	add	sl, r2
 800bca6:	b289      	uxth	r1, r1
 800bca8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bcac:	f84e 1b04 	str.w	r1, [lr], #4
 800bcb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bcb4:	f8be 1000 	ldrh.w	r1, [lr]
 800bcb8:	0c12      	lsrs	r2, r2, #16
 800bcba:	fb09 1102 	mla	r1, r9, r2, r1
 800bcbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bcc2:	4567      	cmp	r7, ip
 800bcc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bcc8:	d8e6      	bhi.n	800bc98 <__multiply+0x10c>
 800bcca:	9a01      	ldr	r2, [sp, #4]
 800bccc:	50a9      	str	r1, [r5, r2]
 800bcce:	3504      	adds	r5, #4
 800bcd0:	e79a      	b.n	800bc08 <__multiply+0x7c>
 800bcd2:	3e01      	subs	r6, #1
 800bcd4:	e79c      	b.n	800bc10 <__multiply+0x84>
 800bcd6:	bf00      	nop
 800bcd8:	0800d5c5 	.word	0x0800d5c5
 800bcdc:	0800d650 	.word	0x0800d650

0800bce0 <__pow5mult>:
 800bce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce4:	4615      	mov	r5, r2
 800bce6:	f012 0203 	ands.w	r2, r2, #3
 800bcea:	4606      	mov	r6, r0
 800bcec:	460f      	mov	r7, r1
 800bcee:	d007      	beq.n	800bd00 <__pow5mult+0x20>
 800bcf0:	4c25      	ldr	r4, [pc, #148]	; (800bd88 <__pow5mult+0xa8>)
 800bcf2:	3a01      	subs	r2, #1
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcfa:	f7ff fe51 	bl	800b9a0 <__multadd>
 800bcfe:	4607      	mov	r7, r0
 800bd00:	10ad      	asrs	r5, r5, #2
 800bd02:	d03d      	beq.n	800bd80 <__pow5mult+0xa0>
 800bd04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd06:	b97c      	cbnz	r4, 800bd28 <__pow5mult+0x48>
 800bd08:	2010      	movs	r0, #16
 800bd0a:	f7fc fce1 	bl	80086d0 <malloc>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	6270      	str	r0, [r6, #36]	; 0x24
 800bd12:	b928      	cbnz	r0, 800bd20 <__pow5mult+0x40>
 800bd14:	4b1d      	ldr	r3, [pc, #116]	; (800bd8c <__pow5mult+0xac>)
 800bd16:	481e      	ldr	r0, [pc, #120]	; (800bd90 <__pow5mult+0xb0>)
 800bd18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd1c:	f7fe fba0 	bl	800a460 <__assert_func>
 800bd20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd24:	6004      	str	r4, [r0, #0]
 800bd26:	60c4      	str	r4, [r0, #12]
 800bd28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd30:	b94c      	cbnz	r4, 800bd46 <__pow5mult+0x66>
 800bd32:	f240 2171 	movw	r1, #625	; 0x271
 800bd36:	4630      	mov	r0, r6
 800bd38:	f7ff ff12 	bl	800bb60 <__i2b>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd42:	4604      	mov	r4, r0
 800bd44:	6003      	str	r3, [r0, #0]
 800bd46:	f04f 0900 	mov.w	r9, #0
 800bd4a:	07eb      	lsls	r3, r5, #31
 800bd4c:	d50a      	bpl.n	800bd64 <__pow5mult+0x84>
 800bd4e:	4639      	mov	r1, r7
 800bd50:	4622      	mov	r2, r4
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7ff ff1a 	bl	800bb8c <__multiply>
 800bd58:	4639      	mov	r1, r7
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f7ff fdfd 	bl	800b95c <_Bfree>
 800bd62:	4647      	mov	r7, r8
 800bd64:	106d      	asrs	r5, r5, #1
 800bd66:	d00b      	beq.n	800bd80 <__pow5mult+0xa0>
 800bd68:	6820      	ldr	r0, [r4, #0]
 800bd6a:	b938      	cbnz	r0, 800bd7c <__pow5mult+0x9c>
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7ff ff0b 	bl	800bb8c <__multiply>
 800bd76:	6020      	str	r0, [r4, #0]
 800bd78:	f8c0 9000 	str.w	r9, [r0]
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	e7e4      	b.n	800bd4a <__pow5mult+0x6a>
 800bd80:	4638      	mov	r0, r7
 800bd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd86:	bf00      	nop
 800bd88:	0800d7a0 	.word	0x0800d7a0
 800bd8c:	0800d35d 	.word	0x0800d35d
 800bd90:	0800d650 	.word	0x0800d650

0800bd94 <__lshift>:
 800bd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd98:	460c      	mov	r4, r1
 800bd9a:	6849      	ldr	r1, [r1, #4]
 800bd9c:	6923      	ldr	r3, [r4, #16]
 800bd9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bda2:	68a3      	ldr	r3, [r4, #8]
 800bda4:	4607      	mov	r7, r0
 800bda6:	4691      	mov	r9, r2
 800bda8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdac:	f108 0601 	add.w	r6, r8, #1
 800bdb0:	42b3      	cmp	r3, r6
 800bdb2:	db0b      	blt.n	800bdcc <__lshift+0x38>
 800bdb4:	4638      	mov	r0, r7
 800bdb6:	f7ff fd91 	bl	800b8dc <_Balloc>
 800bdba:	4605      	mov	r5, r0
 800bdbc:	b948      	cbnz	r0, 800bdd2 <__lshift+0x3e>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	4b2a      	ldr	r3, [pc, #168]	; (800be6c <__lshift+0xd8>)
 800bdc2:	482b      	ldr	r0, [pc, #172]	; (800be70 <__lshift+0xdc>)
 800bdc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bdc8:	f7fe fb4a 	bl	800a460 <__assert_func>
 800bdcc:	3101      	adds	r1, #1
 800bdce:	005b      	lsls	r3, r3, #1
 800bdd0:	e7ee      	b.n	800bdb0 <__lshift+0x1c>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f100 0114 	add.w	r1, r0, #20
 800bdd8:	f100 0210 	add.w	r2, r0, #16
 800bddc:	4618      	mov	r0, r3
 800bdde:	4553      	cmp	r3, sl
 800bde0:	db37      	blt.n	800be52 <__lshift+0xbe>
 800bde2:	6920      	ldr	r0, [r4, #16]
 800bde4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bde8:	f104 0314 	add.w	r3, r4, #20
 800bdec:	f019 091f 	ands.w	r9, r9, #31
 800bdf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bdf8:	d02f      	beq.n	800be5a <__lshift+0xc6>
 800bdfa:	f1c9 0e20 	rsb	lr, r9, #32
 800bdfe:	468a      	mov	sl, r1
 800be00:	f04f 0c00 	mov.w	ip, #0
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	fa02 f209 	lsl.w	r2, r2, r9
 800be0a:	ea42 020c 	orr.w	r2, r2, ip
 800be0e:	f84a 2b04 	str.w	r2, [sl], #4
 800be12:	f853 2b04 	ldr.w	r2, [r3], #4
 800be16:	4298      	cmp	r0, r3
 800be18:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be1c:	d8f2      	bhi.n	800be04 <__lshift+0x70>
 800be1e:	1b03      	subs	r3, r0, r4
 800be20:	3b15      	subs	r3, #21
 800be22:	f023 0303 	bic.w	r3, r3, #3
 800be26:	3304      	adds	r3, #4
 800be28:	f104 0215 	add.w	r2, r4, #21
 800be2c:	4290      	cmp	r0, r2
 800be2e:	bf38      	it	cc
 800be30:	2304      	movcc	r3, #4
 800be32:	f841 c003 	str.w	ip, [r1, r3]
 800be36:	f1bc 0f00 	cmp.w	ip, #0
 800be3a:	d001      	beq.n	800be40 <__lshift+0xac>
 800be3c:	f108 0602 	add.w	r6, r8, #2
 800be40:	3e01      	subs	r6, #1
 800be42:	4638      	mov	r0, r7
 800be44:	612e      	str	r6, [r5, #16]
 800be46:	4621      	mov	r1, r4
 800be48:	f7ff fd88 	bl	800b95c <_Bfree>
 800be4c:	4628      	mov	r0, r5
 800be4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be52:	f842 0f04 	str.w	r0, [r2, #4]!
 800be56:	3301      	adds	r3, #1
 800be58:	e7c1      	b.n	800bdde <__lshift+0x4a>
 800be5a:	3904      	subs	r1, #4
 800be5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be60:	f841 2f04 	str.w	r2, [r1, #4]!
 800be64:	4298      	cmp	r0, r3
 800be66:	d8f9      	bhi.n	800be5c <__lshift+0xc8>
 800be68:	e7ea      	b.n	800be40 <__lshift+0xac>
 800be6a:	bf00      	nop
 800be6c:	0800d5c5 	.word	0x0800d5c5
 800be70:	0800d650 	.word	0x0800d650

0800be74 <__mcmp>:
 800be74:	b530      	push	{r4, r5, lr}
 800be76:	6902      	ldr	r2, [r0, #16]
 800be78:	690c      	ldr	r4, [r1, #16]
 800be7a:	1b12      	subs	r2, r2, r4
 800be7c:	d10e      	bne.n	800be9c <__mcmp+0x28>
 800be7e:	f100 0314 	add.w	r3, r0, #20
 800be82:	3114      	adds	r1, #20
 800be84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be94:	42a5      	cmp	r5, r4
 800be96:	d003      	beq.n	800bea0 <__mcmp+0x2c>
 800be98:	d305      	bcc.n	800bea6 <__mcmp+0x32>
 800be9a:	2201      	movs	r2, #1
 800be9c:	4610      	mov	r0, r2
 800be9e:	bd30      	pop	{r4, r5, pc}
 800bea0:	4283      	cmp	r3, r0
 800bea2:	d3f3      	bcc.n	800be8c <__mcmp+0x18>
 800bea4:	e7fa      	b.n	800be9c <__mcmp+0x28>
 800bea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800beaa:	e7f7      	b.n	800be9c <__mcmp+0x28>

0800beac <__mdiff>:
 800beac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	460c      	mov	r4, r1
 800beb2:	4606      	mov	r6, r0
 800beb4:	4611      	mov	r1, r2
 800beb6:	4620      	mov	r0, r4
 800beb8:	4690      	mov	r8, r2
 800beba:	f7ff ffdb 	bl	800be74 <__mcmp>
 800bebe:	1e05      	subs	r5, r0, #0
 800bec0:	d110      	bne.n	800bee4 <__mdiff+0x38>
 800bec2:	4629      	mov	r1, r5
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7ff fd09 	bl	800b8dc <_Balloc>
 800beca:	b930      	cbnz	r0, 800beda <__mdiff+0x2e>
 800becc:	4b3a      	ldr	r3, [pc, #232]	; (800bfb8 <__mdiff+0x10c>)
 800bece:	4602      	mov	r2, r0
 800bed0:	f240 2132 	movw	r1, #562	; 0x232
 800bed4:	4839      	ldr	r0, [pc, #228]	; (800bfbc <__mdiff+0x110>)
 800bed6:	f7fe fac3 	bl	800a460 <__assert_func>
 800beda:	2301      	movs	r3, #1
 800bedc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee4:	bfa4      	itt	ge
 800bee6:	4643      	movge	r3, r8
 800bee8:	46a0      	movge	r8, r4
 800beea:	4630      	mov	r0, r6
 800beec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bef0:	bfa6      	itte	ge
 800bef2:	461c      	movge	r4, r3
 800bef4:	2500      	movge	r5, #0
 800bef6:	2501      	movlt	r5, #1
 800bef8:	f7ff fcf0 	bl	800b8dc <_Balloc>
 800befc:	b920      	cbnz	r0, 800bf08 <__mdiff+0x5c>
 800befe:	4b2e      	ldr	r3, [pc, #184]	; (800bfb8 <__mdiff+0x10c>)
 800bf00:	4602      	mov	r2, r0
 800bf02:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf06:	e7e5      	b.n	800bed4 <__mdiff+0x28>
 800bf08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf0c:	6926      	ldr	r6, [r4, #16]
 800bf0e:	60c5      	str	r5, [r0, #12]
 800bf10:	f104 0914 	add.w	r9, r4, #20
 800bf14:	f108 0514 	add.w	r5, r8, #20
 800bf18:	f100 0e14 	add.w	lr, r0, #20
 800bf1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf24:	f108 0210 	add.w	r2, r8, #16
 800bf28:	46f2      	mov	sl, lr
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf34:	fa1f f883 	uxth.w	r8, r3
 800bf38:	fa11 f18b 	uxtah	r1, r1, fp
 800bf3c:	0c1b      	lsrs	r3, r3, #16
 800bf3e:	eba1 0808 	sub.w	r8, r1, r8
 800bf42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf4a:	fa1f f888 	uxth.w	r8, r8
 800bf4e:	1419      	asrs	r1, r3, #16
 800bf50:	454e      	cmp	r6, r9
 800bf52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf56:	f84a 3b04 	str.w	r3, [sl], #4
 800bf5a:	d8e7      	bhi.n	800bf2c <__mdiff+0x80>
 800bf5c:	1b33      	subs	r3, r6, r4
 800bf5e:	3b15      	subs	r3, #21
 800bf60:	f023 0303 	bic.w	r3, r3, #3
 800bf64:	3304      	adds	r3, #4
 800bf66:	3415      	adds	r4, #21
 800bf68:	42a6      	cmp	r6, r4
 800bf6a:	bf38      	it	cc
 800bf6c:	2304      	movcc	r3, #4
 800bf6e:	441d      	add	r5, r3
 800bf70:	4473      	add	r3, lr
 800bf72:	469e      	mov	lr, r3
 800bf74:	462e      	mov	r6, r5
 800bf76:	4566      	cmp	r6, ip
 800bf78:	d30e      	bcc.n	800bf98 <__mdiff+0xec>
 800bf7a:	f10c 0203 	add.w	r2, ip, #3
 800bf7e:	1b52      	subs	r2, r2, r5
 800bf80:	f022 0203 	bic.w	r2, r2, #3
 800bf84:	3d03      	subs	r5, #3
 800bf86:	45ac      	cmp	ip, r5
 800bf88:	bf38      	it	cc
 800bf8a:	2200      	movcc	r2, #0
 800bf8c:	441a      	add	r2, r3
 800bf8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf92:	b17b      	cbz	r3, 800bfb4 <__mdiff+0x108>
 800bf94:	6107      	str	r7, [r0, #16]
 800bf96:	e7a3      	b.n	800bee0 <__mdiff+0x34>
 800bf98:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf9c:	fa11 f288 	uxtah	r2, r1, r8
 800bfa0:	1414      	asrs	r4, r2, #16
 800bfa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bfa6:	b292      	uxth	r2, r2
 800bfa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bfac:	f84e 2b04 	str.w	r2, [lr], #4
 800bfb0:	1421      	asrs	r1, r4, #16
 800bfb2:	e7e0      	b.n	800bf76 <__mdiff+0xca>
 800bfb4:	3f01      	subs	r7, #1
 800bfb6:	e7ea      	b.n	800bf8e <__mdiff+0xe2>
 800bfb8:	0800d5c5 	.word	0x0800d5c5
 800bfbc:	0800d650 	.word	0x0800d650

0800bfc0 <__ulp>:
 800bfc0:	b082      	sub	sp, #8
 800bfc2:	ed8d 0b00 	vstr	d0, [sp]
 800bfc6:	9b01      	ldr	r3, [sp, #4]
 800bfc8:	4912      	ldr	r1, [pc, #72]	; (800c014 <__ulp+0x54>)
 800bfca:	4019      	ands	r1, r3
 800bfcc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bfd0:	2900      	cmp	r1, #0
 800bfd2:	dd05      	ble.n	800bfe0 <__ulp+0x20>
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	ec43 2b10 	vmov	d0, r2, r3
 800bfdc:	b002      	add	sp, #8
 800bfde:	4770      	bx	lr
 800bfe0:	4249      	negs	r1, r1
 800bfe2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bfe6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bfea:	f04f 0200 	mov.w	r2, #0
 800bfee:	f04f 0300 	mov.w	r3, #0
 800bff2:	da04      	bge.n	800bffe <__ulp+0x3e>
 800bff4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bff8:	fa41 f300 	asr.w	r3, r1, r0
 800bffc:	e7ec      	b.n	800bfd8 <__ulp+0x18>
 800bffe:	f1a0 0114 	sub.w	r1, r0, #20
 800c002:	291e      	cmp	r1, #30
 800c004:	bfda      	itte	le
 800c006:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c00a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c00e:	2101      	movgt	r1, #1
 800c010:	460a      	mov	r2, r1
 800c012:	e7e1      	b.n	800bfd8 <__ulp+0x18>
 800c014:	7ff00000 	.word	0x7ff00000

0800c018 <__b2d>:
 800c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01a:	6905      	ldr	r5, [r0, #16]
 800c01c:	f100 0714 	add.w	r7, r0, #20
 800c020:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c024:	1f2e      	subs	r6, r5, #4
 800c026:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c02a:	4620      	mov	r0, r4
 800c02c:	f7ff fd48 	bl	800bac0 <__hi0bits>
 800c030:	f1c0 0320 	rsb	r3, r0, #32
 800c034:	280a      	cmp	r0, #10
 800c036:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c0b4 <__b2d+0x9c>
 800c03a:	600b      	str	r3, [r1, #0]
 800c03c:	dc14      	bgt.n	800c068 <__b2d+0x50>
 800c03e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c042:	fa24 f10e 	lsr.w	r1, r4, lr
 800c046:	42b7      	cmp	r7, r6
 800c048:	ea41 030c 	orr.w	r3, r1, ip
 800c04c:	bf34      	ite	cc
 800c04e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c052:	2100      	movcs	r1, #0
 800c054:	3015      	adds	r0, #21
 800c056:	fa04 f000 	lsl.w	r0, r4, r0
 800c05a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c05e:	ea40 0201 	orr.w	r2, r0, r1
 800c062:	ec43 2b10 	vmov	d0, r2, r3
 800c066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c068:	42b7      	cmp	r7, r6
 800c06a:	bf3a      	itte	cc
 800c06c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c070:	f1a5 0608 	subcc.w	r6, r5, #8
 800c074:	2100      	movcs	r1, #0
 800c076:	380b      	subs	r0, #11
 800c078:	d017      	beq.n	800c0aa <__b2d+0x92>
 800c07a:	f1c0 0c20 	rsb	ip, r0, #32
 800c07e:	fa04 f500 	lsl.w	r5, r4, r0
 800c082:	42be      	cmp	r6, r7
 800c084:	fa21 f40c 	lsr.w	r4, r1, ip
 800c088:	ea45 0504 	orr.w	r5, r5, r4
 800c08c:	bf8c      	ite	hi
 800c08e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c092:	2400      	movls	r4, #0
 800c094:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c098:	fa01 f000 	lsl.w	r0, r1, r0
 800c09c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c0a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0a4:	ea40 0204 	orr.w	r2, r0, r4
 800c0a8:	e7db      	b.n	800c062 <__b2d+0x4a>
 800c0aa:	ea44 030c 	orr.w	r3, r4, ip
 800c0ae:	460a      	mov	r2, r1
 800c0b0:	e7d7      	b.n	800c062 <__b2d+0x4a>
 800c0b2:	bf00      	nop
 800c0b4:	3ff00000 	.word	0x3ff00000

0800c0b8 <__d2b>:
 800c0b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0bc:	4689      	mov	r9, r1
 800c0be:	2101      	movs	r1, #1
 800c0c0:	ec57 6b10 	vmov	r6, r7, d0
 800c0c4:	4690      	mov	r8, r2
 800c0c6:	f7ff fc09 	bl	800b8dc <_Balloc>
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	b930      	cbnz	r0, 800c0dc <__d2b+0x24>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	4b25      	ldr	r3, [pc, #148]	; (800c168 <__d2b+0xb0>)
 800c0d2:	4826      	ldr	r0, [pc, #152]	; (800c16c <__d2b+0xb4>)
 800c0d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c0d8:	f7fe f9c2 	bl	800a460 <__assert_func>
 800c0dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0e4:	bb35      	cbnz	r5, 800c134 <__d2b+0x7c>
 800c0e6:	2e00      	cmp	r6, #0
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	d028      	beq.n	800c13e <__d2b+0x86>
 800c0ec:	4668      	mov	r0, sp
 800c0ee:	9600      	str	r6, [sp, #0]
 800c0f0:	f7ff fd06 	bl	800bb00 <__lo0bits>
 800c0f4:	9900      	ldr	r1, [sp, #0]
 800c0f6:	b300      	cbz	r0, 800c13a <__d2b+0x82>
 800c0f8:	9a01      	ldr	r2, [sp, #4]
 800c0fa:	f1c0 0320 	rsb	r3, r0, #32
 800c0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c102:	430b      	orrs	r3, r1
 800c104:	40c2      	lsrs	r2, r0
 800c106:	6163      	str	r3, [r4, #20]
 800c108:	9201      	str	r2, [sp, #4]
 800c10a:	9b01      	ldr	r3, [sp, #4]
 800c10c:	61a3      	str	r3, [r4, #24]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	bf14      	ite	ne
 800c112:	2202      	movne	r2, #2
 800c114:	2201      	moveq	r2, #1
 800c116:	6122      	str	r2, [r4, #16]
 800c118:	b1d5      	cbz	r5, 800c150 <__d2b+0x98>
 800c11a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c11e:	4405      	add	r5, r0
 800c120:	f8c9 5000 	str.w	r5, [r9]
 800c124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c128:	f8c8 0000 	str.w	r0, [r8]
 800c12c:	4620      	mov	r0, r4
 800c12e:	b003      	add	sp, #12
 800c130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c138:	e7d5      	b.n	800c0e6 <__d2b+0x2e>
 800c13a:	6161      	str	r1, [r4, #20]
 800c13c:	e7e5      	b.n	800c10a <__d2b+0x52>
 800c13e:	a801      	add	r0, sp, #4
 800c140:	f7ff fcde 	bl	800bb00 <__lo0bits>
 800c144:	9b01      	ldr	r3, [sp, #4]
 800c146:	6163      	str	r3, [r4, #20]
 800c148:	2201      	movs	r2, #1
 800c14a:	6122      	str	r2, [r4, #16]
 800c14c:	3020      	adds	r0, #32
 800c14e:	e7e3      	b.n	800c118 <__d2b+0x60>
 800c150:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c154:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c158:	f8c9 0000 	str.w	r0, [r9]
 800c15c:	6918      	ldr	r0, [r3, #16]
 800c15e:	f7ff fcaf 	bl	800bac0 <__hi0bits>
 800c162:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c166:	e7df      	b.n	800c128 <__d2b+0x70>
 800c168:	0800d5c5 	.word	0x0800d5c5
 800c16c:	0800d650 	.word	0x0800d650

0800c170 <__ratio>:
 800c170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	4688      	mov	r8, r1
 800c176:	4669      	mov	r1, sp
 800c178:	4681      	mov	r9, r0
 800c17a:	f7ff ff4d 	bl	800c018 <__b2d>
 800c17e:	a901      	add	r1, sp, #4
 800c180:	4640      	mov	r0, r8
 800c182:	ec55 4b10 	vmov	r4, r5, d0
 800c186:	f7ff ff47 	bl	800c018 <__b2d>
 800c18a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c18e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c192:	eba3 0c02 	sub.w	ip, r3, r2
 800c196:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c19a:	1a9b      	subs	r3, r3, r2
 800c19c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c1a0:	ec51 0b10 	vmov	r0, r1, d0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	bfd6      	itet	le
 800c1a8:	460a      	movle	r2, r1
 800c1aa:	462a      	movgt	r2, r5
 800c1ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1b0:	468b      	mov	fp, r1
 800c1b2:	462f      	mov	r7, r5
 800c1b4:	bfd4      	ite	le
 800c1b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1be:	4620      	mov	r0, r4
 800c1c0:	ee10 2a10 	vmov	r2, s0
 800c1c4:	465b      	mov	r3, fp
 800c1c6:	4639      	mov	r1, r7
 800c1c8:	f7f4 fb48 	bl	800085c <__aeabi_ddiv>
 800c1cc:	ec41 0b10 	vmov	d0, r0, r1
 800c1d0:	b003      	add	sp, #12
 800c1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1d6 <__copybits>:
 800c1d6:	3901      	subs	r1, #1
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	1149      	asrs	r1, r1, #5
 800c1dc:	6914      	ldr	r4, [r2, #16]
 800c1de:	3101      	adds	r1, #1
 800c1e0:	f102 0314 	add.w	r3, r2, #20
 800c1e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1ec:	1f05      	subs	r5, r0, #4
 800c1ee:	42a3      	cmp	r3, r4
 800c1f0:	d30c      	bcc.n	800c20c <__copybits+0x36>
 800c1f2:	1aa3      	subs	r3, r4, r2
 800c1f4:	3b11      	subs	r3, #17
 800c1f6:	f023 0303 	bic.w	r3, r3, #3
 800c1fa:	3211      	adds	r2, #17
 800c1fc:	42a2      	cmp	r2, r4
 800c1fe:	bf88      	it	hi
 800c200:	2300      	movhi	r3, #0
 800c202:	4418      	add	r0, r3
 800c204:	2300      	movs	r3, #0
 800c206:	4288      	cmp	r0, r1
 800c208:	d305      	bcc.n	800c216 <__copybits+0x40>
 800c20a:	bd70      	pop	{r4, r5, r6, pc}
 800c20c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c210:	f845 6f04 	str.w	r6, [r5, #4]!
 800c214:	e7eb      	b.n	800c1ee <__copybits+0x18>
 800c216:	f840 3b04 	str.w	r3, [r0], #4
 800c21a:	e7f4      	b.n	800c206 <__copybits+0x30>

0800c21c <__any_on>:
 800c21c:	f100 0214 	add.w	r2, r0, #20
 800c220:	6900      	ldr	r0, [r0, #16]
 800c222:	114b      	asrs	r3, r1, #5
 800c224:	4298      	cmp	r0, r3
 800c226:	b510      	push	{r4, lr}
 800c228:	db11      	blt.n	800c24e <__any_on+0x32>
 800c22a:	dd0a      	ble.n	800c242 <__any_on+0x26>
 800c22c:	f011 011f 	ands.w	r1, r1, #31
 800c230:	d007      	beq.n	800c242 <__any_on+0x26>
 800c232:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c236:	fa24 f001 	lsr.w	r0, r4, r1
 800c23a:	fa00 f101 	lsl.w	r1, r0, r1
 800c23e:	428c      	cmp	r4, r1
 800c240:	d10b      	bne.n	800c25a <__any_on+0x3e>
 800c242:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c246:	4293      	cmp	r3, r2
 800c248:	d803      	bhi.n	800c252 <__any_on+0x36>
 800c24a:	2000      	movs	r0, #0
 800c24c:	bd10      	pop	{r4, pc}
 800c24e:	4603      	mov	r3, r0
 800c250:	e7f7      	b.n	800c242 <__any_on+0x26>
 800c252:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c256:	2900      	cmp	r1, #0
 800c258:	d0f5      	beq.n	800c246 <__any_on+0x2a>
 800c25a:	2001      	movs	r0, #1
 800c25c:	e7f6      	b.n	800c24c <__any_on+0x30>

0800c25e <_calloc_r>:
 800c25e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c260:	fba1 2402 	umull	r2, r4, r1, r2
 800c264:	b94c      	cbnz	r4, 800c27a <_calloc_r+0x1c>
 800c266:	4611      	mov	r1, r2
 800c268:	9201      	str	r2, [sp, #4]
 800c26a:	f7fc fabb 	bl	80087e4 <_malloc_r>
 800c26e:	9a01      	ldr	r2, [sp, #4]
 800c270:	4605      	mov	r5, r0
 800c272:	b930      	cbnz	r0, 800c282 <_calloc_r+0x24>
 800c274:	4628      	mov	r0, r5
 800c276:	b003      	add	sp, #12
 800c278:	bd30      	pop	{r4, r5, pc}
 800c27a:	220c      	movs	r2, #12
 800c27c:	6002      	str	r2, [r0, #0]
 800c27e:	2500      	movs	r5, #0
 800c280:	e7f8      	b.n	800c274 <_calloc_r+0x16>
 800c282:	4621      	mov	r1, r4
 800c284:	f7fc fa3a 	bl	80086fc <memset>
 800c288:	e7f4      	b.n	800c274 <_calloc_r+0x16>

0800c28a <__ssputs_r>:
 800c28a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c28e:	688e      	ldr	r6, [r1, #8]
 800c290:	429e      	cmp	r6, r3
 800c292:	4682      	mov	sl, r0
 800c294:	460c      	mov	r4, r1
 800c296:	4690      	mov	r8, r2
 800c298:	461f      	mov	r7, r3
 800c29a:	d838      	bhi.n	800c30e <__ssputs_r+0x84>
 800c29c:	898a      	ldrh	r2, [r1, #12]
 800c29e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2a2:	d032      	beq.n	800c30a <__ssputs_r+0x80>
 800c2a4:	6825      	ldr	r5, [r4, #0]
 800c2a6:	6909      	ldr	r1, [r1, #16]
 800c2a8:	eba5 0901 	sub.w	r9, r5, r1
 800c2ac:	6965      	ldr	r5, [r4, #20]
 800c2ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	444b      	add	r3, r9
 800c2ba:	106d      	asrs	r5, r5, #1
 800c2bc:	429d      	cmp	r5, r3
 800c2be:	bf38      	it	cc
 800c2c0:	461d      	movcc	r5, r3
 800c2c2:	0553      	lsls	r3, r2, #21
 800c2c4:	d531      	bpl.n	800c32a <__ssputs_r+0xa0>
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7fc fa8c 	bl	80087e4 <_malloc_r>
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	b950      	cbnz	r0, 800c2e6 <__ssputs_r+0x5c>
 800c2d0:	230c      	movs	r3, #12
 800c2d2:	f8ca 3000 	str.w	r3, [sl]
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2e6:	6921      	ldr	r1, [r4, #16]
 800c2e8:	464a      	mov	r2, r9
 800c2ea:	f7fc f9f9 	bl	80086e0 <memcpy>
 800c2ee:	89a3      	ldrh	r3, [r4, #12]
 800c2f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	6126      	str	r6, [r4, #16]
 800c2fc:	6165      	str	r5, [r4, #20]
 800c2fe:	444e      	add	r6, r9
 800c300:	eba5 0509 	sub.w	r5, r5, r9
 800c304:	6026      	str	r6, [r4, #0]
 800c306:	60a5      	str	r5, [r4, #8]
 800c308:	463e      	mov	r6, r7
 800c30a:	42be      	cmp	r6, r7
 800c30c:	d900      	bls.n	800c310 <__ssputs_r+0x86>
 800c30e:	463e      	mov	r6, r7
 800c310:	6820      	ldr	r0, [r4, #0]
 800c312:	4632      	mov	r2, r6
 800c314:	4641      	mov	r1, r8
 800c316:	f000 fd81 	bl	800ce1c <memmove>
 800c31a:	68a3      	ldr	r3, [r4, #8]
 800c31c:	1b9b      	subs	r3, r3, r6
 800c31e:	60a3      	str	r3, [r4, #8]
 800c320:	6823      	ldr	r3, [r4, #0]
 800c322:	4433      	add	r3, r6
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	2000      	movs	r0, #0
 800c328:	e7db      	b.n	800c2e2 <__ssputs_r+0x58>
 800c32a:	462a      	mov	r2, r5
 800c32c:	f000 fd90 	bl	800ce50 <_realloc_r>
 800c330:	4606      	mov	r6, r0
 800c332:	2800      	cmp	r0, #0
 800c334:	d1e1      	bne.n	800c2fa <__ssputs_r+0x70>
 800c336:	6921      	ldr	r1, [r4, #16]
 800c338:	4650      	mov	r0, sl
 800c33a:	f7fc f9e7 	bl	800870c <_free_r>
 800c33e:	e7c7      	b.n	800c2d0 <__ssputs_r+0x46>

0800c340 <_svfiprintf_r>:
 800c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c344:	4698      	mov	r8, r3
 800c346:	898b      	ldrh	r3, [r1, #12]
 800c348:	061b      	lsls	r3, r3, #24
 800c34a:	b09d      	sub	sp, #116	; 0x74
 800c34c:	4607      	mov	r7, r0
 800c34e:	460d      	mov	r5, r1
 800c350:	4614      	mov	r4, r2
 800c352:	d50e      	bpl.n	800c372 <_svfiprintf_r+0x32>
 800c354:	690b      	ldr	r3, [r1, #16]
 800c356:	b963      	cbnz	r3, 800c372 <_svfiprintf_r+0x32>
 800c358:	2140      	movs	r1, #64	; 0x40
 800c35a:	f7fc fa43 	bl	80087e4 <_malloc_r>
 800c35e:	6028      	str	r0, [r5, #0]
 800c360:	6128      	str	r0, [r5, #16]
 800c362:	b920      	cbnz	r0, 800c36e <_svfiprintf_r+0x2e>
 800c364:	230c      	movs	r3, #12
 800c366:	603b      	str	r3, [r7, #0]
 800c368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c36c:	e0d1      	b.n	800c512 <_svfiprintf_r+0x1d2>
 800c36e:	2340      	movs	r3, #64	; 0x40
 800c370:	616b      	str	r3, [r5, #20]
 800c372:	2300      	movs	r3, #0
 800c374:	9309      	str	r3, [sp, #36]	; 0x24
 800c376:	2320      	movs	r3, #32
 800c378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c37c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c380:	2330      	movs	r3, #48	; 0x30
 800c382:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c52c <_svfiprintf_r+0x1ec>
 800c386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c38a:	f04f 0901 	mov.w	r9, #1
 800c38e:	4623      	mov	r3, r4
 800c390:	469a      	mov	sl, r3
 800c392:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c396:	b10a      	cbz	r2, 800c39c <_svfiprintf_r+0x5c>
 800c398:	2a25      	cmp	r2, #37	; 0x25
 800c39a:	d1f9      	bne.n	800c390 <_svfiprintf_r+0x50>
 800c39c:	ebba 0b04 	subs.w	fp, sl, r4
 800c3a0:	d00b      	beq.n	800c3ba <_svfiprintf_r+0x7a>
 800c3a2:	465b      	mov	r3, fp
 800c3a4:	4622      	mov	r2, r4
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	4638      	mov	r0, r7
 800c3aa:	f7ff ff6e 	bl	800c28a <__ssputs_r>
 800c3ae:	3001      	adds	r0, #1
 800c3b0:	f000 80aa 	beq.w	800c508 <_svfiprintf_r+0x1c8>
 800c3b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3b6:	445a      	add	r2, fp
 800c3b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f000 80a2 	beq.w	800c508 <_svfiprintf_r+0x1c8>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3ce:	f10a 0a01 	add.w	sl, sl, #1
 800c3d2:	9304      	str	r3, [sp, #16]
 800c3d4:	9307      	str	r3, [sp, #28]
 800c3d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3da:	931a      	str	r3, [sp, #104]	; 0x68
 800c3dc:	4654      	mov	r4, sl
 800c3de:	2205      	movs	r2, #5
 800c3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e4:	4851      	ldr	r0, [pc, #324]	; (800c52c <_svfiprintf_r+0x1ec>)
 800c3e6:	f7f3 ff03 	bl	80001f0 <memchr>
 800c3ea:	9a04      	ldr	r2, [sp, #16]
 800c3ec:	b9d8      	cbnz	r0, 800c426 <_svfiprintf_r+0xe6>
 800c3ee:	06d0      	lsls	r0, r2, #27
 800c3f0:	bf44      	itt	mi
 800c3f2:	2320      	movmi	r3, #32
 800c3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3f8:	0711      	lsls	r1, r2, #28
 800c3fa:	bf44      	itt	mi
 800c3fc:	232b      	movmi	r3, #43	; 0x2b
 800c3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c402:	f89a 3000 	ldrb.w	r3, [sl]
 800c406:	2b2a      	cmp	r3, #42	; 0x2a
 800c408:	d015      	beq.n	800c436 <_svfiprintf_r+0xf6>
 800c40a:	9a07      	ldr	r2, [sp, #28]
 800c40c:	4654      	mov	r4, sl
 800c40e:	2000      	movs	r0, #0
 800c410:	f04f 0c0a 	mov.w	ip, #10
 800c414:	4621      	mov	r1, r4
 800c416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c41a:	3b30      	subs	r3, #48	; 0x30
 800c41c:	2b09      	cmp	r3, #9
 800c41e:	d94e      	bls.n	800c4be <_svfiprintf_r+0x17e>
 800c420:	b1b0      	cbz	r0, 800c450 <_svfiprintf_r+0x110>
 800c422:	9207      	str	r2, [sp, #28]
 800c424:	e014      	b.n	800c450 <_svfiprintf_r+0x110>
 800c426:	eba0 0308 	sub.w	r3, r0, r8
 800c42a:	fa09 f303 	lsl.w	r3, r9, r3
 800c42e:	4313      	orrs	r3, r2
 800c430:	9304      	str	r3, [sp, #16]
 800c432:	46a2      	mov	sl, r4
 800c434:	e7d2      	b.n	800c3dc <_svfiprintf_r+0x9c>
 800c436:	9b03      	ldr	r3, [sp, #12]
 800c438:	1d19      	adds	r1, r3, #4
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	9103      	str	r1, [sp, #12]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	bfbb      	ittet	lt
 800c442:	425b      	neglt	r3, r3
 800c444:	f042 0202 	orrlt.w	r2, r2, #2
 800c448:	9307      	strge	r3, [sp, #28]
 800c44a:	9307      	strlt	r3, [sp, #28]
 800c44c:	bfb8      	it	lt
 800c44e:	9204      	strlt	r2, [sp, #16]
 800c450:	7823      	ldrb	r3, [r4, #0]
 800c452:	2b2e      	cmp	r3, #46	; 0x2e
 800c454:	d10c      	bne.n	800c470 <_svfiprintf_r+0x130>
 800c456:	7863      	ldrb	r3, [r4, #1]
 800c458:	2b2a      	cmp	r3, #42	; 0x2a
 800c45a:	d135      	bne.n	800c4c8 <_svfiprintf_r+0x188>
 800c45c:	9b03      	ldr	r3, [sp, #12]
 800c45e:	1d1a      	adds	r2, r3, #4
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	9203      	str	r2, [sp, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	bfb8      	it	lt
 800c468:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c46c:	3402      	adds	r4, #2
 800c46e:	9305      	str	r3, [sp, #20]
 800c470:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c53c <_svfiprintf_r+0x1fc>
 800c474:	7821      	ldrb	r1, [r4, #0]
 800c476:	2203      	movs	r2, #3
 800c478:	4650      	mov	r0, sl
 800c47a:	f7f3 feb9 	bl	80001f0 <memchr>
 800c47e:	b140      	cbz	r0, 800c492 <_svfiprintf_r+0x152>
 800c480:	2340      	movs	r3, #64	; 0x40
 800c482:	eba0 000a 	sub.w	r0, r0, sl
 800c486:	fa03 f000 	lsl.w	r0, r3, r0
 800c48a:	9b04      	ldr	r3, [sp, #16]
 800c48c:	4303      	orrs	r3, r0
 800c48e:	3401      	adds	r4, #1
 800c490:	9304      	str	r3, [sp, #16]
 800c492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c496:	4826      	ldr	r0, [pc, #152]	; (800c530 <_svfiprintf_r+0x1f0>)
 800c498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c49c:	2206      	movs	r2, #6
 800c49e:	f7f3 fea7 	bl	80001f0 <memchr>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d038      	beq.n	800c518 <_svfiprintf_r+0x1d8>
 800c4a6:	4b23      	ldr	r3, [pc, #140]	; (800c534 <_svfiprintf_r+0x1f4>)
 800c4a8:	bb1b      	cbnz	r3, 800c4f2 <_svfiprintf_r+0x1b2>
 800c4aa:	9b03      	ldr	r3, [sp, #12]
 800c4ac:	3307      	adds	r3, #7
 800c4ae:	f023 0307 	bic.w	r3, r3, #7
 800c4b2:	3308      	adds	r3, #8
 800c4b4:	9303      	str	r3, [sp, #12]
 800c4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b8:	4433      	add	r3, r6
 800c4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c4bc:	e767      	b.n	800c38e <_svfiprintf_r+0x4e>
 800c4be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	2001      	movs	r0, #1
 800c4c6:	e7a5      	b.n	800c414 <_svfiprintf_r+0xd4>
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	3401      	adds	r4, #1
 800c4cc:	9305      	str	r3, [sp, #20]
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	f04f 0c0a 	mov.w	ip, #10
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4da:	3a30      	subs	r2, #48	; 0x30
 800c4dc:	2a09      	cmp	r2, #9
 800c4de:	d903      	bls.n	800c4e8 <_svfiprintf_r+0x1a8>
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d0c5      	beq.n	800c470 <_svfiprintf_r+0x130>
 800c4e4:	9105      	str	r1, [sp, #20]
 800c4e6:	e7c3      	b.n	800c470 <_svfiprintf_r+0x130>
 800c4e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e7f0      	b.n	800c4d4 <_svfiprintf_r+0x194>
 800c4f2:	ab03      	add	r3, sp, #12
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	462a      	mov	r2, r5
 800c4f8:	4b0f      	ldr	r3, [pc, #60]	; (800c538 <_svfiprintf_r+0x1f8>)
 800c4fa:	a904      	add	r1, sp, #16
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	f7fc fa85 	bl	8008a0c <_printf_float>
 800c502:	1c42      	adds	r2, r0, #1
 800c504:	4606      	mov	r6, r0
 800c506:	d1d6      	bne.n	800c4b6 <_svfiprintf_r+0x176>
 800c508:	89ab      	ldrh	r3, [r5, #12]
 800c50a:	065b      	lsls	r3, r3, #25
 800c50c:	f53f af2c 	bmi.w	800c368 <_svfiprintf_r+0x28>
 800c510:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c512:	b01d      	add	sp, #116	; 0x74
 800c514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c518:	ab03      	add	r3, sp, #12
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	462a      	mov	r2, r5
 800c51e:	4b06      	ldr	r3, [pc, #24]	; (800c538 <_svfiprintf_r+0x1f8>)
 800c520:	a904      	add	r1, sp, #16
 800c522:	4638      	mov	r0, r7
 800c524:	f7fc fd16 	bl	8008f54 <_printf_i>
 800c528:	e7eb      	b.n	800c502 <_svfiprintf_r+0x1c2>
 800c52a:	bf00      	nop
 800c52c:	0800d7ac 	.word	0x0800d7ac
 800c530:	0800d7b6 	.word	0x0800d7b6
 800c534:	08008a0d 	.word	0x08008a0d
 800c538:	0800c28b 	.word	0x0800c28b
 800c53c:	0800d7b2 	.word	0x0800d7b2

0800c540 <__sfputc_r>:
 800c540:	6893      	ldr	r3, [r2, #8]
 800c542:	3b01      	subs	r3, #1
 800c544:	2b00      	cmp	r3, #0
 800c546:	b410      	push	{r4}
 800c548:	6093      	str	r3, [r2, #8]
 800c54a:	da08      	bge.n	800c55e <__sfputc_r+0x1e>
 800c54c:	6994      	ldr	r4, [r2, #24]
 800c54e:	42a3      	cmp	r3, r4
 800c550:	db01      	blt.n	800c556 <__sfputc_r+0x16>
 800c552:	290a      	cmp	r1, #10
 800c554:	d103      	bne.n	800c55e <__sfputc_r+0x1e>
 800c556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c55a:	f000 b969 	b.w	800c830 <__swbuf_r>
 800c55e:	6813      	ldr	r3, [r2, #0]
 800c560:	1c58      	adds	r0, r3, #1
 800c562:	6010      	str	r0, [r2, #0]
 800c564:	7019      	strb	r1, [r3, #0]
 800c566:	4608      	mov	r0, r1
 800c568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <__sfputs_r>:
 800c56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c570:	4606      	mov	r6, r0
 800c572:	460f      	mov	r7, r1
 800c574:	4614      	mov	r4, r2
 800c576:	18d5      	adds	r5, r2, r3
 800c578:	42ac      	cmp	r4, r5
 800c57a:	d101      	bne.n	800c580 <__sfputs_r+0x12>
 800c57c:	2000      	movs	r0, #0
 800c57e:	e007      	b.n	800c590 <__sfputs_r+0x22>
 800c580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c584:	463a      	mov	r2, r7
 800c586:	4630      	mov	r0, r6
 800c588:	f7ff ffda 	bl	800c540 <__sfputc_r>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	d1f3      	bne.n	800c578 <__sfputs_r+0xa>
 800c590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c594 <_vfiprintf_r>:
 800c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	460d      	mov	r5, r1
 800c59a:	b09d      	sub	sp, #116	; 0x74
 800c59c:	4614      	mov	r4, r2
 800c59e:	4698      	mov	r8, r3
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	b118      	cbz	r0, 800c5ac <_vfiprintf_r+0x18>
 800c5a4:	6983      	ldr	r3, [r0, #24]
 800c5a6:	b90b      	cbnz	r3, 800c5ac <_vfiprintf_r+0x18>
 800c5a8:	f000 fb32 	bl	800cc10 <__sinit>
 800c5ac:	4b89      	ldr	r3, [pc, #548]	; (800c7d4 <_vfiprintf_r+0x240>)
 800c5ae:	429d      	cmp	r5, r3
 800c5b0:	d11b      	bne.n	800c5ea <_vfiprintf_r+0x56>
 800c5b2:	6875      	ldr	r5, [r6, #4]
 800c5b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5b6:	07d9      	lsls	r1, r3, #31
 800c5b8:	d405      	bmi.n	800c5c6 <_vfiprintf_r+0x32>
 800c5ba:	89ab      	ldrh	r3, [r5, #12]
 800c5bc:	059a      	lsls	r2, r3, #22
 800c5be:	d402      	bmi.n	800c5c6 <_vfiprintf_r+0x32>
 800c5c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5c2:	f000 fbc3 	bl	800cd4c <__retarget_lock_acquire_recursive>
 800c5c6:	89ab      	ldrh	r3, [r5, #12]
 800c5c8:	071b      	lsls	r3, r3, #28
 800c5ca:	d501      	bpl.n	800c5d0 <_vfiprintf_r+0x3c>
 800c5cc:	692b      	ldr	r3, [r5, #16]
 800c5ce:	b9eb      	cbnz	r3, 800c60c <_vfiprintf_r+0x78>
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f000 f98c 	bl	800c8f0 <__swsetup_r>
 800c5d8:	b1c0      	cbz	r0, 800c60c <_vfiprintf_r+0x78>
 800c5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5dc:	07dc      	lsls	r4, r3, #31
 800c5de:	d50e      	bpl.n	800c5fe <_vfiprintf_r+0x6a>
 800c5e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5e4:	b01d      	add	sp, #116	; 0x74
 800c5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ea:	4b7b      	ldr	r3, [pc, #492]	; (800c7d8 <_vfiprintf_r+0x244>)
 800c5ec:	429d      	cmp	r5, r3
 800c5ee:	d101      	bne.n	800c5f4 <_vfiprintf_r+0x60>
 800c5f0:	68b5      	ldr	r5, [r6, #8]
 800c5f2:	e7df      	b.n	800c5b4 <_vfiprintf_r+0x20>
 800c5f4:	4b79      	ldr	r3, [pc, #484]	; (800c7dc <_vfiprintf_r+0x248>)
 800c5f6:	429d      	cmp	r5, r3
 800c5f8:	bf08      	it	eq
 800c5fa:	68f5      	ldreq	r5, [r6, #12]
 800c5fc:	e7da      	b.n	800c5b4 <_vfiprintf_r+0x20>
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	0598      	lsls	r0, r3, #22
 800c602:	d4ed      	bmi.n	800c5e0 <_vfiprintf_r+0x4c>
 800c604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c606:	f000 fba2 	bl	800cd4e <__retarget_lock_release_recursive>
 800c60a:	e7e9      	b.n	800c5e0 <_vfiprintf_r+0x4c>
 800c60c:	2300      	movs	r3, #0
 800c60e:	9309      	str	r3, [sp, #36]	; 0x24
 800c610:	2320      	movs	r3, #32
 800c612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c616:	f8cd 800c 	str.w	r8, [sp, #12]
 800c61a:	2330      	movs	r3, #48	; 0x30
 800c61c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7e0 <_vfiprintf_r+0x24c>
 800c620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c624:	f04f 0901 	mov.w	r9, #1
 800c628:	4623      	mov	r3, r4
 800c62a:	469a      	mov	sl, r3
 800c62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c630:	b10a      	cbz	r2, 800c636 <_vfiprintf_r+0xa2>
 800c632:	2a25      	cmp	r2, #37	; 0x25
 800c634:	d1f9      	bne.n	800c62a <_vfiprintf_r+0x96>
 800c636:	ebba 0b04 	subs.w	fp, sl, r4
 800c63a:	d00b      	beq.n	800c654 <_vfiprintf_r+0xc0>
 800c63c:	465b      	mov	r3, fp
 800c63e:	4622      	mov	r2, r4
 800c640:	4629      	mov	r1, r5
 800c642:	4630      	mov	r0, r6
 800c644:	f7ff ff93 	bl	800c56e <__sfputs_r>
 800c648:	3001      	adds	r0, #1
 800c64a:	f000 80aa 	beq.w	800c7a2 <_vfiprintf_r+0x20e>
 800c64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c650:	445a      	add	r2, fp
 800c652:	9209      	str	r2, [sp, #36]	; 0x24
 800c654:	f89a 3000 	ldrb.w	r3, [sl]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f000 80a2 	beq.w	800c7a2 <_vfiprintf_r+0x20e>
 800c65e:	2300      	movs	r3, #0
 800c660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c668:	f10a 0a01 	add.w	sl, sl, #1
 800c66c:	9304      	str	r3, [sp, #16]
 800c66e:	9307      	str	r3, [sp, #28]
 800c670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c674:	931a      	str	r3, [sp, #104]	; 0x68
 800c676:	4654      	mov	r4, sl
 800c678:	2205      	movs	r2, #5
 800c67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67e:	4858      	ldr	r0, [pc, #352]	; (800c7e0 <_vfiprintf_r+0x24c>)
 800c680:	f7f3 fdb6 	bl	80001f0 <memchr>
 800c684:	9a04      	ldr	r2, [sp, #16]
 800c686:	b9d8      	cbnz	r0, 800c6c0 <_vfiprintf_r+0x12c>
 800c688:	06d1      	lsls	r1, r2, #27
 800c68a:	bf44      	itt	mi
 800c68c:	2320      	movmi	r3, #32
 800c68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c692:	0713      	lsls	r3, r2, #28
 800c694:	bf44      	itt	mi
 800c696:	232b      	movmi	r3, #43	; 0x2b
 800c698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c69c:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6a2:	d015      	beq.n	800c6d0 <_vfiprintf_r+0x13c>
 800c6a4:	9a07      	ldr	r2, [sp, #28]
 800c6a6:	4654      	mov	r4, sl
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	f04f 0c0a 	mov.w	ip, #10
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6b4:	3b30      	subs	r3, #48	; 0x30
 800c6b6:	2b09      	cmp	r3, #9
 800c6b8:	d94e      	bls.n	800c758 <_vfiprintf_r+0x1c4>
 800c6ba:	b1b0      	cbz	r0, 800c6ea <_vfiprintf_r+0x156>
 800c6bc:	9207      	str	r2, [sp, #28]
 800c6be:	e014      	b.n	800c6ea <_vfiprintf_r+0x156>
 800c6c0:	eba0 0308 	sub.w	r3, r0, r8
 800c6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	46a2      	mov	sl, r4
 800c6ce:	e7d2      	b.n	800c676 <_vfiprintf_r+0xe2>
 800c6d0:	9b03      	ldr	r3, [sp, #12]
 800c6d2:	1d19      	adds	r1, r3, #4
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	9103      	str	r1, [sp, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	bfbb      	ittet	lt
 800c6dc:	425b      	neglt	r3, r3
 800c6de:	f042 0202 	orrlt.w	r2, r2, #2
 800c6e2:	9307      	strge	r3, [sp, #28]
 800c6e4:	9307      	strlt	r3, [sp, #28]
 800c6e6:	bfb8      	it	lt
 800c6e8:	9204      	strlt	r2, [sp, #16]
 800c6ea:	7823      	ldrb	r3, [r4, #0]
 800c6ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ee:	d10c      	bne.n	800c70a <_vfiprintf_r+0x176>
 800c6f0:	7863      	ldrb	r3, [r4, #1]
 800c6f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6f4:	d135      	bne.n	800c762 <_vfiprintf_r+0x1ce>
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	1d1a      	adds	r2, r3, #4
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	9203      	str	r2, [sp, #12]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	bfb8      	it	lt
 800c702:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c706:	3402      	adds	r4, #2
 800c708:	9305      	str	r3, [sp, #20]
 800c70a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7f0 <_vfiprintf_r+0x25c>
 800c70e:	7821      	ldrb	r1, [r4, #0]
 800c710:	2203      	movs	r2, #3
 800c712:	4650      	mov	r0, sl
 800c714:	f7f3 fd6c 	bl	80001f0 <memchr>
 800c718:	b140      	cbz	r0, 800c72c <_vfiprintf_r+0x198>
 800c71a:	2340      	movs	r3, #64	; 0x40
 800c71c:	eba0 000a 	sub.w	r0, r0, sl
 800c720:	fa03 f000 	lsl.w	r0, r3, r0
 800c724:	9b04      	ldr	r3, [sp, #16]
 800c726:	4303      	orrs	r3, r0
 800c728:	3401      	adds	r4, #1
 800c72a:	9304      	str	r3, [sp, #16]
 800c72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c730:	482c      	ldr	r0, [pc, #176]	; (800c7e4 <_vfiprintf_r+0x250>)
 800c732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c736:	2206      	movs	r2, #6
 800c738:	f7f3 fd5a 	bl	80001f0 <memchr>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d03f      	beq.n	800c7c0 <_vfiprintf_r+0x22c>
 800c740:	4b29      	ldr	r3, [pc, #164]	; (800c7e8 <_vfiprintf_r+0x254>)
 800c742:	bb1b      	cbnz	r3, 800c78c <_vfiprintf_r+0x1f8>
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	3307      	adds	r3, #7
 800c748:	f023 0307 	bic.w	r3, r3, #7
 800c74c:	3308      	adds	r3, #8
 800c74e:	9303      	str	r3, [sp, #12]
 800c750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c752:	443b      	add	r3, r7
 800c754:	9309      	str	r3, [sp, #36]	; 0x24
 800c756:	e767      	b.n	800c628 <_vfiprintf_r+0x94>
 800c758:	fb0c 3202 	mla	r2, ip, r2, r3
 800c75c:	460c      	mov	r4, r1
 800c75e:	2001      	movs	r0, #1
 800c760:	e7a5      	b.n	800c6ae <_vfiprintf_r+0x11a>
 800c762:	2300      	movs	r3, #0
 800c764:	3401      	adds	r4, #1
 800c766:	9305      	str	r3, [sp, #20]
 800c768:	4619      	mov	r1, r3
 800c76a:	f04f 0c0a 	mov.w	ip, #10
 800c76e:	4620      	mov	r0, r4
 800c770:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c774:	3a30      	subs	r2, #48	; 0x30
 800c776:	2a09      	cmp	r2, #9
 800c778:	d903      	bls.n	800c782 <_vfiprintf_r+0x1ee>
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0c5      	beq.n	800c70a <_vfiprintf_r+0x176>
 800c77e:	9105      	str	r1, [sp, #20]
 800c780:	e7c3      	b.n	800c70a <_vfiprintf_r+0x176>
 800c782:	fb0c 2101 	mla	r1, ip, r1, r2
 800c786:	4604      	mov	r4, r0
 800c788:	2301      	movs	r3, #1
 800c78a:	e7f0      	b.n	800c76e <_vfiprintf_r+0x1da>
 800c78c:	ab03      	add	r3, sp, #12
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	462a      	mov	r2, r5
 800c792:	4b16      	ldr	r3, [pc, #88]	; (800c7ec <_vfiprintf_r+0x258>)
 800c794:	a904      	add	r1, sp, #16
 800c796:	4630      	mov	r0, r6
 800c798:	f7fc f938 	bl	8008a0c <_printf_float>
 800c79c:	4607      	mov	r7, r0
 800c79e:	1c78      	adds	r0, r7, #1
 800c7a0:	d1d6      	bne.n	800c750 <_vfiprintf_r+0x1bc>
 800c7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a4:	07d9      	lsls	r1, r3, #31
 800c7a6:	d405      	bmi.n	800c7b4 <_vfiprintf_r+0x220>
 800c7a8:	89ab      	ldrh	r3, [r5, #12]
 800c7aa:	059a      	lsls	r2, r3, #22
 800c7ac:	d402      	bmi.n	800c7b4 <_vfiprintf_r+0x220>
 800c7ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7b0:	f000 facd 	bl	800cd4e <__retarget_lock_release_recursive>
 800c7b4:	89ab      	ldrh	r3, [r5, #12]
 800c7b6:	065b      	lsls	r3, r3, #25
 800c7b8:	f53f af12 	bmi.w	800c5e0 <_vfiprintf_r+0x4c>
 800c7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7be:	e711      	b.n	800c5e4 <_vfiprintf_r+0x50>
 800c7c0:	ab03      	add	r3, sp, #12
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	462a      	mov	r2, r5
 800c7c6:	4b09      	ldr	r3, [pc, #36]	; (800c7ec <_vfiprintf_r+0x258>)
 800c7c8:	a904      	add	r1, sp, #16
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f7fc fbc2 	bl	8008f54 <_printf_i>
 800c7d0:	e7e4      	b.n	800c79c <_vfiprintf_r+0x208>
 800c7d2:	bf00      	nop
 800c7d4:	0800d7e0 	.word	0x0800d7e0
 800c7d8:	0800d800 	.word	0x0800d800
 800c7dc:	0800d7c0 	.word	0x0800d7c0
 800c7e0:	0800d7ac 	.word	0x0800d7ac
 800c7e4:	0800d7b6 	.word	0x0800d7b6
 800c7e8:	08008a0d 	.word	0x08008a0d
 800c7ec:	0800c56f 	.word	0x0800c56f
 800c7f0:	0800d7b2 	.word	0x0800d7b2
 800c7f4:	00000000 	.word	0x00000000

0800c7f8 <nan>:
 800c7f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c800 <nan+0x8>
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	00000000 	.word	0x00000000
 800c804:	7ff80000 	.word	0x7ff80000

0800c808 <strncmp>:
 800c808:	b510      	push	{r4, lr}
 800c80a:	b17a      	cbz	r2, 800c82c <strncmp+0x24>
 800c80c:	4603      	mov	r3, r0
 800c80e:	3901      	subs	r1, #1
 800c810:	1884      	adds	r4, r0, r2
 800c812:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c816:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c81a:	4290      	cmp	r0, r2
 800c81c:	d101      	bne.n	800c822 <strncmp+0x1a>
 800c81e:	42a3      	cmp	r3, r4
 800c820:	d101      	bne.n	800c826 <strncmp+0x1e>
 800c822:	1a80      	subs	r0, r0, r2
 800c824:	bd10      	pop	{r4, pc}
 800c826:	2800      	cmp	r0, #0
 800c828:	d1f3      	bne.n	800c812 <strncmp+0xa>
 800c82a:	e7fa      	b.n	800c822 <strncmp+0x1a>
 800c82c:	4610      	mov	r0, r2
 800c82e:	e7f9      	b.n	800c824 <strncmp+0x1c>

0800c830 <__swbuf_r>:
 800c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c832:	460e      	mov	r6, r1
 800c834:	4614      	mov	r4, r2
 800c836:	4605      	mov	r5, r0
 800c838:	b118      	cbz	r0, 800c842 <__swbuf_r+0x12>
 800c83a:	6983      	ldr	r3, [r0, #24]
 800c83c:	b90b      	cbnz	r3, 800c842 <__swbuf_r+0x12>
 800c83e:	f000 f9e7 	bl	800cc10 <__sinit>
 800c842:	4b21      	ldr	r3, [pc, #132]	; (800c8c8 <__swbuf_r+0x98>)
 800c844:	429c      	cmp	r4, r3
 800c846:	d12b      	bne.n	800c8a0 <__swbuf_r+0x70>
 800c848:	686c      	ldr	r4, [r5, #4]
 800c84a:	69a3      	ldr	r3, [r4, #24]
 800c84c:	60a3      	str	r3, [r4, #8]
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	071a      	lsls	r2, r3, #28
 800c852:	d52f      	bpl.n	800c8b4 <__swbuf_r+0x84>
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	b36b      	cbz	r3, 800c8b4 <__swbuf_r+0x84>
 800c858:	6923      	ldr	r3, [r4, #16]
 800c85a:	6820      	ldr	r0, [r4, #0]
 800c85c:	1ac0      	subs	r0, r0, r3
 800c85e:	6963      	ldr	r3, [r4, #20]
 800c860:	b2f6      	uxtb	r6, r6
 800c862:	4283      	cmp	r3, r0
 800c864:	4637      	mov	r7, r6
 800c866:	dc04      	bgt.n	800c872 <__swbuf_r+0x42>
 800c868:	4621      	mov	r1, r4
 800c86a:	4628      	mov	r0, r5
 800c86c:	f000 f93c 	bl	800cae8 <_fflush_r>
 800c870:	bb30      	cbnz	r0, 800c8c0 <__swbuf_r+0x90>
 800c872:	68a3      	ldr	r3, [r4, #8]
 800c874:	3b01      	subs	r3, #1
 800c876:	60a3      	str	r3, [r4, #8]
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	1c5a      	adds	r2, r3, #1
 800c87c:	6022      	str	r2, [r4, #0]
 800c87e:	701e      	strb	r6, [r3, #0]
 800c880:	6963      	ldr	r3, [r4, #20]
 800c882:	3001      	adds	r0, #1
 800c884:	4283      	cmp	r3, r0
 800c886:	d004      	beq.n	800c892 <__swbuf_r+0x62>
 800c888:	89a3      	ldrh	r3, [r4, #12]
 800c88a:	07db      	lsls	r3, r3, #31
 800c88c:	d506      	bpl.n	800c89c <__swbuf_r+0x6c>
 800c88e:	2e0a      	cmp	r6, #10
 800c890:	d104      	bne.n	800c89c <__swbuf_r+0x6c>
 800c892:	4621      	mov	r1, r4
 800c894:	4628      	mov	r0, r5
 800c896:	f000 f927 	bl	800cae8 <_fflush_r>
 800c89a:	b988      	cbnz	r0, 800c8c0 <__swbuf_r+0x90>
 800c89c:	4638      	mov	r0, r7
 800c89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8a0:	4b0a      	ldr	r3, [pc, #40]	; (800c8cc <__swbuf_r+0x9c>)
 800c8a2:	429c      	cmp	r4, r3
 800c8a4:	d101      	bne.n	800c8aa <__swbuf_r+0x7a>
 800c8a6:	68ac      	ldr	r4, [r5, #8]
 800c8a8:	e7cf      	b.n	800c84a <__swbuf_r+0x1a>
 800c8aa:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <__swbuf_r+0xa0>)
 800c8ac:	429c      	cmp	r4, r3
 800c8ae:	bf08      	it	eq
 800c8b0:	68ec      	ldreq	r4, [r5, #12]
 800c8b2:	e7ca      	b.n	800c84a <__swbuf_r+0x1a>
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f000 f81a 	bl	800c8f0 <__swsetup_r>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	d0cb      	beq.n	800c858 <__swbuf_r+0x28>
 800c8c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c8c4:	e7ea      	b.n	800c89c <__swbuf_r+0x6c>
 800c8c6:	bf00      	nop
 800c8c8:	0800d7e0 	.word	0x0800d7e0
 800c8cc:	0800d800 	.word	0x0800d800
 800c8d0:	0800d7c0 	.word	0x0800d7c0

0800c8d4 <__ascii_wctomb>:
 800c8d4:	b149      	cbz	r1, 800c8ea <__ascii_wctomb+0x16>
 800c8d6:	2aff      	cmp	r2, #255	; 0xff
 800c8d8:	bf85      	ittet	hi
 800c8da:	238a      	movhi	r3, #138	; 0x8a
 800c8dc:	6003      	strhi	r3, [r0, #0]
 800c8de:	700a      	strbls	r2, [r1, #0]
 800c8e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c8e4:	bf98      	it	ls
 800c8e6:	2001      	movls	r0, #1
 800c8e8:	4770      	bx	lr
 800c8ea:	4608      	mov	r0, r1
 800c8ec:	4770      	bx	lr
	...

0800c8f0 <__swsetup_r>:
 800c8f0:	4b32      	ldr	r3, [pc, #200]	; (800c9bc <__swsetup_r+0xcc>)
 800c8f2:	b570      	push	{r4, r5, r6, lr}
 800c8f4:	681d      	ldr	r5, [r3, #0]
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	b125      	cbz	r5, 800c906 <__swsetup_r+0x16>
 800c8fc:	69ab      	ldr	r3, [r5, #24]
 800c8fe:	b913      	cbnz	r3, 800c906 <__swsetup_r+0x16>
 800c900:	4628      	mov	r0, r5
 800c902:	f000 f985 	bl	800cc10 <__sinit>
 800c906:	4b2e      	ldr	r3, [pc, #184]	; (800c9c0 <__swsetup_r+0xd0>)
 800c908:	429c      	cmp	r4, r3
 800c90a:	d10f      	bne.n	800c92c <__swsetup_r+0x3c>
 800c90c:	686c      	ldr	r4, [r5, #4]
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c914:	0719      	lsls	r1, r3, #28
 800c916:	d42c      	bmi.n	800c972 <__swsetup_r+0x82>
 800c918:	06dd      	lsls	r5, r3, #27
 800c91a:	d411      	bmi.n	800c940 <__swsetup_r+0x50>
 800c91c:	2309      	movs	r3, #9
 800c91e:	6033      	str	r3, [r6, #0]
 800c920:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c924:	81a3      	strh	r3, [r4, #12]
 800c926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c92a:	e03e      	b.n	800c9aa <__swsetup_r+0xba>
 800c92c:	4b25      	ldr	r3, [pc, #148]	; (800c9c4 <__swsetup_r+0xd4>)
 800c92e:	429c      	cmp	r4, r3
 800c930:	d101      	bne.n	800c936 <__swsetup_r+0x46>
 800c932:	68ac      	ldr	r4, [r5, #8]
 800c934:	e7eb      	b.n	800c90e <__swsetup_r+0x1e>
 800c936:	4b24      	ldr	r3, [pc, #144]	; (800c9c8 <__swsetup_r+0xd8>)
 800c938:	429c      	cmp	r4, r3
 800c93a:	bf08      	it	eq
 800c93c:	68ec      	ldreq	r4, [r5, #12]
 800c93e:	e7e6      	b.n	800c90e <__swsetup_r+0x1e>
 800c940:	0758      	lsls	r0, r3, #29
 800c942:	d512      	bpl.n	800c96a <__swsetup_r+0x7a>
 800c944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c946:	b141      	cbz	r1, 800c95a <__swsetup_r+0x6a>
 800c948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c94c:	4299      	cmp	r1, r3
 800c94e:	d002      	beq.n	800c956 <__swsetup_r+0x66>
 800c950:	4630      	mov	r0, r6
 800c952:	f7fb fedb 	bl	800870c <_free_r>
 800c956:	2300      	movs	r3, #0
 800c958:	6363      	str	r3, [r4, #52]	; 0x34
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	2300      	movs	r3, #0
 800c964:	6063      	str	r3, [r4, #4]
 800c966:	6923      	ldr	r3, [r4, #16]
 800c968:	6023      	str	r3, [r4, #0]
 800c96a:	89a3      	ldrh	r3, [r4, #12]
 800c96c:	f043 0308 	orr.w	r3, r3, #8
 800c970:	81a3      	strh	r3, [r4, #12]
 800c972:	6923      	ldr	r3, [r4, #16]
 800c974:	b94b      	cbnz	r3, 800c98a <__swsetup_r+0x9a>
 800c976:	89a3      	ldrh	r3, [r4, #12]
 800c978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c97c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c980:	d003      	beq.n	800c98a <__swsetup_r+0x9a>
 800c982:	4621      	mov	r1, r4
 800c984:	4630      	mov	r0, r6
 800c986:	f000 fa09 	bl	800cd9c <__smakebuf_r>
 800c98a:	89a0      	ldrh	r0, [r4, #12]
 800c98c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c990:	f010 0301 	ands.w	r3, r0, #1
 800c994:	d00a      	beq.n	800c9ac <__swsetup_r+0xbc>
 800c996:	2300      	movs	r3, #0
 800c998:	60a3      	str	r3, [r4, #8]
 800c99a:	6963      	ldr	r3, [r4, #20]
 800c99c:	425b      	negs	r3, r3
 800c99e:	61a3      	str	r3, [r4, #24]
 800c9a0:	6923      	ldr	r3, [r4, #16]
 800c9a2:	b943      	cbnz	r3, 800c9b6 <__swsetup_r+0xc6>
 800c9a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9a8:	d1ba      	bne.n	800c920 <__swsetup_r+0x30>
 800c9aa:	bd70      	pop	{r4, r5, r6, pc}
 800c9ac:	0781      	lsls	r1, r0, #30
 800c9ae:	bf58      	it	pl
 800c9b0:	6963      	ldrpl	r3, [r4, #20]
 800c9b2:	60a3      	str	r3, [r4, #8]
 800c9b4:	e7f4      	b.n	800c9a0 <__swsetup_r+0xb0>
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	e7f7      	b.n	800c9aa <__swsetup_r+0xba>
 800c9ba:	bf00      	nop
 800c9bc:	20000010 	.word	0x20000010
 800c9c0:	0800d7e0 	.word	0x0800d7e0
 800c9c4:	0800d800 	.word	0x0800d800
 800c9c8:	0800d7c0 	.word	0x0800d7c0

0800c9cc <abort>:
 800c9cc:	b508      	push	{r3, lr}
 800c9ce:	2006      	movs	r0, #6
 800c9d0:	f000 fa96 	bl	800cf00 <raise>
 800c9d4:	2001      	movs	r0, #1
 800c9d6:	f7f5 fe55 	bl	8002684 <_exit>
	...

0800c9dc <__sflush_r>:
 800c9dc:	898a      	ldrh	r2, [r1, #12]
 800c9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e2:	4605      	mov	r5, r0
 800c9e4:	0710      	lsls	r0, r2, #28
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	d458      	bmi.n	800ca9c <__sflush_r+0xc0>
 800c9ea:	684b      	ldr	r3, [r1, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	dc05      	bgt.n	800c9fc <__sflush_r+0x20>
 800c9f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	dc02      	bgt.n	800c9fc <__sflush_r+0x20>
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9fe:	2e00      	cmp	r6, #0
 800ca00:	d0f9      	beq.n	800c9f6 <__sflush_r+0x1a>
 800ca02:	2300      	movs	r3, #0
 800ca04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca08:	682f      	ldr	r7, [r5, #0]
 800ca0a:	602b      	str	r3, [r5, #0]
 800ca0c:	d032      	beq.n	800ca74 <__sflush_r+0x98>
 800ca0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	075a      	lsls	r2, r3, #29
 800ca14:	d505      	bpl.n	800ca22 <__sflush_r+0x46>
 800ca16:	6863      	ldr	r3, [r4, #4]
 800ca18:	1ac0      	subs	r0, r0, r3
 800ca1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca1c:	b10b      	cbz	r3, 800ca22 <__sflush_r+0x46>
 800ca1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca20:	1ac0      	subs	r0, r0, r3
 800ca22:	2300      	movs	r3, #0
 800ca24:	4602      	mov	r2, r0
 800ca26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca28:	6a21      	ldr	r1, [r4, #32]
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	47b0      	blx	r6
 800ca2e:	1c43      	adds	r3, r0, #1
 800ca30:	89a3      	ldrh	r3, [r4, #12]
 800ca32:	d106      	bne.n	800ca42 <__sflush_r+0x66>
 800ca34:	6829      	ldr	r1, [r5, #0]
 800ca36:	291d      	cmp	r1, #29
 800ca38:	d82c      	bhi.n	800ca94 <__sflush_r+0xb8>
 800ca3a:	4a2a      	ldr	r2, [pc, #168]	; (800cae4 <__sflush_r+0x108>)
 800ca3c:	40ca      	lsrs	r2, r1
 800ca3e:	07d6      	lsls	r6, r2, #31
 800ca40:	d528      	bpl.n	800ca94 <__sflush_r+0xb8>
 800ca42:	2200      	movs	r2, #0
 800ca44:	6062      	str	r2, [r4, #4]
 800ca46:	04d9      	lsls	r1, r3, #19
 800ca48:	6922      	ldr	r2, [r4, #16]
 800ca4a:	6022      	str	r2, [r4, #0]
 800ca4c:	d504      	bpl.n	800ca58 <__sflush_r+0x7c>
 800ca4e:	1c42      	adds	r2, r0, #1
 800ca50:	d101      	bne.n	800ca56 <__sflush_r+0x7a>
 800ca52:	682b      	ldr	r3, [r5, #0]
 800ca54:	b903      	cbnz	r3, 800ca58 <__sflush_r+0x7c>
 800ca56:	6560      	str	r0, [r4, #84]	; 0x54
 800ca58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca5a:	602f      	str	r7, [r5, #0]
 800ca5c:	2900      	cmp	r1, #0
 800ca5e:	d0ca      	beq.n	800c9f6 <__sflush_r+0x1a>
 800ca60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca64:	4299      	cmp	r1, r3
 800ca66:	d002      	beq.n	800ca6e <__sflush_r+0x92>
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f7fb fe4f 	bl	800870c <_free_r>
 800ca6e:	2000      	movs	r0, #0
 800ca70:	6360      	str	r0, [r4, #52]	; 0x34
 800ca72:	e7c1      	b.n	800c9f8 <__sflush_r+0x1c>
 800ca74:	6a21      	ldr	r1, [r4, #32]
 800ca76:	2301      	movs	r3, #1
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47b0      	blx	r6
 800ca7c:	1c41      	adds	r1, r0, #1
 800ca7e:	d1c7      	bne.n	800ca10 <__sflush_r+0x34>
 800ca80:	682b      	ldr	r3, [r5, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d0c4      	beq.n	800ca10 <__sflush_r+0x34>
 800ca86:	2b1d      	cmp	r3, #29
 800ca88:	d001      	beq.n	800ca8e <__sflush_r+0xb2>
 800ca8a:	2b16      	cmp	r3, #22
 800ca8c:	d101      	bne.n	800ca92 <__sflush_r+0xb6>
 800ca8e:	602f      	str	r7, [r5, #0]
 800ca90:	e7b1      	b.n	800c9f6 <__sflush_r+0x1a>
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca98:	81a3      	strh	r3, [r4, #12]
 800ca9a:	e7ad      	b.n	800c9f8 <__sflush_r+0x1c>
 800ca9c:	690f      	ldr	r7, [r1, #16]
 800ca9e:	2f00      	cmp	r7, #0
 800caa0:	d0a9      	beq.n	800c9f6 <__sflush_r+0x1a>
 800caa2:	0793      	lsls	r3, r2, #30
 800caa4:	680e      	ldr	r6, [r1, #0]
 800caa6:	bf08      	it	eq
 800caa8:	694b      	ldreq	r3, [r1, #20]
 800caaa:	600f      	str	r7, [r1, #0]
 800caac:	bf18      	it	ne
 800caae:	2300      	movne	r3, #0
 800cab0:	eba6 0807 	sub.w	r8, r6, r7
 800cab4:	608b      	str	r3, [r1, #8]
 800cab6:	f1b8 0f00 	cmp.w	r8, #0
 800caba:	dd9c      	ble.n	800c9f6 <__sflush_r+0x1a>
 800cabc:	6a21      	ldr	r1, [r4, #32]
 800cabe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cac0:	4643      	mov	r3, r8
 800cac2:	463a      	mov	r2, r7
 800cac4:	4628      	mov	r0, r5
 800cac6:	47b0      	blx	r6
 800cac8:	2800      	cmp	r0, #0
 800caca:	dc06      	bgt.n	800cada <__sflush_r+0xfe>
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cad2:	81a3      	strh	r3, [r4, #12]
 800cad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cad8:	e78e      	b.n	800c9f8 <__sflush_r+0x1c>
 800cada:	4407      	add	r7, r0
 800cadc:	eba8 0800 	sub.w	r8, r8, r0
 800cae0:	e7e9      	b.n	800cab6 <__sflush_r+0xda>
 800cae2:	bf00      	nop
 800cae4:	20400001 	.word	0x20400001

0800cae8 <_fflush_r>:
 800cae8:	b538      	push	{r3, r4, r5, lr}
 800caea:	690b      	ldr	r3, [r1, #16]
 800caec:	4605      	mov	r5, r0
 800caee:	460c      	mov	r4, r1
 800caf0:	b913      	cbnz	r3, 800caf8 <_fflush_r+0x10>
 800caf2:	2500      	movs	r5, #0
 800caf4:	4628      	mov	r0, r5
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	b118      	cbz	r0, 800cb02 <_fflush_r+0x1a>
 800cafa:	6983      	ldr	r3, [r0, #24]
 800cafc:	b90b      	cbnz	r3, 800cb02 <_fflush_r+0x1a>
 800cafe:	f000 f887 	bl	800cc10 <__sinit>
 800cb02:	4b14      	ldr	r3, [pc, #80]	; (800cb54 <_fflush_r+0x6c>)
 800cb04:	429c      	cmp	r4, r3
 800cb06:	d11b      	bne.n	800cb40 <_fflush_r+0x58>
 800cb08:	686c      	ldr	r4, [r5, #4]
 800cb0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d0ef      	beq.n	800caf2 <_fflush_r+0xa>
 800cb12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb14:	07d0      	lsls	r0, r2, #31
 800cb16:	d404      	bmi.n	800cb22 <_fflush_r+0x3a>
 800cb18:	0599      	lsls	r1, r3, #22
 800cb1a:	d402      	bmi.n	800cb22 <_fflush_r+0x3a>
 800cb1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb1e:	f000 f915 	bl	800cd4c <__retarget_lock_acquire_recursive>
 800cb22:	4628      	mov	r0, r5
 800cb24:	4621      	mov	r1, r4
 800cb26:	f7ff ff59 	bl	800c9dc <__sflush_r>
 800cb2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb2c:	07da      	lsls	r2, r3, #31
 800cb2e:	4605      	mov	r5, r0
 800cb30:	d4e0      	bmi.n	800caf4 <_fflush_r+0xc>
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	059b      	lsls	r3, r3, #22
 800cb36:	d4dd      	bmi.n	800caf4 <_fflush_r+0xc>
 800cb38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb3a:	f000 f908 	bl	800cd4e <__retarget_lock_release_recursive>
 800cb3e:	e7d9      	b.n	800caf4 <_fflush_r+0xc>
 800cb40:	4b05      	ldr	r3, [pc, #20]	; (800cb58 <_fflush_r+0x70>)
 800cb42:	429c      	cmp	r4, r3
 800cb44:	d101      	bne.n	800cb4a <_fflush_r+0x62>
 800cb46:	68ac      	ldr	r4, [r5, #8]
 800cb48:	e7df      	b.n	800cb0a <_fflush_r+0x22>
 800cb4a:	4b04      	ldr	r3, [pc, #16]	; (800cb5c <_fflush_r+0x74>)
 800cb4c:	429c      	cmp	r4, r3
 800cb4e:	bf08      	it	eq
 800cb50:	68ec      	ldreq	r4, [r5, #12]
 800cb52:	e7da      	b.n	800cb0a <_fflush_r+0x22>
 800cb54:	0800d7e0 	.word	0x0800d7e0
 800cb58:	0800d800 	.word	0x0800d800
 800cb5c:	0800d7c0 	.word	0x0800d7c0

0800cb60 <std>:
 800cb60:	2300      	movs	r3, #0
 800cb62:	b510      	push	{r4, lr}
 800cb64:	4604      	mov	r4, r0
 800cb66:	e9c0 3300 	strd	r3, r3, [r0]
 800cb6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb6e:	6083      	str	r3, [r0, #8]
 800cb70:	8181      	strh	r1, [r0, #12]
 800cb72:	6643      	str	r3, [r0, #100]	; 0x64
 800cb74:	81c2      	strh	r2, [r0, #14]
 800cb76:	6183      	str	r3, [r0, #24]
 800cb78:	4619      	mov	r1, r3
 800cb7a:	2208      	movs	r2, #8
 800cb7c:	305c      	adds	r0, #92	; 0x5c
 800cb7e:	f7fb fdbd 	bl	80086fc <memset>
 800cb82:	4b05      	ldr	r3, [pc, #20]	; (800cb98 <std+0x38>)
 800cb84:	6263      	str	r3, [r4, #36]	; 0x24
 800cb86:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <std+0x3c>)
 800cb88:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb8a:	4b05      	ldr	r3, [pc, #20]	; (800cba0 <std+0x40>)
 800cb8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb8e:	4b05      	ldr	r3, [pc, #20]	; (800cba4 <std+0x44>)
 800cb90:	6224      	str	r4, [r4, #32]
 800cb92:	6323      	str	r3, [r4, #48]	; 0x30
 800cb94:	bd10      	pop	{r4, pc}
 800cb96:	bf00      	nop
 800cb98:	0800cf39 	.word	0x0800cf39
 800cb9c:	0800cf5b 	.word	0x0800cf5b
 800cba0:	0800cf93 	.word	0x0800cf93
 800cba4:	0800cfb7 	.word	0x0800cfb7

0800cba8 <_cleanup_r>:
 800cba8:	4901      	ldr	r1, [pc, #4]	; (800cbb0 <_cleanup_r+0x8>)
 800cbaa:	f000 b8af 	b.w	800cd0c <_fwalk_reent>
 800cbae:	bf00      	nop
 800cbb0:	0800cae9 	.word	0x0800cae9

0800cbb4 <__sfmoreglue>:
 800cbb4:	b570      	push	{r4, r5, r6, lr}
 800cbb6:	2268      	movs	r2, #104	; 0x68
 800cbb8:	1e4d      	subs	r5, r1, #1
 800cbba:	4355      	muls	r5, r2
 800cbbc:	460e      	mov	r6, r1
 800cbbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cbc2:	f7fb fe0f 	bl	80087e4 <_malloc_r>
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	b140      	cbz	r0, 800cbdc <__sfmoreglue+0x28>
 800cbca:	2100      	movs	r1, #0
 800cbcc:	e9c0 1600 	strd	r1, r6, [r0]
 800cbd0:	300c      	adds	r0, #12
 800cbd2:	60a0      	str	r0, [r4, #8]
 800cbd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbd8:	f7fb fd90 	bl	80086fc <memset>
 800cbdc:	4620      	mov	r0, r4
 800cbde:	bd70      	pop	{r4, r5, r6, pc}

0800cbe0 <__sfp_lock_acquire>:
 800cbe0:	4801      	ldr	r0, [pc, #4]	; (800cbe8 <__sfp_lock_acquire+0x8>)
 800cbe2:	f000 b8b3 	b.w	800cd4c <__retarget_lock_acquire_recursive>
 800cbe6:	bf00      	nop
 800cbe8:	20004d1d 	.word	0x20004d1d

0800cbec <__sfp_lock_release>:
 800cbec:	4801      	ldr	r0, [pc, #4]	; (800cbf4 <__sfp_lock_release+0x8>)
 800cbee:	f000 b8ae 	b.w	800cd4e <__retarget_lock_release_recursive>
 800cbf2:	bf00      	nop
 800cbf4:	20004d1d 	.word	0x20004d1d

0800cbf8 <__sinit_lock_acquire>:
 800cbf8:	4801      	ldr	r0, [pc, #4]	; (800cc00 <__sinit_lock_acquire+0x8>)
 800cbfa:	f000 b8a7 	b.w	800cd4c <__retarget_lock_acquire_recursive>
 800cbfe:	bf00      	nop
 800cc00:	20004d1e 	.word	0x20004d1e

0800cc04 <__sinit_lock_release>:
 800cc04:	4801      	ldr	r0, [pc, #4]	; (800cc0c <__sinit_lock_release+0x8>)
 800cc06:	f000 b8a2 	b.w	800cd4e <__retarget_lock_release_recursive>
 800cc0a:	bf00      	nop
 800cc0c:	20004d1e 	.word	0x20004d1e

0800cc10 <__sinit>:
 800cc10:	b510      	push	{r4, lr}
 800cc12:	4604      	mov	r4, r0
 800cc14:	f7ff fff0 	bl	800cbf8 <__sinit_lock_acquire>
 800cc18:	69a3      	ldr	r3, [r4, #24]
 800cc1a:	b11b      	cbz	r3, 800cc24 <__sinit+0x14>
 800cc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc20:	f7ff bff0 	b.w	800cc04 <__sinit_lock_release>
 800cc24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc28:	6523      	str	r3, [r4, #80]	; 0x50
 800cc2a:	4b13      	ldr	r3, [pc, #76]	; (800cc78 <__sinit+0x68>)
 800cc2c:	4a13      	ldr	r2, [pc, #76]	; (800cc7c <__sinit+0x6c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc32:	42a3      	cmp	r3, r4
 800cc34:	bf04      	itt	eq
 800cc36:	2301      	moveq	r3, #1
 800cc38:	61a3      	streq	r3, [r4, #24]
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f000 f820 	bl	800cc80 <__sfp>
 800cc40:	6060      	str	r0, [r4, #4]
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 f81c 	bl	800cc80 <__sfp>
 800cc48:	60a0      	str	r0, [r4, #8]
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f000 f818 	bl	800cc80 <__sfp>
 800cc50:	2200      	movs	r2, #0
 800cc52:	60e0      	str	r0, [r4, #12]
 800cc54:	2104      	movs	r1, #4
 800cc56:	6860      	ldr	r0, [r4, #4]
 800cc58:	f7ff ff82 	bl	800cb60 <std>
 800cc5c:	68a0      	ldr	r0, [r4, #8]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	2109      	movs	r1, #9
 800cc62:	f7ff ff7d 	bl	800cb60 <std>
 800cc66:	68e0      	ldr	r0, [r4, #12]
 800cc68:	2202      	movs	r2, #2
 800cc6a:	2112      	movs	r1, #18
 800cc6c:	f7ff ff78 	bl	800cb60 <std>
 800cc70:	2301      	movs	r3, #1
 800cc72:	61a3      	str	r3, [r4, #24]
 800cc74:	e7d2      	b.n	800cc1c <__sinit+0xc>
 800cc76:	bf00      	nop
 800cc78:	0800d320 	.word	0x0800d320
 800cc7c:	0800cba9 	.word	0x0800cba9

0800cc80 <__sfp>:
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	4607      	mov	r7, r0
 800cc84:	f7ff ffac 	bl	800cbe0 <__sfp_lock_acquire>
 800cc88:	4b1e      	ldr	r3, [pc, #120]	; (800cd04 <__sfp+0x84>)
 800cc8a:	681e      	ldr	r6, [r3, #0]
 800cc8c:	69b3      	ldr	r3, [r6, #24]
 800cc8e:	b913      	cbnz	r3, 800cc96 <__sfp+0x16>
 800cc90:	4630      	mov	r0, r6
 800cc92:	f7ff ffbd 	bl	800cc10 <__sinit>
 800cc96:	3648      	adds	r6, #72	; 0x48
 800cc98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	d503      	bpl.n	800cca8 <__sfp+0x28>
 800cca0:	6833      	ldr	r3, [r6, #0]
 800cca2:	b30b      	cbz	r3, 800cce8 <__sfp+0x68>
 800cca4:	6836      	ldr	r6, [r6, #0]
 800cca6:	e7f7      	b.n	800cc98 <__sfp+0x18>
 800cca8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ccac:	b9d5      	cbnz	r5, 800cce4 <__sfp+0x64>
 800ccae:	4b16      	ldr	r3, [pc, #88]	; (800cd08 <__sfp+0x88>)
 800ccb0:	60e3      	str	r3, [r4, #12]
 800ccb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ccb6:	6665      	str	r5, [r4, #100]	; 0x64
 800ccb8:	f000 f847 	bl	800cd4a <__retarget_lock_init_recursive>
 800ccbc:	f7ff ff96 	bl	800cbec <__sfp_lock_release>
 800ccc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ccc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ccc8:	6025      	str	r5, [r4, #0]
 800ccca:	61a5      	str	r5, [r4, #24]
 800cccc:	2208      	movs	r2, #8
 800ccce:	4629      	mov	r1, r5
 800ccd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ccd4:	f7fb fd12 	bl	80086fc <memset>
 800ccd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cce0:	4620      	mov	r0, r4
 800cce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce4:	3468      	adds	r4, #104	; 0x68
 800cce6:	e7d9      	b.n	800cc9c <__sfp+0x1c>
 800cce8:	2104      	movs	r1, #4
 800ccea:	4638      	mov	r0, r7
 800ccec:	f7ff ff62 	bl	800cbb4 <__sfmoreglue>
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	6030      	str	r0, [r6, #0]
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d1d5      	bne.n	800cca4 <__sfp+0x24>
 800ccf8:	f7ff ff78 	bl	800cbec <__sfp_lock_release>
 800ccfc:	230c      	movs	r3, #12
 800ccfe:	603b      	str	r3, [r7, #0]
 800cd00:	e7ee      	b.n	800cce0 <__sfp+0x60>
 800cd02:	bf00      	nop
 800cd04:	0800d320 	.word	0x0800d320
 800cd08:	ffff0001 	.word	0xffff0001

0800cd0c <_fwalk_reent>:
 800cd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd10:	4606      	mov	r6, r0
 800cd12:	4688      	mov	r8, r1
 800cd14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd18:	2700      	movs	r7, #0
 800cd1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd1e:	f1b9 0901 	subs.w	r9, r9, #1
 800cd22:	d505      	bpl.n	800cd30 <_fwalk_reent+0x24>
 800cd24:	6824      	ldr	r4, [r4, #0]
 800cd26:	2c00      	cmp	r4, #0
 800cd28:	d1f7      	bne.n	800cd1a <_fwalk_reent+0xe>
 800cd2a:	4638      	mov	r0, r7
 800cd2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd30:	89ab      	ldrh	r3, [r5, #12]
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d907      	bls.n	800cd46 <_fwalk_reent+0x3a>
 800cd36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	d003      	beq.n	800cd46 <_fwalk_reent+0x3a>
 800cd3e:	4629      	mov	r1, r5
 800cd40:	4630      	mov	r0, r6
 800cd42:	47c0      	blx	r8
 800cd44:	4307      	orrs	r7, r0
 800cd46:	3568      	adds	r5, #104	; 0x68
 800cd48:	e7e9      	b.n	800cd1e <_fwalk_reent+0x12>

0800cd4a <__retarget_lock_init_recursive>:
 800cd4a:	4770      	bx	lr

0800cd4c <__retarget_lock_acquire_recursive>:
 800cd4c:	4770      	bx	lr

0800cd4e <__retarget_lock_release_recursive>:
 800cd4e:	4770      	bx	lr

0800cd50 <__swhatbuf_r>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	460e      	mov	r6, r1
 800cd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	b096      	sub	sp, #88	; 0x58
 800cd5c:	4614      	mov	r4, r2
 800cd5e:	461d      	mov	r5, r3
 800cd60:	da08      	bge.n	800cd74 <__swhatbuf_r+0x24>
 800cd62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd66:	2200      	movs	r2, #0
 800cd68:	602a      	str	r2, [r5, #0]
 800cd6a:	061a      	lsls	r2, r3, #24
 800cd6c:	d410      	bmi.n	800cd90 <__swhatbuf_r+0x40>
 800cd6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd72:	e00e      	b.n	800cd92 <__swhatbuf_r+0x42>
 800cd74:	466a      	mov	r2, sp
 800cd76:	f000 f945 	bl	800d004 <_fstat_r>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	dbf1      	blt.n	800cd62 <__swhatbuf_r+0x12>
 800cd7e:	9a01      	ldr	r2, [sp, #4]
 800cd80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd88:	425a      	negs	r2, r3
 800cd8a:	415a      	adcs	r2, r3
 800cd8c:	602a      	str	r2, [r5, #0]
 800cd8e:	e7ee      	b.n	800cd6e <__swhatbuf_r+0x1e>
 800cd90:	2340      	movs	r3, #64	; 0x40
 800cd92:	2000      	movs	r0, #0
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	b016      	add	sp, #88	; 0x58
 800cd98:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd9c <__smakebuf_r>:
 800cd9c:	898b      	ldrh	r3, [r1, #12]
 800cd9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cda0:	079d      	lsls	r5, r3, #30
 800cda2:	4606      	mov	r6, r0
 800cda4:	460c      	mov	r4, r1
 800cda6:	d507      	bpl.n	800cdb8 <__smakebuf_r+0x1c>
 800cda8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	6123      	str	r3, [r4, #16]
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	6163      	str	r3, [r4, #20]
 800cdb4:	b002      	add	sp, #8
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	ab01      	add	r3, sp, #4
 800cdba:	466a      	mov	r2, sp
 800cdbc:	f7ff ffc8 	bl	800cd50 <__swhatbuf_r>
 800cdc0:	9900      	ldr	r1, [sp, #0]
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f7fb fd0d 	bl	80087e4 <_malloc_r>
 800cdca:	b948      	cbnz	r0, 800cde0 <__smakebuf_r+0x44>
 800cdcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdd0:	059a      	lsls	r2, r3, #22
 800cdd2:	d4ef      	bmi.n	800cdb4 <__smakebuf_r+0x18>
 800cdd4:	f023 0303 	bic.w	r3, r3, #3
 800cdd8:	f043 0302 	orr.w	r3, r3, #2
 800cddc:	81a3      	strh	r3, [r4, #12]
 800cdde:	e7e3      	b.n	800cda8 <__smakebuf_r+0xc>
 800cde0:	4b0d      	ldr	r3, [pc, #52]	; (800ce18 <__smakebuf_r+0x7c>)
 800cde2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cde4:	89a3      	ldrh	r3, [r4, #12]
 800cde6:	6020      	str	r0, [r4, #0]
 800cde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdec:	81a3      	strh	r3, [r4, #12]
 800cdee:	9b00      	ldr	r3, [sp, #0]
 800cdf0:	6163      	str	r3, [r4, #20]
 800cdf2:	9b01      	ldr	r3, [sp, #4]
 800cdf4:	6120      	str	r0, [r4, #16]
 800cdf6:	b15b      	cbz	r3, 800ce10 <__smakebuf_r+0x74>
 800cdf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f000 f913 	bl	800d028 <_isatty_r>
 800ce02:	b128      	cbz	r0, 800ce10 <__smakebuf_r+0x74>
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	f023 0303 	bic.w	r3, r3, #3
 800ce0a:	f043 0301 	orr.w	r3, r3, #1
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	89a0      	ldrh	r0, [r4, #12]
 800ce12:	4305      	orrs	r5, r0
 800ce14:	81a5      	strh	r5, [r4, #12]
 800ce16:	e7cd      	b.n	800cdb4 <__smakebuf_r+0x18>
 800ce18:	0800cba9 	.word	0x0800cba9

0800ce1c <memmove>:
 800ce1c:	4288      	cmp	r0, r1
 800ce1e:	b510      	push	{r4, lr}
 800ce20:	eb01 0402 	add.w	r4, r1, r2
 800ce24:	d902      	bls.n	800ce2c <memmove+0x10>
 800ce26:	4284      	cmp	r4, r0
 800ce28:	4623      	mov	r3, r4
 800ce2a:	d807      	bhi.n	800ce3c <memmove+0x20>
 800ce2c:	1e43      	subs	r3, r0, #1
 800ce2e:	42a1      	cmp	r1, r4
 800ce30:	d008      	beq.n	800ce44 <memmove+0x28>
 800ce32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce3a:	e7f8      	b.n	800ce2e <memmove+0x12>
 800ce3c:	4402      	add	r2, r0
 800ce3e:	4601      	mov	r1, r0
 800ce40:	428a      	cmp	r2, r1
 800ce42:	d100      	bne.n	800ce46 <memmove+0x2a>
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce4e:	e7f7      	b.n	800ce40 <memmove+0x24>

0800ce50 <_realloc_r>:
 800ce50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce54:	4680      	mov	r8, r0
 800ce56:	4614      	mov	r4, r2
 800ce58:	460e      	mov	r6, r1
 800ce5a:	b921      	cbnz	r1, 800ce66 <_realloc_r+0x16>
 800ce5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce60:	4611      	mov	r1, r2
 800ce62:	f7fb bcbf 	b.w	80087e4 <_malloc_r>
 800ce66:	b92a      	cbnz	r2, 800ce74 <_realloc_r+0x24>
 800ce68:	f7fb fc50 	bl	800870c <_free_r>
 800ce6c:	4625      	mov	r5, r4
 800ce6e:	4628      	mov	r0, r5
 800ce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce74:	f000 f8fa 	bl	800d06c <_malloc_usable_size_r>
 800ce78:	4284      	cmp	r4, r0
 800ce7a:	4607      	mov	r7, r0
 800ce7c:	d802      	bhi.n	800ce84 <_realloc_r+0x34>
 800ce7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce82:	d812      	bhi.n	800ceaa <_realloc_r+0x5a>
 800ce84:	4621      	mov	r1, r4
 800ce86:	4640      	mov	r0, r8
 800ce88:	f7fb fcac 	bl	80087e4 <_malloc_r>
 800ce8c:	4605      	mov	r5, r0
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d0ed      	beq.n	800ce6e <_realloc_r+0x1e>
 800ce92:	42bc      	cmp	r4, r7
 800ce94:	4622      	mov	r2, r4
 800ce96:	4631      	mov	r1, r6
 800ce98:	bf28      	it	cs
 800ce9a:	463a      	movcs	r2, r7
 800ce9c:	f7fb fc20 	bl	80086e0 <memcpy>
 800cea0:	4631      	mov	r1, r6
 800cea2:	4640      	mov	r0, r8
 800cea4:	f7fb fc32 	bl	800870c <_free_r>
 800cea8:	e7e1      	b.n	800ce6e <_realloc_r+0x1e>
 800ceaa:	4635      	mov	r5, r6
 800ceac:	e7df      	b.n	800ce6e <_realloc_r+0x1e>

0800ceae <_raise_r>:
 800ceae:	291f      	cmp	r1, #31
 800ceb0:	b538      	push	{r3, r4, r5, lr}
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	d904      	bls.n	800cec2 <_raise_r+0x14>
 800ceb8:	2316      	movs	r3, #22
 800ceba:	6003      	str	r3, [r0, #0]
 800cebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cec0:	bd38      	pop	{r3, r4, r5, pc}
 800cec2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cec4:	b112      	cbz	r2, 800cecc <_raise_r+0x1e>
 800cec6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ceca:	b94b      	cbnz	r3, 800cee0 <_raise_r+0x32>
 800cecc:	4620      	mov	r0, r4
 800cece:	f000 f831 	bl	800cf34 <_getpid_r>
 800ced2:	462a      	mov	r2, r5
 800ced4:	4601      	mov	r1, r0
 800ced6:	4620      	mov	r0, r4
 800ced8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cedc:	f000 b818 	b.w	800cf10 <_kill_r>
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d00a      	beq.n	800cefa <_raise_r+0x4c>
 800cee4:	1c59      	adds	r1, r3, #1
 800cee6:	d103      	bne.n	800cef0 <_raise_r+0x42>
 800cee8:	2316      	movs	r3, #22
 800ceea:	6003      	str	r3, [r0, #0]
 800ceec:	2001      	movs	r0, #1
 800ceee:	e7e7      	b.n	800cec0 <_raise_r+0x12>
 800cef0:	2400      	movs	r4, #0
 800cef2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cef6:	4628      	mov	r0, r5
 800cef8:	4798      	blx	r3
 800cefa:	2000      	movs	r0, #0
 800cefc:	e7e0      	b.n	800cec0 <_raise_r+0x12>
	...

0800cf00 <raise>:
 800cf00:	4b02      	ldr	r3, [pc, #8]	; (800cf0c <raise+0xc>)
 800cf02:	4601      	mov	r1, r0
 800cf04:	6818      	ldr	r0, [r3, #0]
 800cf06:	f7ff bfd2 	b.w	800ceae <_raise_r>
 800cf0a:	bf00      	nop
 800cf0c:	20000010 	.word	0x20000010

0800cf10 <_kill_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d07      	ldr	r5, [pc, #28]	; (800cf30 <_kill_r+0x20>)
 800cf14:	2300      	movs	r3, #0
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	602b      	str	r3, [r5, #0]
 800cf1e:	f7f5 fba1 	bl	8002664 <_kill>
 800cf22:	1c43      	adds	r3, r0, #1
 800cf24:	d102      	bne.n	800cf2c <_kill_r+0x1c>
 800cf26:	682b      	ldr	r3, [r5, #0]
 800cf28:	b103      	cbz	r3, 800cf2c <_kill_r+0x1c>
 800cf2a:	6023      	str	r3, [r4, #0]
 800cf2c:	bd38      	pop	{r3, r4, r5, pc}
 800cf2e:	bf00      	nop
 800cf30:	20004d18 	.word	0x20004d18

0800cf34 <_getpid_r>:
 800cf34:	f7f5 bb8e 	b.w	8002654 <_getpid>

0800cf38 <__sread>:
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	460c      	mov	r4, r1
 800cf3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf40:	f000 f89c 	bl	800d07c <_read_r>
 800cf44:	2800      	cmp	r0, #0
 800cf46:	bfab      	itete	ge
 800cf48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf4a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf4c:	181b      	addge	r3, r3, r0
 800cf4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf52:	bfac      	ite	ge
 800cf54:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf56:	81a3      	strhlt	r3, [r4, #12]
 800cf58:	bd10      	pop	{r4, pc}

0800cf5a <__swrite>:
 800cf5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5e:	461f      	mov	r7, r3
 800cf60:	898b      	ldrh	r3, [r1, #12]
 800cf62:	05db      	lsls	r3, r3, #23
 800cf64:	4605      	mov	r5, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	4616      	mov	r6, r2
 800cf6a:	d505      	bpl.n	800cf78 <__swrite+0x1e>
 800cf6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf70:	2302      	movs	r3, #2
 800cf72:	2200      	movs	r2, #0
 800cf74:	f000 f868 	bl	800d048 <_lseek_r>
 800cf78:	89a3      	ldrh	r3, [r4, #12]
 800cf7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf82:	81a3      	strh	r3, [r4, #12]
 800cf84:	4632      	mov	r2, r6
 800cf86:	463b      	mov	r3, r7
 800cf88:	4628      	mov	r0, r5
 800cf8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf8e:	f000 b817 	b.w	800cfc0 <_write_r>

0800cf92 <__sseek>:
 800cf92:	b510      	push	{r4, lr}
 800cf94:	460c      	mov	r4, r1
 800cf96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf9a:	f000 f855 	bl	800d048 <_lseek_r>
 800cf9e:	1c43      	adds	r3, r0, #1
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	bf15      	itete	ne
 800cfa4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfae:	81a3      	strheq	r3, [r4, #12]
 800cfb0:	bf18      	it	ne
 800cfb2:	81a3      	strhne	r3, [r4, #12]
 800cfb4:	bd10      	pop	{r4, pc}

0800cfb6 <__sclose>:
 800cfb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfba:	f000 b813 	b.w	800cfe4 <_close_r>
	...

0800cfc0 <_write_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	4d07      	ldr	r5, [pc, #28]	; (800cfe0 <_write_r+0x20>)
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	4608      	mov	r0, r1
 800cfc8:	4611      	mov	r1, r2
 800cfca:	2200      	movs	r2, #0
 800cfcc:	602a      	str	r2, [r5, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	f7f5 fb7f 	bl	80026d2 <_write>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_write_r+0x1e>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_write_r+0x1e>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	20004d18 	.word	0x20004d18

0800cfe4 <_close_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4d06      	ldr	r5, [pc, #24]	; (800d000 <_close_r+0x1c>)
 800cfe8:	2300      	movs	r3, #0
 800cfea:	4604      	mov	r4, r0
 800cfec:	4608      	mov	r0, r1
 800cfee:	602b      	str	r3, [r5, #0]
 800cff0:	f7f5 fb8b 	bl	800270a <_close>
 800cff4:	1c43      	adds	r3, r0, #1
 800cff6:	d102      	bne.n	800cffe <_close_r+0x1a>
 800cff8:	682b      	ldr	r3, [r5, #0]
 800cffa:	b103      	cbz	r3, 800cffe <_close_r+0x1a>
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	bd38      	pop	{r3, r4, r5, pc}
 800d000:	20004d18 	.word	0x20004d18

0800d004 <_fstat_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4d07      	ldr	r5, [pc, #28]	; (800d024 <_fstat_r+0x20>)
 800d008:	2300      	movs	r3, #0
 800d00a:	4604      	mov	r4, r0
 800d00c:	4608      	mov	r0, r1
 800d00e:	4611      	mov	r1, r2
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	f7f5 fb86 	bl	8002722 <_fstat>
 800d016:	1c43      	adds	r3, r0, #1
 800d018:	d102      	bne.n	800d020 <_fstat_r+0x1c>
 800d01a:	682b      	ldr	r3, [r5, #0]
 800d01c:	b103      	cbz	r3, 800d020 <_fstat_r+0x1c>
 800d01e:	6023      	str	r3, [r4, #0]
 800d020:	bd38      	pop	{r3, r4, r5, pc}
 800d022:	bf00      	nop
 800d024:	20004d18 	.word	0x20004d18

0800d028 <_isatty_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d06      	ldr	r5, [pc, #24]	; (800d044 <_isatty_r+0x1c>)
 800d02c:	2300      	movs	r3, #0
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	602b      	str	r3, [r5, #0]
 800d034:	f7f5 fb85 	bl	8002742 <_isatty>
 800d038:	1c43      	adds	r3, r0, #1
 800d03a:	d102      	bne.n	800d042 <_isatty_r+0x1a>
 800d03c:	682b      	ldr	r3, [r5, #0]
 800d03e:	b103      	cbz	r3, 800d042 <_isatty_r+0x1a>
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	20004d18 	.word	0x20004d18

0800d048 <_lseek_r>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	4d07      	ldr	r5, [pc, #28]	; (800d068 <_lseek_r+0x20>)
 800d04c:	4604      	mov	r4, r0
 800d04e:	4608      	mov	r0, r1
 800d050:	4611      	mov	r1, r2
 800d052:	2200      	movs	r2, #0
 800d054:	602a      	str	r2, [r5, #0]
 800d056:	461a      	mov	r2, r3
 800d058:	f7f5 fb7e 	bl	8002758 <_lseek>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_lseek_r+0x1e>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_lseek_r+0x1e>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	20004d18 	.word	0x20004d18

0800d06c <_malloc_usable_size_r>:
 800d06c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d070:	1f18      	subs	r0, r3, #4
 800d072:	2b00      	cmp	r3, #0
 800d074:	bfbc      	itt	lt
 800d076:	580b      	ldrlt	r3, [r1, r0]
 800d078:	18c0      	addlt	r0, r0, r3
 800d07a:	4770      	bx	lr

0800d07c <_read_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4d07      	ldr	r5, [pc, #28]	; (800d09c <_read_r+0x20>)
 800d080:	4604      	mov	r4, r0
 800d082:	4608      	mov	r0, r1
 800d084:	4611      	mov	r1, r2
 800d086:	2200      	movs	r2, #0
 800d088:	602a      	str	r2, [r5, #0]
 800d08a:	461a      	mov	r2, r3
 800d08c:	f7f5 fb04 	bl	8002698 <_read>
 800d090:	1c43      	adds	r3, r0, #1
 800d092:	d102      	bne.n	800d09a <_read_r+0x1e>
 800d094:	682b      	ldr	r3, [r5, #0]
 800d096:	b103      	cbz	r3, 800d09a <_read_r+0x1e>
 800d098:	6023      	str	r3, [r4, #0]
 800d09a:	bd38      	pop	{r3, r4, r5, pc}
 800d09c:	20004d18 	.word	0x20004d18

0800d0a0 <_init>:
 800d0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a2:	bf00      	nop
 800d0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a6:	bc08      	pop	{r3}
 800d0a8:	469e      	mov	lr, r3
 800d0aa:	4770      	bx	lr

0800d0ac <_fini>:
 800d0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ae:	bf00      	nop
 800d0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b2:	bc08      	pop	{r3}
 800d0b4:	469e      	mov	lr, r3
 800d0b6:	4770      	bx	lr
